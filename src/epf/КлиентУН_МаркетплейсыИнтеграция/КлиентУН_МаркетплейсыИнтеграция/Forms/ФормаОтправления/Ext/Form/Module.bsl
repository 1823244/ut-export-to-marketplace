
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДополнительнаяОбработкаСсылка) Тогда
		ВызватьИсключение "Не заполнен ключевой параметр формы 'ДополнительнаяОбработкаСсылка'";
	КонецЕсли;
	Параметры.Свойство("ДополнительнаяОбработкаСсылка", Объект.ОбработкаСсылка);
	
	НастройкиПрочитатьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииФормы() Экспорт
	
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("ПроверитьРезультатЗапросаСервисаУН");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КлиентУН_ИзмененоСостояниеОтладки" И Источник <> ЭтотОбъект Тогда
		Объект.Отладка = Параметр;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ОткрытьФормуВТекущемОкне(Команда)
	ВладелецФормы.ОткрытьФормуОбработки(Команда.Имя, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаПриИзменении(Элемент)
	Оповестить("КлиентУН_ИзмененоСостояниеОтладки", Объект.Отладка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПрочитать(Команда = Неопределено)
	СброситьНастройкиМаркетплейса();
	НастройкиПрочитатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент = Неопределено)
	НастройкиМаркетплейсаПрочитать();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	НастройкиМаркетплейсаПрочитать();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказыОбновить(Команда = Неопределено)
	ЗаполнитьЗаказыТребующиеРазбивкиОтправлений();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заказ", ТекущиеДанные.Заказ);
	
	ДопПараметрыОповещения = Новый Структура;
	ДопПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеРазделенияОтправления", ЭтотОбъект, ДопПараметрыОповещения);
	
	ОткрытьФорму(
		"ВнешняяОбработка.КлиентУН_МаркетплейсыИнтеграция.Форма.ФормаОтправленияРазделение",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура СброситьНастройкиМаркетплейса()
	
	ИмяМаркетплейса = Неопределено;
	МаркетплейсИспользование = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПрочитатьНаСервере()
	
	ОбработкаОбъект = ЭтотОбъект();
	ТекущиеНастройки = ОбработкаОбъект.Настройки();
	
	Маркетплейсы = ОбработкаОбъект.Маркетплейсы();
	
	Элементы.Организация.СписокВыбора.Очистить();
	Элементы.Контрагент.СписокВыбора.Очистить();
	
	Для Каждого СтрТаб Из ТекущиеНастройки.НастройкиМаркетплейсов Цикл
		Если СтрТаб.ИспользоватьОтправления
			//И СтрТаб.Использование  // ЗАГЛУШКА / УДАЛИТЬ ПОСЛЕ ТЕСТИРОВАНИЯ
			Тогда
			Если Элементы.Организация.СписокВыбора.НайтиПоЗначению(СтрТаб.Организация) = Неопределено Тогда
				Элементы.Организация.СписокВыбора.Добавить(СтрТаб.Организация);
			КонецЕсли;
			Если Элементы.Контрагент.СписокВыбора.НайтиПоЗначению(СтрТаб.Контрагент) = Неопределено Тогда
				Элементы.Контрагент.СписокВыбора.Добавить(СтрТаб.Контрагент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Контрагент)) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек = ОбработкаОбъект.СтрокаНастройкиМаркетплейса(ТекущиеНастройки, Организация, Контрагент);
	
	Если СтрокаНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМаркетплейса = СтрокаНастроек.Имя;
	МаркетплейсИспользование = СтрокаНастроек.Использование;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиМаркетплейсаПрочитать()
		
	СброситьНастройкиМаркетплейса();
	
	Если НЕ (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Контрагент)) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиМаркетплейсаПрочитатьНаСервере();
	
	// Проверяем настройки отгрузки для этой организации
	// и маркетплейса
	
	Если НЕ ЗначениеЗаполнено(ИмяМаркетплейса) Тогда
		ПоказатьПредупреждение(, СтрШаблон(
			"Не найдены настройки маркетплейса для организации!
			|Организация: %1
			|Контрагент: %2",
			Организация, Контрагент
		));
		
	//ИначеЕсли НЕ МаркетплейсИспользование Тогда  // ЗАГЛУШКА / УДАЛИТЬ ПОСЛЕ ТЕСТИРОВАНИЯ
	//	ПоказатьПредупреждение(, СтрШаблон(
	//		"Отключены настройки маркетплейса для организации!
	//		|Организация: %1
	//		|Контрагент: %2",
	//		Организация, Контрагент
	//	));
		
	КонецЕсли;
	
	ТаблицаЗаказыОбновить();
	
	ВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура НастройкиМаркетплейсаПрочитатьНаСервере()
		
	Если НЕ (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Контрагент)) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = ЭтотОбъект();
	ТекущиеНастройки = ОбработкаОбъект.Настройки();
	
	СтрокаНастроек = ОбработкаОбъект.СтрокаНастройкиМаркетплейса(ТекущиеНастройки, Организация, Контрагент);
	
	Если СтрокаНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМаркетплейса = СтрокаНастроек.Имя;
	МаркетплейсИспользование = СтрокаНастроек.Использование;
	
	Если ЗначениеЗаполнено(ИмяМаркетплейса) Тогда
		
		СтруктураВнешнейСистемы = ОбработкаОбъект.ВнешниеСистемы_Найти(Организация, ИмяМаркетплейса);
		Если ЗначениеЗаполнено(СтруктураВнешнейСистемы) Тогда
			ИдентификаторВнешнейСистемы = СтруктураВнешнейСистемы.uuid;
		Иначе
			ВызватьИсключениеНеНайденаВнешняяСистема(Организация, ИмяМаркетплейса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды

&НаСервере
Функция ЭтотОбъект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция ОбработкаОбъект(Знач ОбработкаСсылка, Знач Отладка = Ложь)
	
	ОбработкаОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ОбработкаСсылка);
	ОбработкаОбъект.ОбработкаСсылка = ОбработкаСсылка;
	ОбработкаОбъект.Отладка = Отладка;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	
	//Элементы.СтраницаЗаказы.Доступность = МаркетплейсИспользование;  // ЗАГЛУШКА / УДАЛИТЬ ПОСЛЕ ТЕСТИРОВАНИЯ
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыМаркетплейса(ИдентификаторВнешнейСистемы, ИмяМаркетплейса)
	
	ПараметрыМаркетплейса = Новый Структура;
	ПараметрыМаркетплейса.Вставить("ИдВнешнейСистемы",	ИдентификаторВнешнейСистемы);
	ПараметрыМаркетплейса.Вставить("ИмяМаркетплейса",	ИмяМаркетплейса);
	
	Возврат ПараметрыМаркетплейса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаказыТребующиеРазбивкиОтправлений()
	
	ОбработкаОбъект = ЭтотОбъект();
	ПараметрыМаркетплейса = ПараметрыМаркетплейса(ИдентификаторВнешнейСистемы, ИмяМаркетплейса);
	
	ЗаказыДляРазбивки = ОбработкаОбъект.ЗаказыТребующиеРазбивкиОтправлений(Организация, ПараметрыМаркетплейса);
	
	ТаблицаЗаказы.Очистить();
	Для Каждого СтрокаЗаказа Из ЗаказыДляРазбивки.Заказы Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗаказы.Добавить(), СтрокаЗаказа);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при нажатии "Готово" в "ФормаОтправленияРазделение", служит
// для отправки результата разделения в УН
// 
// Параметры:
// 	РезультатРазделения - Неопределено (если не было разделения) или Структура:
// 		* СтрокиЗаказа - Массив из Структура:
//			** Номенклатура - СправочникСсылка.Номенклатура
//			** Количество - Число - количество товара в коробке
//			** Коробка - Число - просто порядковый номер коробки (не является идентификатором!!!)
//	ДопПараметры - Структура:
//		* ТекущиеДанные - ДанныеФормыСтруктура - данные текущей строки таблицы формы "ТаблицаЗаказы"
//
&НаКлиенте
Процедура ПослеРазделенияОтправления(РезультатРазделения, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатРазделения) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем идентификатор заказа на стороне УН
	РезультатРазделения.Вставить("Идентификатор", ДопПараметры.ТекущиеДанные.Идентификатор);
	
	//ОтправитьЗаказНаСборкуСРазделениемСКонтекстом(РезультатРазделения);
	ОтправитьЗаказНаСборкуСРазделением(
		РезультатРазделения,
		Объект.ОбработкаСсылка,
		Организация,
		ПараметрыМаркетплейса(ИдентификаторВнешнейСистемы, ИмяМаркетплейса),
		Объект.Отладка
	);
	
	ТаблицаЗаказы.Удалить(ДопПараметры.ТекущиеДанные);
	
КонецПроцедуры

// Версия функции "ОтправитьЗаказНаСборкуСРазделениемБезКонтекста" для отладки
// 
&НаСервере
Процедура ОтправитьЗаказНаСборкуСРазделениемСКонтекстом(РезультатРазделения)
	
	ОбработкаОбъект = ЭтотОбъект();
	ПараметрыМаркетплейса = ПараметрыМаркетплейса(ИдентификаторВнешнейСистемы, ИмяМаркетплейса);
	
	ОбработкаОбъект.ОтправитьЗаказНаСборкуСРазделением(Организация, ПараметрыМаркетплейса, РезультатРазделения);
	
КонецПроцедуры

// Легковесная версия функции "ОтправитьЗаказНаСборкуСРазделением" для прода
// 
&НаСервереБезКонтекста
Процедура ОтправитьЗаказНаСборкуСРазделением(РезультатРазделения, ОбработкаСсылка, Организация, ПараметрыМаркетплейса, Отладка)
	
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	ОбработкаОбъект.ОтправитьЗаказНаСборкуСРазделением(Организация, ПараметрыМаркетплейса, РезультатРазделения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВызватьИсключениеНеРеализовано()
	ВызватьИсключение "Данный функционал ещё не реализован!";
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВызватьИсключениеНеНайденаВнешняяСистема(Организация, ИмяМаркетплейса)
	ВызватьИсключение СтрШаблон(
		"Не найдена в УН внешняя система для пары:
		|- организация: %1
		|- имя маркетплейся: %2",
		Организация, ИмяМаркетплейса
	);
КонецПроцедуры

&НаСервереБезКонтекста
// Преобразует (сериализует) любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
// См. также ЗначениеИзСтрокиXML.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаXML(Знач ДатаСтрокой)
	
	Если НЕ ЗначениеЗаполнено(ДатаСтрокой) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Возврат XMLЗначение(Тип("Дата"), ДатаСтрокой);
	
КонецФункции

&НаКлиенте
Функция ОчередьЗапросовСервиса()
	// Весь программный интерфейс в форме "ФормаГлавная",
	// которая владелец этой
	Возврат ВладелецФормы;
КонецФункции

&НаКлиенте
Процедура ПоказатьОчередьЗапросовСервисаУН(Команда)
	ВладелецФормы.ПоказатьОчередьЗапросовСервисаУН();
КонецПроцедуры

#Область Общие

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРеквизит(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕслиПусто(Значение, ЗначениеПоУмолчанию)
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйМассив(Знч1, Знч2 = Null, Знч3 = Null, Знч4 = Null, Знч5 = Null)
	
	НовыйМассив = Новый Массив;
	
	Для Сч = 1 По 5 Цикл
		ТекЗнч = Вычислить("Знч" + Сч);
		Если ТекЗнч <> Null Тогда
			НовыйМассив.Добавить(ТекЗнч);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипЧисло(ЧислоРазрядов = 0, ЧислоРазрядовДробнойЧасти = 0, Неотрицательное = Ложь)
	
	Если Неотрицательное Тогда
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Неотрицательный;
	Иначе
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(
		ЧислоРазрядов,
		ЧислоРазрядовДробнойЧасти,
		ДопустимыйЗнакЧисла
	);
	
	Возврат Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрока(Длина = 0, Фиксированная = Ложь)
	
	Если Фиксированная Тогда
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Фиксированная;
	Иначе
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Переменная;
	КонецЕсли;
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(Длина, ДопустимаяДлинаСтроки);
	
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторыСтроки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипДата(СоставДаты = Неопределено)
	
	Если СоставДаты = Неопределено Тогда
		СоставДаты = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	КвалификаторыДаты = Новый КвалификаторыДаты(СоставДаты);
	
	Возврат Новый ОписаниеТипов("Дата", , , КвалификаторыДаты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипБулево()
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСсылка(ИмяТипа)
	Возврат Новый ОписаниеТипов(ИмяТипа);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючиОбъекта(ОбъектКоллекцияСКлючами)
	
	Ключи = Новый Массив;
	
	Для Каждого Элемент Из ОбъектКоллекцияСКлючами Цикл
		Ключи.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат Ключи;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСообщение(Текст)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
