
&НаКлиенте
Перем мСтрокиЗаказов;

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДополнительнаяОбработкаСсылка) Тогда
		ВызватьИсключение "Не заполнен ключевой параметр формы 'ДополнительнаяОбработкаСсылка'";
	КонецЕсли;
	Параметры.Свойство("ДополнительнаяОбработкаСсылка", Объект.ОбработкаСсылка);
	
	ОбработкаОбъект = ЭтотОбъект();
	
	ОткрытаИзФайла = ОбработкаОбъект.ОбработкаОткрытаИзФайла();
	
	ТекущиеНастройки = ОбработкаОбъект.Настройки();
	
	Маркетплейсы = ОбработкаОбъект.Маркетплейсы();
	МакетыПечати = ОбработкаОбъект.МакетыПечати();
	
	УстановитьПараметрыСпискаЗаказов();
	
	ИспользоватьПодключаемоеОборудование = ТекущиеНастройки.ИспользоватьПодключаемоеОборудование;
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если мСтрокиЗаказов = Неопределено Тогда
		мСтрокиЗаказов = Новый Соответствие;
	КонецЕсли;
	
	ВидимостьДоступностьЭлементов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииФормы() Экспорт
	
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("ПроверитьРезультатЗапросаСервисаУН");
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КлиентУН_ИзмененоСостояниеОтладки" И Источник <> ЭтотОбъект Тогда
		Объект.Отладка = Параметр;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ИспользоватьПодключаемоеОборудование
		//И ВводДоступен()
		Тогда
		
		ЭтоЭмуляция = ЕстьРеквизит(Параметр, "Эмуляция");
		ДанныеСканера = ?(ЭтоЭмуляция, Параметр.ДанныеСканера, Параметр);
		
		Если ИмяСобытия = "ScanData"
			И (ЭтоЭмуляция ИЛИ МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие())
			Тогда
			ДанныеШтрихкодов = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(ДанныеСканера);
			ОбработатьШтрихкоды(ДанныеШтрихкодов, ЭтоЭмуляция);
		КонецЕсли;
		
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ОтладкаПриИзменении(Элемент)
	Оповестить("КлиентУН_ИзмененоСостояниеОтладки", Объект.Отладка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДокументОтгрузкиПриИзменении(Элемент)
	УстановитьДокументОтгрузки(ДокументОтгрузки);
КонецПроцедуры

&НаКлиенте
Процедура СброситьДокументОтгрузки() Экспорт
	
	ДокументОтгрузки = Неопределено;
	Контрагент = Неопределено;
	Организация = Неопределено;
	Элементы.Организация.СписокВыбора.Очистить();
	
	СписокЗаказов.Очистить();
	ТоварыДляПечати.Очистить();
	ТоварыОтправлений.Очистить();
	мСтрокиЗаказов.Очистить();
	
	СброситьНастройкиМаркетплейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент = Неопределено)
	
	НастройкиПрочитать();
	
	// Проверяем настройки отгрузки для этой организации
	// и маркетплейса
	
	Если НЕ ЗначениеЗаполнено(ИмяМаркетплейса) Тогда
		ПоказатьПредупреждение(, СтрШаблон(
			"Не найдены настройки маркетплейса для организации!
			|Организация: %1
			|Контрагент: %2",
			Организация, Контрагент
		));
		
	ИначеЕсли НЕ МаркетплейсИспользование Тогда
		ПоказатьПредупреждение(, СтрШаблон(
			"Отключены настройки маркетплейса для организации!
			|Организация: %1
			|Контрагент: %2",
			Организация, Контрагент
		));
		
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
	ТоварыДляПечатиОбновитьСписок();
	СкачатьЭтикетки();
	ПроверитьОшибкиСтрокТоваров();
	ПоставкаЗапросить();
	
	ВидимостьДоступностьЭлементов();
	
	// Помечаем строки заказов, у которых более одной строки
	мСтрокиЗаказов.Очистить();
	Для Каждого СтрТаб Из ТоварыДляПечати Цикл
		// Собираем строки заказов
		СтрокиЗаказа = мСтрокиЗаказов.Получить(СтрТаб.ЗаказКлиента);
		Если СтрокиЗаказа = Неопределено Тогда
			СтрокиЗаказа = Новый Массив;
			мСтрокиЗаказов.Вставить(СтрТаб.ЗаказКлиента, СтрокиЗаказа);
		КонецЕсли;
		СтрокиЗаказа.Добавить(СтрТаб);
	КонецЦикла;
	Для Каждого Элемент Из мСтрокиЗаказов Цикл
		СтрокиЗаказа = Элемент.Значение;
		Если СтрокиЗаказа.Количество() > 1 Тогда
			Для Каждого СтрТаб Из СтрокиЗаказа Цикл
				СтрТаб.МультиЗаказ = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтрокВЭтомЗаказеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтборДляСтрок = Новый ФиксированнаяСтруктура("МультиЗаказ", Истина);
	Элементы.ТоварыДляПечати.ОтборСтрок = ОтборДляСтрок;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокВЭтомЗаказеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ТоварыДляПечати.ОтборСтрок = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляПечатиОбновитьСписок(Команда = Неопределено)
	
	ПакетЗаказов = Новый Структура;
	ПакетЗаказов.Вставить("ИдВнешнейСистемы",	ИдентификаторВнешнейСистемы);
	ПакетЗаказов.Вставить("ИмяМаркетплейса",	ИмяМаркетплейса);
	
	Если ЭтоКонтрагентСклад Тогда
		НомераЗаказов = Новый Соответствие;
		Для Каждого СтрТаб Из ТоварыДляПечати Цикл
			Если НомераЗаказов.Получить(СтрТаб.НомерЗаказаМаркетплейса) = Неопределено Тогда
				НомераЗаказов.Вставить(СтрТаб.НомерЗаказаМаркетплейса, СтрТаб.ЗаказКлиента);
			КонецЕсли;
		КонецЦикла;
		ПакетЗаказов.Вставить("Заказы", КлючиОбъекта(НомераЗаказов));
	Иначе
		ПакетЗаказов.Вставить("Заказы", СписокЗаказов.ВыгрузитьЗначения());
	КонецЕсли;
	
	ТекущееСостояние = ТекущееСостояниеОтгрузкиТоваровЗаказов(Объект.ОбработкаСсылка, Организация, ПакетЗаказов, Объект.Отладка);
	
	ЗаказовВсего = ТоварыДляПечати.Количество();
	ЗаказовОтработано = 0;
	
	ТоварыОтправлений.Очистить();
	Для Каждого СтрТаб Из ТоварыДляПечати Цикл
		
		// Данные заказов
		СтруктураЗаказа = ТекущееСостояние.Заказы.Получить(СтрТаб.НомерЗаказаМаркетплейса);
		Если ЗначениеЗаполнено(СтруктураЗаказа)Тогда
			СтрТаб.ДатаЗаказаМаркетплейса = СтруктураЗаказа.ДатаЗаказа;
		КонецЕсли;
		
		// Данные товаров
		СтруктураТовара = ТекущееСостояние.Товары.Получить(СтрТаб.НоменклатураКод);
		Если ЗначениеЗаполнено(СтруктураТовара) Тогда
			СтрТаб.Штрихкод = СтруктураТовара.Штрихкод;
		Иначе
			СтрТаб.Штрихкод = "";
		КонецЕсли;
		
		// Поставки
		СтруктураПоставки = ТекущееСостояние.Поставки.Получить(СтрТаб.НомерЗаказаМаркетплейса);
		Если ЗначениеЗаполнено(СтруктураПоставки) Тогда
			СтрТаб.НомерПоставки = СтруктураПоставки.НомерПоставки;
		Иначе
			СтрТаб.НомерПоставки = "";
		КонецЕсли;
		
		// Статусы обработки строк
		КлючСтроки = СтрТаб.НомерЗаказаМаркетплейса + СтрТаб.ИдентификаторСтроки;
		СостояниеСтроки = ТекущееСостояние.Строки.Получить(КлючСтроки);
		Если ЗначениеЗаполнено(СостояниеСтроки) Тогда
			СтрТаб.Выбор = ЗначениеЗаполнено(СостояниеСтроки.ДатаВыбора);
			СтрТаб.Отработан = ЗначениеЗаполнено(СостояниеСтроки.ДатаОбработки);
		Иначе
			СтрТаб.Выбор = Ложь;
			СтрТаб.Отработан = Ложь;
		КонецЕсли;
		
		// Номера отправлений (доставки)
		КлючСтроки = СтрТаб.НомерЗаказаМаркетплейса + СтрТаб.НоменклатураКод;
		ОтправленияТовара = ТекущееСостояние.Отправления.Получить(КлючСтроки);
		Если ОтправленияТовара = Неопределено Тогда
			ОтправленияТовара = Новый Массив;
		КонецЕсли;
		СтрТаб.НомерДоставки.Очистить();
		Для Каждого Отправление Из ОтправленияТовара Цикл
			Если Отправление.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			НовСтрОтпр = ТоварыОтправлений.Добавить();
			НовСтрОтпр.КлючСтроки = СтрТаб.НомерЗаказаМаркетплейса + СтрТаб.ИдентификаторСтроки;
			НовСтрОтпр.НомерДоставки = Отправление.НомерДоставки;
			НовСтрОтпр.Количество = Отправление.Количество;
			Отправление.Количество = Отправление.Количество - СтрТаб.Количество;
			СтрТаб.НомерДоставки.Добавить(
				Отправление.НомерДоставки, СтрШаблон("%1 (%2 шт.)", НовСтрОтпр.НомерДоставки, НовСтрОтпр.Количество));
		КонецЦикла;
		
		Если СтрТаб.Отработан Тогда
			ЗаказовОтработано = ЗаказовОтработано + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляПечатиПриАктивизацииСтроки(Элемент)
	
	СтрокВЭтомЗаказе = 0;
	ТекущийЗаказТоваров = Неопределено;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = мСтрокиЗаказов.Получить(ТекущиеДанные.ЗаказКлиента);
	Если ИдентификаторыСтрок <> Неопределено Тогда
		
		СтрокВЭтомЗаказе = ИдентификаторыСтрок.Количество();
		
		ЦветПодсветки = WebЦвета.ЛососьСветлый;
		ЦветТекстаЯркий = WebЦвета.Красный;
		Если СтрокВЭтомЗаказе > 1 Тогда
			Элементы.СтрокВЭтомЗаказе.ЦветФона = ЦветПодсветки;
			Элементы.СтрокВЭтомЗаказе.ЦветТекста = ЦветТекстаЯркий;
			ТекущийЗаказТоваров = ТекущиеДанные.ЗаказКлиента;
		Иначе
			Элементы.СтрокВЭтомЗаказе.ЦветФона = WebЦвета.Белый;
			Элементы.СтрокВЭтомЗаказе.ЦветТекста = Новый Цвет();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляПечатиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ТоварыДляПечатиЗаказКлиента Тогда
		ПоказатьЗначение(, ТекущиеДанные.ЗаказКлиента);
		
	ИначеЕсли Поле = Элементы.ТоварыДляПечатиНоменклатура Тогда
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли Поле = Элементы.ТоварыДляПечатиХарактеристика Тогда
		ПоказатьЗначение(, ТекущиеДанные.Характеристика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляПечатиОтработанПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТоварыДляПечати.ТекущиеДанные;
	
	УстановитьСостояниеСтрокиПоставки(ТекущиеДанные);
	
	Дельта = ?(ТекущиеДанные.Отработан, 1, -1);
	ЗаказовОтработано = ЗаказовОтработано + Дельта;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляПечатиВыборПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТоварыДляПечати.ТекущиеДанные;
	
	Если ИмяМаркетплейса = Маркетплейсы.Wildberries Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтрокиСТоваром = ТоварыДляПечати.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Стр Из СтрокиСТоваром Цикл
			Стр.Выбор = ТекущиеДанные.Выбор;
		КонецЦикла;
		
	Иначе
		СтрокиСТоваром = ТекущиеДанные;
	КонецЕсли;
	
	УстановитьСостояниеСтрокиПоставки(СтрокиСТоваром);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДляПечатиТекстОшибкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТоварыДляПечати.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибки) Тогда
		ВывестиСообщение(ТекущиеДанные.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуВТекущемОкне(Команда)
	ВладелецФормы.ОткрытьФормуОбработки(Команда.Имя, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДокументОтгрузки(Команда)
	УстановитьДокументОтгрузки(ДокументОтгрузки);
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаСоздать(Команда)
	
	Если ИмяМаркетплейса = Маркетплейсы.Wildberries Тогда
		ПоставкаСоздатьWB();
		
	Иначе
		ВызватьИсключениеНеРеализовано();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаЗапросить(Команда = Неопределено)
	
	Если НЕ ИспользоватьПоставки Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМаркетплейса = Маркетплейсы.Wildberries Тогда
		ПоставкаЗапроситьWB();
		
	Иначе
		ВызватьИсключениеНеРеализовано();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаЗавершить(Команда)
	
	// Обновляем список, т.к. мог обновиться набор заказов поставок
	ТоварыДляПечатиОбновитьСписок();
	
	Если ИмяМаркетплейса = Маркетплейсы.Wildberries Тогда
		ПоставкаЗавершитьWB();
		
	Иначе
		ВызватьИсключениеНеРеализовано();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаПечать(Команда)
	
	ОбъектыНазначения = ПараметрыПечатиПоставки();
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("ИдентификаторКоманды", МакетыПечати.РеестрПоставки);
	ПараметрыИсточника.Вставить("ОбъектыНазначения", ОбъектыНазначения);
	
	ПараметрыОткрытия.Вставить("ПараметрыИсточника", ПараметрыИсточника);
	ПараметрыОткрытия.Вставить("ИсточникДанных", Объект.ОбработкаСсылка);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтотОбъект, Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДобавитьВсеОтработанныеКПоставке(Команда)
	
	// Обновляем список, т.к. мог обновиться набор заказов поставок
	ТоварыДляПечатиОбновитьСписок();
	
	Если ИмяМаркетплейса = Маркетплейсы.Wildberries Тогда
		ЗаказыДобавитьКПоставкеWB(Ложь);
		
	Иначе
		ВызватьИсключениеНеРеализовано();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДобавитьВыделенныеКПоставке(Команда)
	
	// Обновляем список, т.к. мог обновиться набор заказов поставок
	ТоварыДляПечатиОбновитьСписок();
	
	Если ИмяМаркетплейса = Маркетплейсы.Wildberries Тогда
		ЗаказыДобавитьКПоставкеWB(Истина);
		
	Иначе
		ВызватьИсключениеНеРеализовано();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиЗапроситьДляТекущейСтроки(Команда)
	
	ТекущиеДанные = Элементы.ТоварыДляПечати.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СкачатьЭтикетки(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиЗапроситьДляВсех(Команда)
	
	СкачатьЭтикетки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиВсеПечать(Команда)
	
	РежимПечати = РежимПечатиЭтикеток();
	РежимПечати.Стикеры = Истина;
	РежимПечати.Штрихкоды = Истина;
	
	НапечататьЭтикетки(РежимПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиМППечать(Команда)
	
	РежимПечати = РежимПечатиЭтикеток();
	РежимПечати.Стикеры = Истина;
	
	НапечататьЭтикетки(РежимПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтикеткиШКПечать(Команда)
	
	РежимПечати = РежимПечатиЭтикеток();
	РежимПечати.Штрихкоды = Истина;
	
	НапечататьЭтикетки(РежимПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПечатьСразу(Команда)
	
	ПечатьСразу = НЕ ПечатьСразу;
	Элементы.ПереключитьПечатьСразу.Пометка = ПечатьСразу;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСохранить(Команда = Неопределено)
	НастройкиСохранитьНаСервере();
	НастройкиПрочитать();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПрочитать(Команда = Неопределено)
	СброситьНастройкиМаркетплейса();
	НастройкиПрочитатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЭмулироватьСканер(Команда)
	
	Если НЕ ЗначениеЗаполнено(ШтрихкодДляЭмуляции) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСканера = Новый Массив;
	ДанныеСканера.Вставить(0, ШтрихкодДляЭмуляции); //Это и есть штрихкод
	ДанныеСканера.Вставить(1, Неопределено);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Эмуляция", Истина);
	ПараметрОповещения.Вставить("ДанныеСканера", ДанныеСканера);
	
	Оповестить("ScanData", ПараметрОповещения, "ПодключаемоеОборудование");
	
КонецПроцедуры

#КонецОбласти

#Область МетодыМаркетплейсов

#Область Поставки_WB

&НаКлиенте
Процедура ПоставкаСоздатьWB()
	
	ОчередьЗапросов = ОчередьЗапросовСервиса();
	
	ВидЗапроса = ОчередьЗапросов.ВидыЗапросовСервисаУН().ПоставкаСоздать;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("ИдВнешнейСистемы", ИдентификаторВнешнейСистемы);
	
	Обработчик = ОчередьЗапросов.ОбработчикРезультатаСервисаУН("ПоставкаСоздатьWBОбработчикРезультата", ЭтотОбъект);
	
	ЗапросСервисаУН = ОчередьЗапросов.ЗапросСервисаУН(Организация, ВидЗапроса, ПараметрыЗапроса, Обработчик);
	
	Если ЗапросСервисаУН.ЭтоПовтор Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервисаУН.Идентификатор = ПоставкаСоздатьWBНаСервере(
		Объект.ОбработкаСсылка,
		ПараметрыЗапроса,
		Объект.Отладка
	);
	
	ОчередьЗапросов.ДобавитьЗапросСервисаУН(ЗапросСервисаУН);
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПоставкаСоздатьWBНаСервере(ОбработкаСсылка, Параметры, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	
	Возврат ОбработкаОбъект.ВнешниеСистемыКоманда_СоздатьПоставку(Параметры.Организация, Параметры);
	
КонецФункции
&НаКлиенте
Процедура ПоставкаСоздатьWBОбработчикРезультата(ЗапросСервисаУН, ДопПараметры = Неопределено) Экспорт
	
	Если ЗапросСервисаУН.Ошибка Тогда
		ВывестиСообщение(ЗапросСервисаУН.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// ЗапросСервисаУН.Результат содержит структуру (json-представление) вида:
	// {
	//   "supply": {
	//     "uuid": "2f24ed8d-d1cc-11ed-b865-000c29c53174",
	//     "number": "000000312",
	//     "date": "2023-04-03T06:04:05+03:00",
	//     "supply_number": "WB-GI-43626438",
	//     "status": "ПоставкаАктивна",
	//     "date_close": "0001-01-01T00:00:00+00:00"
	//   }
	// }
	
	НовПоставка = ЗапросСервисаУН.Результат.supply;
	
	ДоступныеПоставки = Элементы.Поставка.СписокВыбора;
	ДоступныеПоставки.Очистить();
	
	Если ЗначениеЗаполнено(НовПоставка) И ТипЗнч(НовПоставка) = Тип("Структура") Тогда
		ДоступныеПоставки.Добавить(
			ПоставкаЗначение(НовПоставка.uuid, НовПоставка.supply_number),
			ПоставкаПредставление(НовПоставка.supply_number, ДатаXML(НовПоставка.date))
		);
	КонецЕсли;
	
	Поставка = ДоступныеПоставки[0].Значение;
	ПредставлениеПоставки = ДоступныеПоставки[0].Представление;
	
	ПоказатьПредупреждение(, СтрШаблон(
		"Создана поставка:
		|%1",
		ПредставлениеПоставки
	));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаЗапроситьWB()
	
	ОчередьЗапросов = ОчередьЗапросовСервиса();
	
	ВидЗапроса = ОчередьЗапросов.ВидыЗапросовСервисаУН().ПоставкаЗапросить;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("ИдВнешнейСистемы", ИдентификаторВнешнейСистемы);
	
	Обработчик = ОчередьЗапросов.ОбработчикРезультатаСервисаУН("ПоставкаЗапроситьWBОбработчикРезультата", ЭтотОбъект);
	
	ЗапросСервисаУН = ОчередьЗапросов.ЗапросСервисаУН(Организация, ВидЗапроса, ПараметрыЗапроса, Обработчик);
	
	Если ЗапросСервисаУН.ЭтоПовтор Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервисаУН.Идентификатор = ПоставкаЗапроситьWBВызовСервиса(
		Объект.ОбработкаСсылка,
		ПараметрыЗапроса,
		Объект.Отладка
	);
	
	ОчередьЗапросов.ДобавитьЗапросСервисаУН(ЗапросСервисаУН);
	
КонецПроцедуры
&НаКлиенте
Функция ПоставкаЗапроситьWBВызовСервиса(ОбработкаСсылка, ПараметрыЗапроса, Отладка)
	Если ОткрытаИзФайла Тогда
		Возврат ПоставкаЗапроситьWBНаСервере(ПараметрыЗапроса);
	Иначе
		Возврат ПоставкаЗапроситьWBНаСервереБезКонтекста(ОбработкаСсылка, ПараметрыЗапроса, Отладка);
	КонецЕсли;
КонецФункции
&НаСервере
Функция ПоставкаЗапроситьWBНаСервере(ПараметрыЗапроса)
	Возврат ЭтотОбъект().ВнешниеСистемыКоманда_АктивныеПоставки(ПараметрыЗапроса.Организация, ПараметрыЗапроса);
КонецФункции
&НаСервереБезКонтекста
Функция ПоставкаЗапроситьWBНаСервереБезКонтекста(ОбработкаСсылка, ПараметрыЗапроса, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	
	Возврат ОбработкаОбъект.ВнешниеСистемыКоманда_АктивныеПоставки(ПараметрыЗапроса.Организация, ПараметрыЗапроса);
	
КонецФункции
&НаКлиенте
Процедура ПоставкаЗапроситьWBОбработчикРезультата(ЗапросСервисаУН, ДопПараметры = Неопределено) Экспорт
	
	Если ЗапросСервисаУН.Ошибка Тогда
		ВывестиСообщение(ЗапросСервисаУН.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// ЗапросСервисаУН.Результат содержит структуру (json-представление) вида:
	// {
	//   "supplies": [
	//     {
	//       "uuid": "5c656763-ba8f-11ed-b865-000c29c53174",
	//       "number": "000000212",
	//       "date": "2023-02-26T14:36:21+03:00",
	//       "supply_number": "WB-GI-40824876",
	//       "status": "ПоставкаАктивна",
	//       "date_close": "0001-01-01T00:00:00+00:00"
	//     }
	//   ]
	// }

	ДоступныеПоставки = Элементы.Поставка.СписокВыбора;
	ДоступныеПоставки.Очистить();
	
	Для Каждого ТекПоставка Из ЗапросСервисаУН.Результат.supplies Цикл
		ДоступныеПоставки.Добавить(
			ПоставкаЗначение(ТекПоставка.uuid, ТекПоставка.supply_number),
			ПоставкаПредставление(ТекПоставка.supply_number, ДатаXML(ТекПоставка.date))
		);
	КонецЦикла;
	
	Поставка = Неопределено;
	Если ЗначениеЗаполнено(ДоступныеПоставки) Тогда
		Поставка = ДоступныеПоставки[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаЗавершитьWB()
	
	Если НЕ ЗначениеЗаполнено(Поставка) Тогда
		ВызватьИсключение "Не выбрана поставка!";
	КонецЕсли;
	
	ОчередьЗапросов = ОчередьЗапросовСервиса();
	
	ВидЗапроса = ОчередьЗапросов.ВидыЗапросовСервисаУН().ПоставкаЗакрыть;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("ИдПоставки", ПоставкаИдентификатор(Поставка));
	ПараметрыЗапроса.Вставить("НомераЗаказов");
	
	НомерПоставки = ПоставкаНомер(Поставка);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ошибка", Ложь);
	СтруктураОтбора.Вставить("Отменено", Ложь);
	СтруктураОтбора.Вставить("НомерПоставки", ПоставкаНомер(Поставка));
	
	СтрокиЗаказов = ТоварыДляПечати.НайтиСтроки(СтруктураОтбора);
	НомераЗаказов = Новый Соответствие;
	Для Каждого СтрТаб Из СтрокиЗаказов Цикл
		НомераЗаказов.Вставить(СтрТаб.НомерЗаказаМаркетплейса);
	КонецЦикла;
	ПараметрыЗапроса.НомераЗаказов = КлючиОбъекта(НомераЗаказов);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.НомераЗаказов) Тогда
		ВызватьИсключение "Нет заказов для завершаемой поставки!";
	КонецЕсли;
	
	Обработчик = ОчередьЗапросов.ОбработчикРезультатаСервисаУН("ПоставкаЗавершитьWBОбработчикРезультата", ЭтотОбъект);
	
	ЗапросСервисаУН = ОчередьЗапросов.ЗапросСервисаУН(Организация, ВидЗапроса, ПараметрыЗапроса, Обработчик);
	
	Если ЗапросСервисаУН.ЭтоПовтор Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервисаУН.Идентификатор = ПоставкаЗавершитьWBНаСервере(
		Объект.ОбработкаСсылка,
		ПараметрыЗапроса,
		Объект.Отладка
	);
	
	ОчередьЗапросов.ДобавитьЗапросСервисаУН(ЗапросСервисаУН);
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПоставкаЗавершитьWBНаСервере(ОбработкаСсылка, Параметры, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	Возврат ОбработкаОбъект.ПоставкиКоманда_ЗакрытьПоставку(Параметры.Организация, Параметры);
КонецФункции
&НаКлиенте
Процедура ПоставкаЗавершитьWBОбработчикРезультата(ЗапросСервисаУН, ДопПараметры = Неопределено) Экспорт
	
	Если ЗапросСервисаУН.Ошибка Тогда
		ВывестиСообщение(ЗапросСервисаУН.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// На такой запрос сервис ничего не возвращает
	ПоказатьПредупреждение(, "Поставка успешно закрыта!");
	
	// Очищаем список доступных поставок, чтобы
	// юзер получил его снова уже сам
	ДоступныеПоставки = Элементы.Поставка.СписокВыбора;
	ДоступныеПоставки.Очистить();
	Поставка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкаПечатьWB()
	ВызватьИсключениеНеРеализовано();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДобавитьКПоставкеWB(ТолькоВыделенные = Истина)
	
	Если НЕ ЗначениеЗаполнено(Поставка) Тогда
		ПоказатьПредупреждение(, "Не выбрана поставка!");
		Возврат;
	КонецЕсли;
	
	НомерПоставки = ПоставкаНомер(Поставка);
	
	Если ТолькоВыделенные Тогда
		
		СтрокиЗаказов = Новый Массив;
		Для Каждого ИдСтроки Из Элементы.ТоварыДляПечати.ВыделенныеСтроки Цикл
			СтрТаб = Элементы.ТоварыДляПечати.ДанныеСтроки(ИдСтроки);
			//Если СтрТаб.Ошибка Тогда
			//	ВызватьИсключение СтрШаблон(
			//		"Строка заказа '%1' с номенклатурой '%2' содержит ошибку:
			//		|%3",
			//		СтрТаб.ЗаказКлиента, СтрТаб.Номенклатура,
			//		СтрТаб.ТекстОшибки
			//	);
			//КонецЕсли;
			Если ЗначениеЗаполнено(СтрТаб.НомерПоставки)
				И СтрТаб.НомерПоставки <> НомерПоставки Тогда
				ВызватьИсключение СтрШаблон(
					"Строка заказа '%1' с номенклатурой '%2' уже привязана к поставке '%3'",
					СтрТаб.ЗаказКлиента, СтрТаб.Номенклатура,
					СтрТаб.НомерПоставки
				);
			КонецЕсли;
			Если СтрТаб.Отменено Тогда
				ВызватьИсключение СтрШаблон(
					"Строка заказа '%1' с номенклатурой '%2' уже отменена!",
					СтрТаб.ЗаказКлиента, СтрТаб.Номенклатура
				);
			КонецЕсли;
			СтрокиЗаказов.Добавить(СтрТаб);
		КонецЦикла;
		
	Иначе
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Выбор", Истина);
		СтруктураОтбора.Вставить("Отработан", Истина);
		СтруктураОтбора.Вставить("Ошибка", Ложь);
		СтруктураОтбора.Вставить("Отменено", Ложь);
		СтруктураОтбора.Вставить("НомерПоставки", "");
		
		СтрокиЗаказов = ТоварыДляПечати.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокиЗаказов) Тогда
		ПоказатьПредупреждение(, "Нет строк для добавления!");
		Возврат;
	КонецЕсли;
	
	// Готовим фоновый запрос
	
	ОчередьЗапросов = ОчередьЗапросовСервиса();
	
	ВидЗапроса = ОчередьЗапросов.ВидыЗапросовСервисаУН().ПоставкаДобавитьЗаказы;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("ИдПоставки", ПоставкаИдентификатор(Поставка));
	ПараметрыЗапроса.Вставить("НомераЗаказов");
	
	// Извлекаем уникальные номера заказов, которые будут
	// в закрываемой поставке
	
	НомераЗаказов = Новый Соответствие;
	Для Каждого СтрТаб Из СтрокиЗаказов Цикл
		НомераЗаказов.Вставить(СтрТаб.НомерЗаказаМаркетплейса);
	КонецЦикла;
	ПараметрыЗапроса.НомераЗаказов = КлючиОбъекта(НомераЗаказов);
	
	Обработчик = ОчередьЗапросов.ОбработчикРезультатаСервисаУН("ЗаказыДобавитьКПоставкеWBОбработчикРезультата", ЭтотОбъект);
	
	ЗапросСервисаУН = ОчередьЗапросов.ЗапросСервисаУН(Организация, ВидЗапроса, ПараметрыЗапроса, Обработчик);
	
	Если ЗапросСервисаУН.ЭтоПовтор Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервисаУН.Идентификатор = ПоставкаДобавитьНаСервере(
		Объект.ОбработкаСсылка,
		ПараметрыЗапроса,
		Объект.Отладка
	);
	
	ОчередьЗапросов.ДобавитьЗапросСервисаУН(ЗапросСервисаУН);
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаказыДобавитьКПоставкеWBОбработчикРезультата(ЗапросСервисаУН, ДопПараметры = Неопределено) Экспорт
	
	Если ЗапросСервисаУН.Ошибка Тогда
		ВывестиСообщение(ЗапросСервисаУН.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВывестиСообщение("Заказы добавлены к поставке");
	
	ТоварыДляПечатиОбновитьСписок();
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПоставкаДобавитьНаСервере(ОбработкаСсылка, Параметры, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	Возврат ОбработкаОбъект.ПоставкиКоманда_ДобавитьЗаказы(Параметры.Организация, Параметры);
КонецФункции

&НаСервереБезКонтекста
Функция ПоставкаЗавершитьНаСервере(ОбработкаСсылка, Параметры, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	Возврат ОбработкаОбъект.ПоставкиКоманда_ДобавитьЗаказы(Параметры.Организация, Параметры);
КонецФункции

&НаКлиенте
Функция РежимПечатиМаркетплейса()
	
	РежимПечати = РежимПечатиЭтикеток();
	
	Если ИмяМаркетплейса = Маркетплейсы.Wildberries Тогда
		РежимПечати.Все			= Истина;
		
	ИначеЕсли ИмяМаркетплейса = Маркетплейсы.OZON Тогда
		РежимПечати.Стикеры		= Истина;
		РежимПечати.Штрихкоды	= Истина;
		
	ИначеЕсли ИмяМаркетплейса = Маркетплейсы.Yandex Тогда
		РежимПечати.Стикеры		= Истина;
		
	КонецЕсли;
	
	Возврат РежимПечати;
	
КонецФункции

#КонецОбласти

#Область Этикетки

&НаКлиенте
Процедура СкачатьЭтикетки(ТоварыТекущиеДанные = Неопределено)
	
	Если ТоварыТекущиеДанные = Неопределено Тогда
		СтруктураПоиска = Новый Структура("ЭтикеткаМаркетплейсаПолучена", Ложь);
		МассивСтрок = ТоварыДляПечати.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТоварыТекущиеДанные);
	КонецЕсли;
	
	ПакетСтрокЭтикеток = Новый Структура;
	ПакетСтрокЭтикеток.Вставить("ИдВнешнейСистемы",		ИдентификаторВнешнейСистемы);
	ПакетСтрокЭтикеток.Вставить("ИмяМаркетплейса",		ИмяМаркетплейса);
	ПакетСтрокЭтикеток.Вставить("Контрагент",			Контрагент);
	ПакетСтрокЭтикеток.Вставить("ЭтоКонтрагентСклад",	ЭтоКонтрагентСклад);
	ПакетСтрокЭтикеток.Вставить("Строки",				Новый Массив);
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		
		СтруктураСтроки = Новый Структура(
			"ЗаказКлиента, НомерЗаказаМаркетплейса, ДатаЗаказаМаркетплейса,
			|Номенклатура, ИдентификаторСтроки, НомерДоставки");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока, , "НомерДоставки");
		СтруктураСтроки.НомерДоставки = СтрСоединить(ТекСтрока.НомерДоставки.ВыгрузитьЗначения(), Символы.ПС);
		ПакетСтрокЭтикеток.Строки.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Результат = СкачатьЭтикеткиТоваровЗаказов(Объект.ОбработкаСсылка, Организация, ПакетСтрокЭтикеток, Объект.Отладка);
	
	Для Каждого СтрТаб Из ТоварыДляПечати Цикл
		КлючСтроки = СтрТаб.НомерЗаказаМаркетплейса + СтрТаб.ИдентификаторСтроки;
		Элемент = Результат.Строки.Получить(КлючСтроки);
		
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.ТекстОшибки) Тогда
			СтрТаб.ЭтикеткаМаркетплейсаПолучена = Ложь;
			СтрТаб.ЭтикеткаМаркетплейса.Очистить();
			СтрТаб.ЭтикеткаМаркетплейса.Добавить(Элемент.ТекстОшибки);
		Иначе
			СтрТаб.ЭтикеткаМаркетплейсаПолучена = Элемент.Получен;
			СтрТаб.ЭтикеткаМаркетплейса.ЗагрузитьЗначения(Элемент.Файлы);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьОшибкиСтрокТоваров();
	
КонецПроцедуры

&НаКлиенте
Функция СкачатьЭтикеткиТоваровЗаказов(ОбработкаСсылка, Организация, ПакетСтрокЭтикеток, Отладка)
	Если ОткрытаИзФайла Тогда
		Возврат СкачатьЭтикеткиТоваровЗаказовНаСервере(ОбработкаСсылка, Организация, ПакетСтрокЭтикеток, Отладка);
	Иначе
		Возврат СкачатьЭтикеткиТоваровЗаказовНаСервереБезКонтекста(ОбработкаСсылка, Организация, ПакетСтрокЭтикеток, Отладка);
	КонецЕсли;
КонецФункции

&НаСервере
Функция СкачатьЭтикеткиТоваровЗаказовНаСервере(ОбработкаСсылка, Организация, ПакетСтрокЭтикеток, Отладка)
	Возврат ЭтотОбъект().СкачатьЭтикеткиТоваровЗаказов(Организация, ПакетСтрокЭтикеток);
КонецФункции

&НаСервереБезКонтекста
Функция СкачатьЭтикеткиТоваровЗаказовНаСервереБезКонтекста(ОбработкаСсылка, Организация, ПакетСтрокЭтикеток, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	Возврат ОбработкаОбъект.СкачатьЭтикеткиТоваровЗаказов(Организация, ПакетСтрокЭтикеток);
КонецФункции

#КонецОбласти

#Область РаботаСПоставкой

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСостоянииОтгрузкиЗаказа(СтрокаТоваров)
	
	СтруктураСтроки = Новый Структура;
	
	СтруктураСтроки.Вставить("ЗаказКлиента");
	СтруктураСтроки.Вставить("Номенклатура");
	СтруктураСтроки.Вставить("ИдентификаторСтроки");
	СтруктураСтроки.Вставить("Выбор");
	СтруктураСтроки.Вставить("Отработан");
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТоваров);
	
	Возврат СтруктураСтроки;
	
КонецФункции

#Область УстановитьСостояниеСтрокиПоставки

&НаКлиенте
Процедура УстановитьСостояниеСтрокиПоставки(ТоварыТекущиеДанные)
	
	Если ТипЗнч(ТоварыТекущиеДанные) = Тип("Массив") Тогда
		МассивСтрок = ТоварыТекущиеДанные;
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТоварыТекущиеДанные);
	КонецЕсли;
	
	ПакетСтрокОтгрузки = Новый Структура;
	ПакетСтрокОтгрузки.Вставить("ИдВнешнейСистемы",	ИдентификаторВнешнейСистемы);
	ПакетСтрокОтгрузки.Вставить("ИмяМаркетплейса",	ИмяМаркетплейса);
	ПакетСтрокОтгрузки.Вставить("Строки",			Новый Массив);
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		СтрокаОтгрузки = СтрокаСостоянииОтгрузкиЗаказа(ТекСтрока);
		Если ЭтоКонтрагентСклад Тогда
			СтрокаОтгрузки.ЗаказКлиента = ТекСтрока.НомерЗаказаМаркетплейса;
		КонецЕсли;
		ПакетСтрокОтгрузки.Строки.Добавить(СтрокаОтгрузки);
	КонецЦикла;
	
	УстановитьСостояниеОтгрузкиТоваровЗаказов(Объект.ОбработкаСсылка, Организация, ПакетСтрокОтгрузки, Объект.Отладка);
	
	// Если сюда был передан массив строк, то
	// придётся считать отработанные по всей
	// таблице
	Если ТипЗнч(ТоварыТекущиеДанные) = Тип("Массив") Тогда
		ЗаказовОтработано = 0;
		Для Каждого СтрТаб Из ТоварыДляПечати Цикл
			Если СтрТаб.Отработан Тогда
				ЗаказовОтработано = ЗаказовОтработано + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтгрузкиТоваровЗаказов(ОбработкаСсылка, Организация, ПакетСтрокОтгрузки, Отладка)
	Если ОткрытаИзФайла Тогда
		УстановитьСостояниеОтгрузкиТоваровЗаказовНаСервере(ПакетСтрокОтгрузки);
	Иначе
		УстановитьСостояниеОтгрузкиТоваровЗаказовНаСервереБезКонтекста(ОбработкаСсылка, Организация, ПакетСтрокОтгрузки, Отладка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеОтгрузкиТоваровЗаказовНаСервере(ПакетСтрокОтгрузки)
	ЭтотОбъект().УстановитьСостояниеОтгрузкиТоваровЗаказов(Организация, ПакетСтрокОтгрузки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСостояниеОтгрузкиТоваровЗаказовНаСервереБезКонтекста(ОбработкаСсылка, Организация, ПакетСтрокОтгрузки, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	ОбработкаОбъект.УстановитьСостояниеОтгрузкиТоваровЗаказов(Организация, ПакетСтрокОтгрузки);
КонецПроцедуры

#КонецОбласти

#Область ТекущееСостояниеОтгрузкиТоваровЗаказов

&НаКлиенте
Функция ТекущееСостояниеОтгрузкиТоваровЗаказов(ОбработкаСсылка, Организация, ПакетЗаказов, Отладка)
	Если ОткрытаИзФайла Тогда
		Возврат ТекущееСостояниеОтгрузкиТоваровЗаказовНаСервере(ПакетЗаказов);
	Иначе
		Возврат ТекущееСостояниеОтгрузкиТоваровЗаказовНаСервереБезКонтекста(ОбработкаСсылка, Организация, ПакетЗаказов, Отладка);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ТекущееСостояниеОтгрузкиТоваровЗаказовНаСервере(ПакетЗаказов)
	Возврат ЭтотОбъект().ТекущееСостояниеОтгрузкиТоваровЗаказов(Организация, ПакетЗаказов);
КонецФункции

&НаСервереБезКонтекста
Функция ТекущееСостояниеОтгрузкиТоваровЗаказовНаСервереБезКонтекста(ОбработкаСсылка, Организация, ПакетЗаказов, Отладка)
	ОбработкаОбъект = ОбработкаОбъект(ОбработкаСсылка, Отладка);
	Возврат ОбработкаОбъект.ТекущееСостояниеОтгрузкиТоваровЗаказов(Организация, ПакетЗаказов);
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПоставкаЗначение(Идентификатор, Номер)
	Возврат СтрШаблон(
		"Идентификатор='%1';Номер='%2'",
		Идентификатор, Номер
	);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоставкаПредставление(Номер, Дата)
	Возврат СтрШаблон(
		"%1 от %2",
		Номер, Дата
	);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоставкаИдентификатор(ПоставкаЗначение)
	Возврат НСтр(ПоставкаЗначение, "Идентификатор");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоставкаНомер(ПоставкаЗначение)
	Возврат НСтр(ПоставкаЗначение, "Номер");
КонецФункции

&НаСервере
Функция ПараметрыПечатиЭтикеток(РежимПечати)
	
	ПараметрыПечати = Новый Структура;
	
	ТипШаблоныЭтикеток = ТипСсылка("СправочникСсылка.ШаблоныЭтикетокИЦенников");
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",					ТипСсылка("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика",				ТипСсылка("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка",						ТипСсылка("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Цена",							ТипЧисло(15, 2));
	Товары.Колонки.Добавить("ЦенаДополнительно",			ТипЧисло(15, 2));
	Товары.Колонки.Добавить("Штрихкод",						ТипСтрока(20));
	Товары.Колонки.Добавить("ШаблонЦенника",				ТипШаблоныЭтикеток);
	Товары.Колонки.Добавить("КоличествоЦенников",			ТипЧисло(10));
	Товары.Колонки.Добавить("ШаблонЭтикетки",				ТипШаблоныЭтикеток);
	Товары.Колонки.Добавить("ШаблонЭтикеткиПодготовлено",	ТипШаблоныЭтикеток);
	Товары.Колонки.Добавить("КоличествоЭтикеток",			ТипЧисло(10));
	Товары.Колонки.Добавить("ОстатокНаСкладе",				ТипЧисло(10));
	Товары.Колонки.Добавить("КоличествоВДокументе",			ТипЧисло(10));
	Товары.Колонки.Добавить("Весовой",						ТипБулево());
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦены",	ТипДата());
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно", ТипДата());
	
	Товары.Колонки.Добавить("МИ_Заказ",						ТипСсылка("ДокументСсылка.ЗаказКлиента"));
	Товары.Колонки.Добавить("МИ_НомерПоставки",				ТипСтрока(40));
	Товары.Колонки.Добавить("МИ_ФайлЭтикетки",				ТипСтрока());
	Товары.Колонки.Добавить("МИ_НомерДоставки",				ТипСтрока(40));
	
	ИдентификаторыСтрок = Новый Массив;
	
	Сч = 1;
	Для Каждого СтрТаб Из ТоварыДляПечати Цикл
		
		Если НЕ СтрТаб.Выбор
			ИЛИ СтрТаб.Отработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если РежимПечати.Штрихкоды Тогда
		
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТаб);
			НоваяСтрока.КоличествоЭтикеток = СтрТаб.Количество;
			НоваяСтрока.ШаблонЭтикетки = ШаблонЭтикеткиШтрихкода;
			НоваяСтрока.МИ_Заказ = СтрТаб.ЗаказКлиента;
			НоваяСтрока.МИ_НомерПоставки = СтрТаб.НомерПоставки;
			НоваяСтрока.Цена = Сч;  // TODO: зачем? может, удалить?
			
			Сч = Сч+1;
			
			// Используется для сопостовления со строкой товаров
			// в процедуре "ВывестиЭтикеткуМаркетплейса"
			НоваяСтрока.КоличествоЦенников = Сч;
		
		КонецЕсли;
		
		Если РежимПечати.Стикеры Тогда
			
			Для СчЭтикетки = 0 По СтрТаб.ЭтикеткаМаркетплейса.Количество()-1 Цикл
				
				ИмяФайлаЭтикетки = СтрТаб.ЭтикеткаМаркетплейса[СчЭтикетки].Значение;
				ТекНомерДоставки = СтрТаб.НомерДоставки[СчЭтикетки].Значение;
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТаб);
				НоваяСтрока.КоличествоЭтикеток = СтрТаб.Количество;
				НоваяСтрока.ШаблонЭтикетки = ШаблонЭтикеткиМаркетплейса;
				НоваяСтрока.МИ_Заказ = СтрТаб.ЗаказКлиента;
				НоваяСтрока.МИ_НомерПоставки = СтрТаб.НомерПоставки;
				Если СтрТаб.ЭтикеткаМаркетплейсаПолучена Тогда
					НоваяСтрока.МИ_ФайлЭтикетки = ИмяФайлаЭтикетки;
				КонецЕсли;
				НоваяСтрока.Цена = Сч;  // TODO: зачем? может, удалить?
				НоваяСтрока.МИ_НомерДоставки = ТекНомерДоставки;
				
				Сч = Сч+1;
				
				// Используется для сопостовления со строкой товаров
				// в процедуре "ВывестиЭтикеткуМаркетплейса"
				НоваяСтрока.КоличествоЦенников = Сч;
			
			КонецЦикла;
		
		КонецЕсли;
		
		ИдентификаторыСтрок.Добавить(СтрТаб.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	
	ПараметрыПечати.Вставить("Товары",							ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("Организация",						Справочники.Организации.ПустаяСсылка());
	ПараметрыПечати.Вставить("ПравилоОбмена",					Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПустаяСсылка());
	ПараметрыПечати.Вставить("МаксимальныйКодВесовогоТовара",	99999);
	ПараметрыПечати.Вставить("ПравилоВыгрузкиВВесы",			Ложь);
	ПараметрыПечати.Вставить("ВидЦены",							Справочники.ВидыЦен.ПустаяСсылка());
	ПараметрыПечати.Вставить("Дата",							ТекущаяДата());
	ПараметрыПечати.Вставить("ДатаДополнительно",				ТекущаяДата());
	ПараметрыПечати.Вставить("Склад",							Справочники.Склады.ПустаяСсылка());
	ПараметрыПечати.Вставить("ВидЦеныДополнительно",			Справочники.ВидыЦен.ПустаяСсылка());
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона",			Неопределено);
	ПараметрыПечати.Вставить("МИ_ШаблонЭтикеткиМаркетплейса",	ШаблонЭтикеткиМаркетплейса);
	ПараметрыПечати.Вставить("МИ_ШаблонЭтикеткиШтрихкода",		ШаблонЭтикеткиШтрихкода);
	ПараметрыПечати.Вставить("ИдентификаторыСтрок",				ИдентификаторыСтрок);
	ПараметрыПечати.Вставить("ИмяМаркетплейса",					ИмяМаркетплейса);
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Функция ПараметрыПечатиПоставки()
	
	ПараметрыПечати = Новый Структура;
	
	ПараметрыПечати.Вставить("ИмяМаркетплейса",		ИмяМаркетплейса);
	ПараметрыПечати.Вставить("НомерПоставки",		ПоставкаНомер(Поставка));
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",		ТипСсылка("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика",	ТипСсылка("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("НомерЗаказа",		ТипСтрока(30));
	Товары.Колонки.Добавить("Штрихкод",			ТипСтрока(20));
	Товары.Колонки.Добавить("НомерДоставки",	ТипСтрока(50));
	
	Для Каждого СтрТаб Из ТоварыДляПечати Цикл
		
		Если НЕ (СтрТаб.Выбор И СтрТаб.Отработан) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТаб);
		НоваяСтрока.НомерЗаказа = СтрТаб.НомерЗаказаМаркетплейса;
		
	КонецЦикла;
	
	ПараметрыПечати.Вставить("Товары", XMLСтрока(Новый ХранилищеЗначения(Товары)));
	
	Возврат ПараметрыПечати;
	
КонецФункции

#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура СброситьНастройкиМаркетплейса()
	
	ИмяМаркетплейса = Неопределено;
	МаркетплейсИспользование = Ложь;
	
	ШаблонЭтикеткиШтрихкода = Неопределено;
	ШаблонЭтикеткиМаркетплейса = Неопределено;
	
	ИспользоватьПоставки = Ложь;
	ИспользоватьОтправления = Ложь;
	
	ТестовыйРежим = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиСохранитьНаСервере()
	
	ОбработкаОбъект = ЭтотОбъект();
	
	ТекущиеНастройки = ОбработкаОбъект.Настройки();
	СтрокаНастроек = ОбработкаОбъект.СтрокаНастройкиМаркетплейса(ТекущиеНастройки, Организация, Контрагент);
	
	Если СтрокаНастроек = Неопределено Тогда
		ВызватьИсключение "Не найдена строка настроек маркетплейса!";
	КонецЕсли;
	
	ТекущиеНастройки.НомерВерсииНастроек = НомерВерсииНастроек;
	
	СтрокаНастроек.ШаблонЭтикеткиШтрихкода = ШаблонЭтикеткиШтрихкода;
	СтрокаНастроек.ШаблонЭтикеткиМаркетплейса = ШаблонЭтикеткиМаркетплейса;
	
	ОбработкаОбъект.СохранитьНастройки(ТекущиеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПрочитатьНаСервере()
	
	ОбработкаОбъект = ЭтотОбъект();
	
	ТекущиеНастройки = ОбработкаОбъект.Настройки();
	СтрокаНастроек = ОбработкаОбъект.СтрокаНастройкиМаркетплейса(ТекущиеНастройки, Организация, Контрагент);
	
	Если СтрокаНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерВерсииНастроек = ТекущиеНастройки.НомерВерсииНастроек;
	ИспользоватьПодключаемоеОборудование = ТекущиеНастройки.ИспользоватьПодключаемоеОборудование;
	
	ИмяМаркетплейса = СтрокаНастроек.Имя;
	МаркетплейсИспользование = СтрокаНастроек.Использование;
	
	ШаблонЭтикеткиШтрихкода = СтрокаНастроек.ШаблонЭтикеткиШтрихкода;
	ШаблонЭтикеткиМаркетплейса = СтрокаНастроек.ШаблонЭтикеткиМаркетплейса;
	
	ИспользоватьПоставки = СтрокаНастроек.ИспользоватьПоставки;
	ИспользоватьОтправления = СтрокаНастроек.ИспользоватьОтправления;
	
	ТестовыйРежим = СтрокаНастроек.ТестовыйРежим;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды

&НаСервере
Функция ЭтотОбъект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция ОбработкаОбъект(Знач ОбработкаСсылка, Знач Отладка = Ложь)
	
	ОбработкаОбъект = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ОбработкаСсылка);
	ОбработкаОбъект.ОбработкаСсылка = ОбработкаСсылка;
	ОбработкаОбъект.Отладка = Отладка;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	
	Элементы.СтраницаОтгрузка.Доступность = МаркетплейсИспользование;
	
	Элементы.СтраницаЗаказыКлиентаДляОтгрузки.Видимость = НЕ ЭтоКонтрагентСклад;
	
	Элементы.СтраницаНастройка.Доступность = МаркетплейсИспользование;
	
	Элементы.ГруппаПоставка.Видимость = ИспользоватьПоставки;
	Элементы.ТоварыДляПечатиЗаказыКоманды.Видимость = ИспользоватьПоставки;
	Элементы.ГруппаПоставка.Доступность = ИспользоватьПоставки;
	Элементы.ТоварыДляПечатиНомерПоставки.Видимость = ИспользоватьПоставки;
	
	Элементы.ДекорацияТестовыйРежим.Видимость = ТестовыйРежим;
	
	// Асинхронные команды внешних систем
	
	ЕстьАсинхронныеОперации = (
		ИспользоватьПоставки
	);
	Элементы.ФормаПоказатьОчередьЗапросовСервисаУН.Видимость = ЕстьАсинхронныеОперации;
	
	// Кнопки печати
	
	РежимПечати = РежимПечатиМаркетплейса();
	
	Элементы.ЭтикеткиВсеПечать.Видимость	= РежимПечати.Все;
	Элементы.ЭтикеткиМППечать.Видимость		= РежимПечати.Стикеры;
	Элементы.ЭтикеткиШКПечать.Видимость		= РежимПечати.Штрихкоды;
	
КонецПроцедуры

// МеханизмВнешнегоОборудования
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ЭтоЭмуляция = Ложь)
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(ДанныеШтрихкодов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	НоменклатураПоШтрихкодам = НоменклатураПоШтрихкодам(МассивШтрихкодов);
	
	ПерваяНайденнаяСтрока = Неопределено;
	СтруктураПоиска = Новый Структура("Номенклатура");
	Для Каждого Номенклатура Из НоменклатураПоШтрихкодам Цикл
		
		СтруктураПоиска.Номенклатура = Номенклатура;
		СтрокиСТоваром = ТоварыДляПечати.НайтиСтроки(СтруктураПоиска);
		
		Если ЗначениеЗаполнено(СтрокиСТоваром)
			И ПерваяНайденнаяСтрока = Неопределено Тогда
			ПерваяНайденнаяСтрока = СтрокиСТоваром[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		ОбновляемыеСтроки = Новый Массив;
		Для Каждого СтрТаб Из СтрокиСТоваром Цикл
			Если НЕ СтрТаб.Выбор И НЕ ЭтоЭмуляция Тогда
				СтрТаб.Выбор = Истина;
				ОбновляемыеСтроки.Добавить(СтрТаб);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОбновляемыеСтроки) И НЕ ЭтоЭмуляция Тогда
			УстановитьСостояниеСтрокиПоставки(ОбновляемыеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерваяНайденнаяСтрока <> Неопределено Тогда
		Элементы.ТоварыДляПечати.ТекущаяСтрока = ПерваяНайденнаяСтрока;
	КонецЕсли;
	
	Если ЭтоЭмуляция Тогда
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОтгрузка;
		ТекущийЭлемент = Элементы.ТоварыДляПечати;
	КонецЕсли;
	
КонецПроцедуры // ПолученыШтрихкоды()
// Конец МеханизмВнешнегоОборудования

&НаКлиенте
Функция УстановитьДокументОтгрузки(Знач НовыйДокументОтгрузки) Экспорт
	
	СброситьДокументОтгрузки();
	
	РезультатУстановки = УстановитьДокументОтгрузкиНаСервере(НовыйДокументОтгрузки);
	
	Если РезультатУстановки.Отказ Тогда
		ПоказатьПредупреждение(, РезультатУстановки.ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Элементы.Организация.СписокВыбора.Количество() = 1 Тогда
		Организация = Элементы.Организация.СписокВыбора[0].Значение;
		ОрганизацияПриИзменении();
		
	Иначе
		УстановитьПараметрыСпискаЗаказов();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УстановитьДокументОтгрузкиНаСервере(Знач НовыйДокументОтгрузки) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	// Проверки допустимости работы с документом отгрузки
	
	Если НЕ ЗначениеЗаполнено(НовыйДокументОтгрузки) Тогда
		Результат.ТекстОшибки = "Не указан документ отгрузки!";
		
	ИначеЕсли НовыйДокументОтгрузки.ПометкаУдаления Тогда
		Результат.ТекстОшибки = "Этот документ помечен на удаление!";
		
	// TODO: вернуть проверку, когда форма будет готова
	//ИначеЕсли ТипЗнч(НовыйДокументОтгрузки) = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
	//	И НовыйДокументОтгрузки.Статус <> Перечисления.СтатусыРасходныхОрдеров.КОтгрузке Тогда
	//	Результат.ТекстОшибки = СтрШаблон(
	//		"Этот документ имеет недопустимый статус!
	//		|Текущий статус: %1
	//		|Ожидается статус: %2",
	//		НовыйДокументОтгрузки.Статус,
	//		Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
	//	);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		Результат.Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	// Минимальные проверки прошли, поехали дальше...
	
	// Извлекаем данные из документа.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтгрузкиРаспоряжения.Распоряжение.Контрагент КАК Контрагент,
	|	ОтгрузкиРаспоряжения.Распоряжение.Организация КАК Организация,
	|	ЗаказыКлиента.Ссылка КАК Заказ,
	|	ЛОЖЬ КАК ЭтоКонтрагентСклад
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ОтгрузкиРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказыКлиента
	|		ПО (ЗаказыКлиента.Ссылка = ОтгрузкиРаспоряжения.Распоряжение)
	|ГДЕ
	|	ОтгрузкиРаспоряжения.Ссылка = &ДокументОтгрузки
	|	И НЕ ЗаказыКлиента.ПометкаУдаления
	|	И ЗаказыКлиента.НомерПоДаннымКлиента > """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтгрузкиРаспоряжения.Распоряжение.СкладПолучатель,
	|	ОтгрузкиРаспоряжения.Распоряжение.Организация,
	|	ЗаказыНаПеремещение.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ОтгрузкиРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ЗаказыНаПеремещение
	|		ПО (ЗаказыНаПеремещение.Ссылка = ОтгрузкиРаспоряжения.Распоряжение)
	|ГДЕ
	|	ОтгрузкиРаспоряжения.Ссылка = &ДокументОтгрузки
	|	И НЕ ЗаказыНаПеремещение.ПометкаУдаления
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ),
	|	МАКСИМУМ(ЭтоКонтрагентСклад)
	|ПО
	|	Контрагент,
	|	Организация";
	Запрос.УстановитьПараметр("ДокументОтгрузки", НовыйДокументОтгрузки);
	
	ВыборкаКонтрагентов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Если не найдены заказы
	Если НЕ ВыборкаКонтрагентов.Следующий() Тогда
		Результат.Отказ = Истина;
		Результат.ТекстОшибки = "Не найдены заказы для данной отгрузки!";
		
		Возврат Результат;
	КонецЕсли;
	
	// Допускается только один контрагент!
	Если ВыборкаКонтрагентов.Количество() > 1 Тогда
		
		НаименованияКонтрагентов = Новый Массив;
		Пока ВыборкаКонтрагентов.Следующий() Цикл
			НаименованияКонтрагентов.Добавить(Строка(ВыборкаКонтрагентов.Контрагент));
		КонецЦикла;
		
		Результат.Отказ = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			"Документ отгрузки содержит заказы нескольких контрагентов!
			|Контрагенты заказов:
			|%1",
			СтрСоединить(НаименованияКонтрагентов, Символы.ПС)
		);
		
		Возврат Результат;
	КонецЕсли;
	
	// Заполняем даные формы
	
	ДокументОтгрузки = НовыйДокументОтгрузки;
	Контрагент = ВыборкаКонтрагентов.Контрагент;
	ЭтоКонтрагентСклад = ВыборкаКонтрагентов.ЭтоКонтрагентСклад;
	
	ВыборкаОрганизаций = ВыборкаКонтрагентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		Элементы.Организация.СписокВыбора.Добавить(ВыборкаОрганизаций.Организация);
		
		ВыборкаЗаказов = ВыборкаОрганизаций.Выбрать();
		Пока ВыборкаЗаказов.Следующий() Цикл
			СписокЗаказов.Добавить(ВыборкаЗаказов.Заказ);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьПараметрыСпискаЗаказов();
	ЗаполнитьТоварыДляПечатиНаСервере();
	
	// TODO: выставить соответствие строк таблицы ТоварыДляПечати
	// на клиенте!
	
	СтруктураВнешнейСистемы = ЭтотОбъект().ВнешниеСистемы_Найти(Организация, ИмяМаркетплейса);
	Если ЗначениеЗаполнено(СтруктураВнешнейСистемы) Тогда
		ИдентификаторВнешнейСистемы = СтруктураВнешнейСистемы.uuid;
	Иначе
		ВызватьИсключениеНеНайденаВнешняяСистема(Организация, ИмяМаркетплейса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыДляПечатиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("ЭтоКонтрагентСклад",	ЭтоКонтрагентСклад);
	Запрос.УстановитьПараметр("Заказы",				СписокЗаказов.ВыгрузитьЗначения());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	&НомерЗаказаМаркетплейса КАК НомерЗаказаМаркетплейса,
	|	ЗаказКлиентаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ЗаказКлиентаТовары.Номенклатура.Код КАК НоменклатураКод,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЗаказКлиентаТовары.Отменено КАК Отменено,
	|	ЗаказКлиентаТовары.ПричинаОтмены КАК ПричинаОтмены,
	|	ЗаказКлиента.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО (ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка)
	|ГДЕ
	|	ЗаказКлиента.Организация = &Организация
	|	И НЕ &ЭтоКонтрагентСклад
	|	И ЗаказКлиента.Ссылка В(&Заказы)
	|	И ЗаказКлиента.Контрагент = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыНаПеремещение.Ссылка,
	|	"""",
	|	ЗаказНаПеремещениеТовары.КодСтроки,
	|	ЗаказНаПеремещениеТовары.Номенклатура,
	|	ЗаказНаПеремещениеТовары.Номенклатура.Наименование,
	|	ЗаказНаПеремещениеТовары.Номенклатура.Код,
	|	ЗаказНаПеремещениеТовары.Характеристика,
	|	ЗаказНаПеремещениеТовары.Количество,
	|	ЗаказНаПеремещениеТовары.Отменено,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказыНаПеремещение.Комментарий
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказыНаПеремещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|		ПО (ЗаказНаПеремещениеТовары.Ссылка = ЗаказыНаПеремещение.Ссылка)
	|ГДЕ
	|	ЗаказыНаПеремещение.Организация = &Организация
	|	И &ЭтоКонтрагентСклад
	|	И ЗаказыНаПеремещение.Ссылка В(&Заказы)
	|	И ЗаказыНаПеремещение.СкладПолучатель = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураНаименование";
	
	// Берём номер заказа внешней системы из нужного поля
	ПустойЗаказ = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
	НомерЗаказаВРасширении = ЕстьРеквизит(ПустойЗаказ, "НомерЗаказаМаркетплейс");
	Если НомерЗаказаВРасширении Тогда
		НомерЗаказаМаркетплейса =
		"ВЫБОР
		|	КОГДА ЗаказКлиента.НомерЗаказаМаркетплейс > """"
		|		ТОГДА ЗаказКлиента.НомерЗаказаМаркетплейс
		|	ИНАЧЕ ЗаказКлиента.НомерПоДаннымКлиента
		|КОНЕЦ";
	Иначе
		НомерЗаказаМаркетплейса = "ЗаказКлиента.НомерПоДаннымКлиента";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерЗаказаМаркетплейса", НомерЗаказаМаркетплейса);
	
	// Дополнительно получаем часть реквизитов заказов из УН
	ПакетЗаказов = Новый Структура;
	ПакетЗаказов.Вставить("ИмяМаркетплейса",	ИмяМаркетплейса);
	ПакетЗаказов.Вставить("Контрагент",			Контрагент);
	ПакетЗаказов.Вставить("ЭтоКонтрагентСклад",	ЭтоКонтрагентСклад);
	ПакетЗаказов.Вставить("Заказы",				СписокЗаказов.ВыгрузитьЗначения());
	РеквизитыЗаказовМП = ЭтотОбъект().РеквизитыЗаказовМаркетплейсов(Организация, ПакетЗаказов);
	
	ТоварыДляПечати.Очистить();
	
	МаркерНомераЗаказа = "№ заказа:";  // TODO: убрать, см. ниже, где используется
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовСтр = ТоварыДляПечати.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка, , "ИдентификаторСтроки");
		
		НовСтр.ИдентификаторСтроки = XMLСтрока(Выборка.ИдентификаторСтроки);
		
		Если ЭтоКонтрагентСклад И НЕ ЗначениеЗаполнено(НовСтр.НомерЗаказаМаркетплейса) Тогда
			// TODO: достаём номер из комментария, надо это убрать потом
			ЧастиКомментария = СтрРазделить(Выборка.Комментарий, ";");
			Для Каждого Часть Из ЧастиКомментария Цикл
				Если СтрНайти(Часть, МаркерНомераЗаказа) Тогда
					НовСтр.НомерЗаказаМаркетплейса = СокрЛП(СтрЗаменить(Часть, МаркерНомераЗаказа, ""));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Дозаполняем номера по данным УН, если они не хранятся в УТ
		РеквизитыЗаказаМП = РеквизитыЗаказовМП.Получить(Выборка.ЗаказКлиента);
		Если НЕ ЗначениеЗаполнено(НовСтр.НомерЗаказаМаркетплейса)
			И ЗначениеЗаполнено(РеквизитыЗаказаМП) Тогда
			НовСтр.НомерЗаказаМаркетплейса = РеквизитыЗаказаМП.НомерЗаказаМаркетплейса;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыСпискаЗаказов()
	
	Если ЭтоКонтрагентСклад Тогда
		
		// TODO: добавить фильтр по дин. списку "ЗаказыНаПеремещение"
		
	Иначе
		
		ЗаказыКлиента.Параметры.УстановитьЗначениеПараметра("Организация",			Организация);
		ЗаказыКлиента.Параметры.УстановитьЗначениеПараметра("Контрагент",			Контрагент);
		ЗаказыКлиента.Параметры.УстановитьЗначениеПараметра("СписокЗаказов",		СписокЗаказов.ВыгрузитьЗначения());
		ЗаказыКлиента.Параметры.УстановитьЗначениеПараметра("Использование",		МаркетплейсИспользование);
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураПоШтрихкодам(МассивШтрихкодов)
	
	ЗначенияШтрихкодов = Новый Массив;
	Для Каждого Элемент Из МассивШтрихкодов Цикл
		ЗначенияШтрихкодов.Добавить(Элемент.Штрихкод);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В (&ЗначенияШтрихкодов)";
	Запрос.УстановитьПараметр("ЗначенияШтрихкодов", ЗначенияШтрихкодов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОшибкиСтрокТоваров()
	
	РежимПечати = РежимПечатиМаркетплейса();
	
	НужныШтрихкоды = (РежимПечати.Штрихкоды ИЛИ РежимПечати.Все);
	НужныСтикеры = (РежимПечати.Стикеры ИЛИ РежимПечати.Все);
	
	Для Каждого СтрокаТовара Из ТоварыДляПечати Цикл
		
		Ошибки = Новый Массив;
	
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.НомерЗаказаМаркетплейса) Тогда
			Ошибки.Добавить(СтрШаблон(
				"Отсутствует номер заказа маркетплейса"
			));
		КонецЕсли;
		
		Если НужныШтрихкоды И НЕ ЗначениеЗаполнено(СтрокаТовара.Штрихкод) Тогда
			Ошибки.Добавить(СтрШаблон(
				"Отсутствует штрихкод для товара"
			));
		КонецЕсли;
		
		Если НужныСтикеры И НЕ СтрокаТовара.ЭтикеткаМаркетплейсаПолучена
			И ЗначениеЗаполнено(СтрокаТовара.ЭтикеткаМаркетплейса) Тогда
			// Если этикетка не получена, то в поле "ЭтикеткаМаркетплейса"
			// будет описание причины
			Ошибки.Добавить(Строка(СтрокаТовара.ЭтикеткаМаркетплейса));
		КонецЕсли;
		
		СтрокаТовара.Ошибка = ЗначениеЗаполнено(Ошибки);
		СтрокаТовара.ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПечатьЭтикеток

&НаКлиенте
Процедура НапечататьЭтикетки(РежимПечати)
	
	//МассивОбъектов = Новый Массив;
	//МассивОбъектов.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	//УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
	//	"Обработка.ПечатьЭтикетокИЦенников",
	//	ИменаМакетов,
	//	МассивОбъектов,
	//	ЭтотОбъект,
	//	ПараметрыПечати
	//);
	
	//ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	//ПараметрыОткрытия.ИмяМенеджераПечати = "Обработка.ПечатьЭтикетокИЦенников";
	//ПараметрыОткрытия.ИменаМакетов		 = ИменаМакетов;
	//ПараметрыОткрытия.ПараметрКоманды	 = МассивОбъектов;
	
	ИдентификаторКоманды = Неопределено;
	Если РежимПечати.Стикеры И РежимПечати.Штрихкоды Тогда
		ИдентификаторКоманды = МакетыПечати.ЭтикеткаТовары_СтикерМаркетплейсаИШтрихкоды;
	ИначеЕсли РежимПечати.Стикеры Тогда
		ИдентификаторКоманды = МакетыПечати.ЭтикеткаТовары_СтикерМаркетплейса;
	ИначеЕсли РежимПечати.Штрихкоды Тогда
		ИдентификаторКоманды = МакетыПечати.ЭтикеткаТовары_ШтрихкодТовара;
	Иначе
		ИдентификаторКоманды = Неопределено;
	КонецЕсли;
	
	Если ИдентификаторКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыНазначения = ПараметрыПечатиЭтикеток(РежимПечати);
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
	ПараметрыИсточника.Вставить("ОбъектыНазначения", ОбъектыНазначения);	
	ПараметрыОткрытия.Вставить("ПараметрыИсточника", ПараметрыИсточника);
	ПараметрыОткрытия.Вставить("ИсточникДанных", Объект.ОбработкаСсылка);
	
	Если ОткрытаИзФайла Тогда
		// Это тестовый режим, для отладки
		ТабДоки = НапечататьЭтикеткиНаСервере(ОбъектыНазначения, ИдентификаторКоманды);
		Для Каждого ТабДок Из ТабДоки Цикл
			ТабДок.Показать();
		КонецЦикла;
		
	Иначе
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("НапечататьЭтикеткиЗавершение", ЭтотОбъект, ОбъектыНазначения);
		
		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтотОбъект, Строка(Новый УникальныйИдентификатор), , , ОповещениеОЗакрытии);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЭтикеткиЗавершение(РезультатЗакрытия, ОбъектыНазначения) Экспорт
	
	МассивСтрок = Новый Массив;
	Для Каждого ИдСтроки Из ОбъектыНазначения.ИдентификаторыСтрок Цикл
		СтрТаб = ТоварыДляПечати.НайтиПоИдентификатору(ИдСтроки);
		СтрТаб.Отработан = Истина;
		МассивСтрок.Добавить(СтрТаб);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивСтрок) Тогда
		УстановитьСостояниеСтрокиПоставки(МассивСтрок);
		ЗаказовОтработано = ЗаказовОтработано + МассивСтрок.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РежимПечатиЭтикеток()
	
	РежимПечати = Новый Структура;
	
	РежимПечати.Вставить("Стикеры",		Ложь);
	РежимПечати.Вставить("Штрихкоды",	Ложь);
	РежимПечати.Вставить("Все",			Ложь);
	
	Возврат РежимПечати;
	
КонецФункции

&НаСервере
Функция НапечататьЭтикеткиНаСервере(ОбъектыНазначения, ИдентификаторКоманды)
	
	ОбработкаОбъект = ЭтотОбъект();
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ИдентификаторКоманды);
	
	ОбъектыПечати = Новый СписокЗначений;  // для совместимости
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДополнительнаяОбработкаСсылка", Объект.ОбработкаСсылка);
	
	ОбработкаОбъект.Печать(ОбъектыНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	ТабДоки = Новый Массив;
	Для Каждого СтрТаб Из КоллекцияПечатныхФорм Цикл
		ТабДоки.Добавить(СтрТаб.ТабличныйДокумент);
	КонецЦикла;
	
	Возврат ТабДоки;
	
КонецФункции

#КонецОбласти

#Область ВызовыИсключений

&НаКлиентеНаСервереБезКонтекста
Процедура ВызватьИсключениеНеРеализовано()
	ВызватьИсключение "Данный функционал ещё не реализован!";
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВызватьИсключениеНеНайденаВнешняяСистема(Организация, ИмяМаркетплейса)
	ВызватьИсключение СтрШаблон(
		"Не найдена в УН внешняя система для пары:
		|- организация: %1
		|- имя маркетплейся: %2",
		Организация, ИмяМаркетплейса
	);
КонецПроцедуры

#КонецОбласти

#Область ОчередЗапросов

&НаКлиенте
Функция ОчередьЗапросовСервиса()
	// Весь программный интерфейс в форме "ФормаГлавная",
	// которая владелец этой
	Возврат ВладелецФормы;
КонецФункции

&НаКлиенте
Процедура ПоказатьОчередьЗапросовСервисаУН(Команда)
	ВладелецФормы.ПоказатьОчередьЗапросовСервисаУН();
КонецПроцедуры

#КонецОбласти

#Область Общие

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРеквизит(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕслиПусто(Значение, ЗначениеПоУмолчанию)
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйМассив(Знч1, Знч2 = Null, Знч3 = Null, Знч4 = Null, Знч5 = Null)
	
	НовыйМассив = Новый Массив;
	
	Для Сч = 1 По 5 Цикл
		ТекЗнч = Вычислить("Знч" + Сч);
		Если ТекЗнч <> Null Тогда
			НовыйМассив.Добавить(ТекЗнч);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипЧисло(ЧислоРазрядов = 0, ЧислоРазрядовДробнойЧасти = 0, Неотрицательное = Ложь)
	
	Если Неотрицательное Тогда
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Неотрицательный;
	Иначе
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(
		ЧислоРазрядов,
		ЧислоРазрядовДробнойЧасти,
		ДопустимыйЗнакЧисла
	);
	
	Возврат Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрока(Длина = 0, Фиксированная = Ложь)
	
	Если Фиксированная Тогда
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Фиксированная;
	Иначе
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Переменная;
	КонецЕсли;
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(Длина, ДопустимаяДлинаСтроки);
	
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторыСтроки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипДата(СоставДаты = Неопределено)
	
	Если СоставДаты = Неопределено Тогда
		СоставДаты = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	КвалификаторыДаты = Новый КвалификаторыДаты(СоставДаты);
	
	Возврат Новый ОписаниеТипов("Дата", , , КвалификаторыДаты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипБулево()
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСсылка(ИмяТипа)
	Возврат Новый ОписаниеТипов(ИмяТипа);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючиОбъекта(ОбъектКоллекцияСКлючами)
	
	Ключи = Новый Массив;
	
	Для Каждого Элемент Из ОбъектКоллекцияСКлючами Цикл
		Ключи.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат Ключи;
	
КонецФункции

&НаСервереБезКонтекста
// Преобразует (сериализует) любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
// См. также ЗначениеИзСтрокиXML.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаXML(Знач ДатаСтрокой)
	
	Если НЕ ЗначениеЗаполнено(ДатаСтрокой) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Возврат XMLЗначение(Тип("Дата"), ДатаСтрокой);
	
КонецФункции

&НаКлиенте
Процедура ВывестиСообщение(Текст)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
