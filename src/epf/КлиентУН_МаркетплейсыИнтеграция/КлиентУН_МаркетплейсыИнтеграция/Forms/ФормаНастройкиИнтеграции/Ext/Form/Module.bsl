
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.ДополнительнаяОбработкаСсылка) Тогда
		ВызватьИсключение "Не заполнен ключевой параметр формы 'ДополнительнаяОбработкаСсылка'";
	КонецЕсли;
	Параметры.Свойство("ДополнительнаяОбработкаСсылка", Объект.ОбработкаСсылка);
	
	ОбработкаОбъект = ЭтотОбъект();
	
	ОткрытаИзФайла = ОбработкаОбъект.ОбработкаОткрытаИзФайла();
	
	КомандыОбмена = Новый ФиксированнаяСтруктура(ОбработкаОбъект.КомандыОбмена());
	
	ПараметрыРегистрации = ОбработкаОбъект.СведенияОВнешнейОбработке();
	Для Каждого Команда Из ПараметрыРегистрации.Команды Цикл
		Если КомандыОбмена.Свойство(Команда.Идентификатор) Тогда
			ДоступныеКомандыОбмена.Добавить(Команда.Идентификатор, Команда.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаОтладка.Видимость = ОткрытаИзФайла;
	
	ВосстановитьНастройкиНаСервере();
	
	ВсеПараметрыОбмена = Новый ФиксированнаяСтруктура(ОбработкаОбъект.ПараметрыОбмена());
	Для Каждого СтрокаНастройки Из НастройкиОбмена Цикл
		ЗаполнитьПараметрыНастройкиОбмена(
			СтрокаНастройки,
			ВсеПараметрыОбмена,
			ПараметрыОбмена
		);
	КонецЦикла;
	
	Маркетплейсы = ОбработкаОбъект.Маркетплейсы();
	Для Каждого Элемент Из Маркетплейсы Цикл
		Элементы.МаркетплейсыИмя.СписокВыбора.Добавить(Элемент.Значение);
	КонецЦикла;
	
	ДоступныеОбменыМП = Элементы.МаркетплейсыКомандыОбмена.СписокВыбора;
	Для Каждого Элем Из КомандыОбмена Цикл
	КомандаОбмена = Элем.Значение;
	ДоступныеОбменыМП.Добавить(
		КомандаОбмена.Идентификатор, КомандаОбмена.Представление);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСвязанныеПоляНастроекОбменаДанными();
	ВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииФормы() Экспорт
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЕстьДублиПоКолонке(КлючиAPI, "Владелец", "Ключи API", Отказ);
	ПроверитьЕстьДублиПоКолонке(КлючиAPI, "КлючAPI", "Ключи API", Отказ);
	
	ПроверитьЕстьНезаполненныеПоля(КлючиAPI, "Владелец,КлючAPI", "Ключи API", Отказ);
	
	ОбязательныеПараметрыОбмена = ПараметрыОбмена.НайтиСтроки(
		Новый Структура("Обязательный", Истина)
	);
	ПроверитьЕстьНезаполненныеПоля(ОбязательныеПараметрыОбмена, "Значение", "Параметры обмена", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КлиентУН_ИзмененоСостояниеОтладки" И Источник <> ЭтотОбъект Тогда
		Объект.Отладка = Параметр;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ОткрытьФормуВТекущемОкне(Команда)
	ВладелецФормы.ОткрытьФормуОбработки(Команда.Имя, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаПриИзменении(Элемент)
	Оповестить("КлиентУН_ИзмененоСостояниеОтладки", Объект.Отладка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда = Неопределено)
	СохранитьНастройкиНаСервере();
	ВосстановитьНастройки();
КонецПроцедуры
&НаСервере
Процедура СохранитьНастройкиНаСервере()
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект().СохранитьНастройки(ЭтотОбъект);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда = Неопределено)
	
	ВосстановитьНастройкиНаСервере();
	
	ОбновитьСвязанныеПоляНастроекОбменаДанными();
	
	Модифицированность = Ложь;
	
КонецПроцедуры
&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	ЭтотОбъект().ВосстановитьНастройки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаКомандыОбменаПоРегламенту(Команда)
	
	ТекущиеДанные = Элементы.НастройкиОбмена.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КомандаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КомандыОбмена.Свойство(ТекущиеДанные.КомандаОбмена) Тогда
		ПоказатьПредупреждение(, "Не найдена команда обмена: " + ТекущиеДанные.КомандаОбмена);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, "Требуется сначала сохранить настройки!");
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбменНаСервере(ТекущиеДанные.КомандаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуОбмена(Команда)
	ТекущаяСтрока = Элементы.НастройкиОбмена.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, "Требуется сначала сохранить настройки!");
		Возврат;
	КонецЕсли;
	
	ВыполнитьКомандуОбменаНаСервере(ТекущаяСтрока);
	
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуОбменаНаСервере(ИдТекущейСтроки)
	
	ТекущаяСтрока = НастройкиОбмена.НайтиПоИдентификатору(ИдТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбменНаСервере(ТекущаяСтрока.КомандаОбмена, ТекущаяСтрока.Ид);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючиAPIПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Ид = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючиAPIПриИзменении(Элемент)
	
	ОбновитьСвязанныеПоляНастроекОбменаДанными();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Ид = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьПараметрыНастройкиОбмена(
		Элемент.ТекущиеДанные,
		ВсеПараметрыОбмена,
		ПараметрыОбмена
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаПриАктивизацииСтроки(Элемент = Неопределено)
	
	ТекущиеДанные = Элементы.НастройкиОбмена.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКомандыОбмена = ОписаниеКомандыОбмена(ТекущиеДанные.КомандаОбмена);
	
	НастройкаИд = ?(ПустаяСтрока(ТекущиеДанные.Ид), Неопределено, ТекущиеДанные.Ид);
	
	УстановитьОтборСтрок(
		Элементы.ПараметрыОбмена,
		Новый Структура("НастройкаИд", НастройкаИд)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаКлючПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого СтрТаб Из КлючиAPI Цикл
		Если НЕ ЗначениеЗаполнено(СтрТаб.Владелец) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрТаб.Описание) Тогда
			ПредставлениеКлюча = СтрШаблон("%1 (%2)", СтрТаб.Владелец, СтрТаб.Описание);
		Иначе
			ПредставлениеКлюча = СтрТаб.Владелец;
		КонецЕсли;
		
		ДанныеВыбора.Добавить(СтрТаб.Ид, ПредставлениеКлюча);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаКлючПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиОбмена.ТекущиеДанные;
	КлючИд = ВыбранноеЗначение;
	
	СтрокаКлюча = СтрокаПоИд(КлючИд, КлючиAPI);
	
	Если СтрокаКлюча = Неопределено Тогда
		ТекущиеДанные.КлючИд = "";
		ТекущиеДанные.КлючПредставление = "";
	Иначе
		ТекущиеДанные.КлючИд = КлючИд;
		ТекущиеДанные.КлючПредставление = СтрокаКлюча.Владелец;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаКлючПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиОбмена.ТекущиеДанные;
	
	ТекущиеДанные.КлючИд = "";
	ТекущиеДанные.КлючПредставление = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаНаправлениеПриИзменении(Элемент)
	НастройкиОбменаПриАктивизацииСтроки();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаКомандаОбменаПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДоступныеКомандыОбмена;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаКомандаОбменаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиОбмена.ТекущиеДанные;
	КомандаОбмена = ВыбранноеЗначение;
	
	СтрокаКомандыОбмена = ДоступныеКомандыОбмена.НайтиПоЗначению(КомандаОбмена);
	
	Если СтрокаКомандыОбмена = Неопределено Тогда
		ТекущиеДанные.КомандаОбмена = "";
		ТекущиеДанные.КомандаОбменаПредставление = "";
		
	Иначе
		ТекущиеДанные.КомандаОбмена = СтрокаКомандыОбмена.Значение;
		ТекущиеДанные.КомандаОбменаПредставление = СтрокаКомандыОбмена.Представление;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	НастройкиОбменаПриАктивизацииСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаКомандаОбменаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиОбмена.ТекущиеДанные;
	
	ТекущиеДанные.КомандаОбмена = "";
	ТекущиеДанные.КомандаОбменаПредставление = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбменаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбменаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПараметрыОбменаЗначение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбменаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НастройкаИд = Элементы.НастройкиОбмена.ТекущиеДанные.Ид;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбменаПередУдалением(Элемент, Отказ)
	
	ТекущаяНастройка = Элементы.НастройкиОбмена.ТекущиеДанные;
	
	ТекущийПараметр = Неопределено;
	Если НЕ ВсеПараметрыОбмена.Свойство(Элемент.ТекущиеДанные.Имя, ТекущийПараметр) Тогда
		Возврат;  // можно удалять
	КонецЕсли;
	
	Если НЕ ТекущийПараметр.КомандыОбмена.Свойство(ТекущаяНастройка.КомандаОбмена) Тогда
		Возврат;  // можно удалять
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркетплейсыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ДоступныеОбмены = Элементы.МаркетплейсыКомандыОбмена.СписокВыбора;
		Элемент.ТекущиеДанные.КомандыОбмена.ДоступныеЗначения = ДоступныеОбмены;
	КонецЕсли;
	
	ОтборСтрокДоставки = Новый Структура("Организация, Имя");
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Элементы.НастройкиДоставкиМаркетплейсов.Доступность = Ложь;
	Иначе
		Элементы.НастройкиДоставкиМаркетплейсов.Доступность = Истина;
		ЗаполнитьЗначенияСвойств(ОтборСтрокДоставки, Элемент.ТекущиеДанные);
	КонецЕсли;
	Элементы.НастройкиДоставкиМаркетплейсов.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрокДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДоставкиМаркетплейсовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(
			Элемент.ТекущиеДанные, Элементы.Маркетплейсы.ТекущиеДанные,
			"Организация, Имя");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды

&НаСервере
Функция ЭтотОбъект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура ВидимостьДоступностьЭлементов()
	
	//
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеКомандыОбмена(КомандаОбмена)
	Если НЕ ЗначениеЗаполнено(КомандаОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеКомандыОбмена = Неопределено;
	Если КомандыОбмена.Свойство(КомандаОбмена, ОписаниеКомандыОбмена) Тогда
		Возврат ОписаниеКомандыОбмена;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСвязанныеПоляНастроекОбменаДанными()
	
	Для Каждого СтрТаб Из НастройкиОбмена Цикл
		
		// Ключ API
		СтрокаКлюча = СтрокаПоИд(СтрТаб.КлючИд, КлючиAPI);
		
		Если СтрокаКлюча = Неопределено Тогда
			СтрТаб.КлючИд = "";
			СтрТаб.КлючПредставление = "";
		Иначе
			СтрТаб.КлючПредставление = СтрокаКлюча.Владелец;
		КонецЕсли;
		
		// Команда обмена
		СтрокаКомандыОбмена = ДоступныеКомандыОбмена.НайтиПоЗначению(СтрТаб.КомандаОбмена);
		
		Если СтрокаКомандыОбмена = Неопределено Тогда
			// Команда была удалена из доступных
			СтрТаб.КомандаОбмена = "";
			СтрТаб.ОбработчикИмя = "";
			СтрТаб.КомандаОбменаПредставление = "";
		Иначе
			СтрТаб.КомандаОбмена = СтрокаКомандыОбмена.Значение;
			СтрТаб.КомандаОбменаПредставление = СтрокаКомандыОбмена.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбменНаСервере(КомандаОбмена, ИдентификаторНастройки = Неопределено)
	
	ОбработкаОбъект = ЭтотОбъект();
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ДополнительнаяОбработкаСсылка",	Объект.ОбработкаСсылка);
	ПараметрыКоманды.Вставить("ИдентификаторКоманды",			КомандаОбмена);
	ПараметрыКоманды.Вставить("РезультатВыполнения",			Новый Структура);
	ПараметрыКоманды.Вставить("ИдентификаторНастройки",			ИдентификаторНастройки);
	ПараметрыКоманды.Вставить("Отладка",						Отладка);
	
	ОбработкаОбъект.ВыполнитьКоманду(КомандаОбмена, ПараметрыКоманды)
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПоИд(ИдСтроки, Таблица)
	
	СтрокаКлюча = Таблица.НайтиСтроки(Новый Структура("Ид", ИдСтроки));
	
	Если ЗначениеЗаполнено(СтрокаКлюча) Тогда
		Возврат СтрокаКлюча[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПроверитьЕстьДублиПоКолонке(Таблица, Колонка, НазваниеТаблицы, Отказ)
	
	ТаблицаПроверки = Таблица.Выгрузить(, Колонка);
	
	ТаблицаПроверки.Колонки.Добавить("Повторов");
	ТаблицаПроверки.ЗаполнитьЗначения(1, "Повторов");
	
	ТаблицаПроверки.Свернуть(Колонка, "Повторов");
	
	Для Каждого СтрТаб Из ТаблицаПроверки Цикл

		Если СтрТаб.Повторов = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТаб[Колонка]) Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ = Истина;
		
		Сообщить(СтрШаблон(
			"Дубль значения '%1' в поле '%2' таблицы '%3'",
			СтрТаб[Колонка], Колонка, НазваниеТаблицы
		));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЕстьНезаполненныеПоля(Таблица, Колонки, НазваниеТаблицы, Отказ)
	
	МассивКолонок = СтрРазделить(Колонки, ",");
	
	Для Каждого СтрТаб Из Таблица Цикл
		
		Для Каждого Колонка Из МассивКолонок Цикл
			Если ЗначениеЗаполнено(СтрТаб[Колонка]) Тогда
				Продолжить;
			КонецЕсли;
			
			Отказ = Истина;
			
			Сообщить(СтрШаблон(
				"Не заполнено поле '%1' таблицы '%2'",
				Колонка, НазваниеТаблицы
			));
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрок(ТаблицаФормы, СтруктураОтбора = Неопределено)
	
	Если СтруктураОтбора = Неопределено Тогда
		ТаблицаФормы.ОтборСтрок = Неопределено;
	Иначе
		ТаблицаФормы.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборСтрок(ТаблицаФормы)
	УстановитьОтборСтрок(ТаблицаФормы, Неопределено);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыНастройкиОбмена(НастройкаОбмена, ВсеПараметрыОбмена, ПараметрыОбмена)
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из ВсеПараметрыОбмена Цикл
		ПараметрОбмена = Элемент.Значение;
		
		Если НЕ ЗначениеЗаполнено(НастройкаОбмена.КомандаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПараметрОбмена.КомандыОбмена.Свойство(НастройкаОбмена.КомандаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("НастройкаИд, Имя", НастройкаОбмена.Ид, ПараметрОбмена.Имя);
		СтрокиПараметра = ПараметрыОбмена.НайтиСтроки(СтруктураПоиска);
		
		Если ЗначениеЗаполнено(СтрокиПараметра) Тогда
			СтрокаПараметра = СтрокиПараметра[0];
		Иначе
			СтрокаПараметра = ПараметрыОбмена.Добавить();
			СтрокаПараметра.НастройкаИд = НастройкаОбмена.Ид;
			СтрокаПараметра.Имя = ПараметрОбмена.Имя;
		КонецЕсли;
		
		СтрокаПараметра.ТипЗначения = ПараметрОбмена.ТипЗначения;
		СтрокаПараметра.Значение = СтрокаПараметра.ТипЗначения.ПривестиЗначение(СтрокаПараметра.Значение);
		СтрокаПараметра.Описание = ПараметрОбмена.Описание;
		СтрокаПараметра.Обязательный = ПараметрОбмена.Обязательный;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
