Перем Кеш;
Перем КешироватьНастройки;
Перем ОсновноеСобытиеЖурнала;
Перем НакопленныеСообщения;

#Область Регистрация

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Наименование = "Клиент УН: маркетплейсы интеграция";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "2.8.4";
	ПараметрыРегистрации.ВерсияБСП = ТекущаяВерсияБСП();
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	//ПараметрыРегистрации.Разрешения.Добавить(
	//	РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
	//		"HTTPS",
	//		"10.12.0.13"
	//	)
	//);
	
	// Основная форма
	ДобавитьКоманду(
		ПараметрыРегистрации,
		НСтр("ru = 'Клиент УН'"),  // Представление
		"ОткрытьОсновнуюФорму",  // Идентификатор
		ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы(),
		Ложь,  // ПоказыватьОповещение
		""  // Модификатор
	);
	
	// Команды обмена данными
	КомандыОбмена = КомандыОбмена();
	ДобавитьКомандуОбмена(ПараметрыРегистрации, КомандыОбмена.ВыгрузкаНоменклатуры);
	ДобавитьКомандуОбмена(ПараметрыРегистрации, КомандыОбмена.ВыгрузкаЦенНоменклатуры);
	ДобавитьКомандуОбмена(ПараметрыРегистрации, КомандыОбмена.ВыгрузкаОстатковНоменклатуры);
	ДобавитьКомандуОбмена(ПараметрыРегистрации, КомандыОбмена.ЗагрузкаЗаказов);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ПараметрыРегистрации, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	ТаблицаКоманд = ПараметрыРегистрации.Команды;
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ДобавитьКомандуОбмена(ПараметрыРегистрации, ОписаниеКоманды)
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	
	НоваяКоманда.Идентификатор = ОписаниеКоманды.Идентификатор;
	НоваяКоманда.Представление = ОписаниеКоманды.Представление;
	
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	
	Возврат НоваяКоманда;
	
КонецФункции

Функция ТекущаяВерсияБСП()
	Возврат РегистрыСведений.ВерсииПодсистем.Получить(
		Новый Структура("ИмяПодсистемы", "СтандартныеПодсистемы")
	).Версия;
КонецФункции

Функция УстановитьЗаголовок(Форма) Экспорт
	
	ПараметрыРегистрации = СведенияОВнешнейОбработке();
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = СтрШаблон(
		"%1 (v%2)",
		ПараметрыРегистрации.Наименование,
		ПараметрыРегистрации.Версия
	);
	
КонецФункции

Функция ОбработкаОткрытаИзФайла() Экспорт
	
	Возврат (
		ЗначениеЗаполнено(ЭтотОбъект.ИспользуемоеИмяФайла)
		И НЕ СтрНачинаетсяС(ЭтотОбъект.ИспользуемоеИмяФайла, "e1cib\tempstorage")
	);
	
КонецФункции

#КонецОбласти

#Область ОсновныеМетоды

// Интерфейс для запуска логики обработки.
//
// Параметры:
//   ИдентификаторКоманды - Строка - идентификатор команды из колонки "Идентификатор"
//                          из таблицы ПараметрыРегистрации.Команды.Идентификатор,
//                          где ПараметрыРегистрации - результат метода СведенияОВнешнейОбработки()
//   ПараметрыКоманды - Структура - структура параметров вызова команды с ключами:
//     > ДополнительнаяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки - ссылка
//                                       на элемент справочника с текущей обработкой
//     > ИдентификаторКоманды - Строка - то же, что и в аргументе "ИдентификаторКоманды" этого метода
//     > ОбъектыНазначения - Неопределено - не используется
//     > РезультатВыполнения - Структура - структура с результатами выполнения, возвращаемая на клиент
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	КешироватьНастройки = Истина;
	
	Если НЕ ПараметрыКоманды.Свойство("Отладка", Отладка) Тогда
		Отладка = Ложь;
	КонецЕсли;
	
	ЭтотОбъект.ОбработкаСсылка = ПараметрыКоманды.ДополнительнаяОбработкаСсылка;
	
	Попытка
		Настройки = Настройки();
		
		// Если это команда обмена
		ВсеКомандыОбмена = КомандыОбмена();
		
		КомандаОбмена = Неопределено;
		
		Если ВсеКомандыОбмена.Свойство(ИдентификаторКоманды, КомандаОбмена) Тогда
			ВыполнитьОбмен(КомандаОбмена, ПараметрыКоманды, Настройки);
			
		Иначе
			БроситьИсключение(ТипыОшибок().НеизвестнаяКоманда, ИдентификаторКоманды);
		КонецЕсли;
		
		ВывестиНакопленныеСообщения();
		
	Исключение
		Ошибка = Ошибка(ИнформацияОбОшибке());
		ЛогОшибка(Ошибка.Текст);
		
		ВывестиНакопленныеСообщения();
		
		БроситьИсключение(Ошибка.Тип, Ошибка.Текст);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ВыполнитьОбмен(КомандаОбмена, ПараметрыКоманды, Настройки)
	
	ИдентификаторНастройки = Неопределено;
	ПараметрыКоманды.Свойство("ИдентификаторНастройки", ИдентификаторНастройки);
	
	Замер = Замер();
	
	ЛогИнфо(СтрШаблон(
		"Выполнение обмена.
		|Команда: %1
		|Ид настройки: %2",
		КомандаОбмена.Идентификатор,
		ЕслиПусто(ИдентификаторНастройки, "<пусто>")
	));
	
	// Ищем все используемые настройки для данной команды обмена
	// и выполняем по ним обмен последовательно
	ОтборНастроек = Новый Структура;
	ОтборНастроек.Вставить("Использование", Истина);
	ОтборНастроек.Вставить("КомандаОбмена", КомандаОбмена.Идентификатор);
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		ОтборНастроек.Вставить("Ид", ИдентификаторНастройки);
	КонецЕсли;
	
	КомандыОбмена = КомандыОбмена();
	НастройкиДляОбмена = Настройки.НастройкиОбмена.НайтиСтроки(ОтборНастроек);
	
	Контекст = Контекст(Настройки);
	
	Для Каждого СтрокаНастройкиОбмена Из НастройкиДляОбмена Цикл
		
		УстановитьКонтекстНастройкиОбмена(Контекст, СтрокаНастройкиОбмена);
		
		Если СтрокаНастройкиОбмена.КомандаОбмена = КомандыОбмена.ЗагрузкаЗаказов.Идентификатор Тогда
			ПроверитьПриостановленныеЗаказыКлиента(Контекст);
			ЗагрузитьЗаказыКлиента(Контекст);
			
		//ИначеЕсли СтрокаНастройкиОбмена.КомандаОбмена = КомандыОбмена.ВыгрузкаНоменклатуры.Идентификатор Тогда
		//	ВыполнитьОбмен_ВыгрузкаНоменклатуры(Контекст);
		// TODO: доработать обмен
		
		//ИначеЕсли СтрокаНастройкиОбмена.Направление = НаправленияОбмена().Выгрузка Тогда
		//	ВыполнитьОбменВыгрузка(Контекст);
			
		Иначе
			БроситьИсключение(ТипыОшибок().НеизвестнаяКомандаОбмена, СтрокаНастройкиОбмена.КомандаОбмена);
		КонецЕсли;
		
	КонецЦикла;
	
	ЛогИнфо(СтрШаблон(
		"Обмен завершен.
		|Команда: %1
		|Потрачено времени: %2",
		КомандаОбмена.Идентификатор,
		ПотраченоВремени(Замер)
	));
	
КонецПроцедуры

// ЗАГЛУШКА
//
Функция СпособыОбмена() Экспорт
	
	//МассивСпособов = Новый Массив;
	//
	//МассивСпособов.Добавить(ОписаниеСпособаОбмена(
	//	"ФайлыИзКаталога",
	//	"Файлы из каталога"
	//));
	//
	//МассивСпособов.Добавить(ОписаниеСпособаОбмена(
	//	"ПоПравиламОбмена_21",
	//	"По правилам обмена (конвертация 2.1)"
	//));
	//
	//СпособыОбмена = Новый Структура;
	//Для Каждого СпособОбмена Из МассивСпособов Цикл
	//	СпособыОбмена.Вставить(СпособОбмена.Имя, СпособОбмена);
	//КонецЦикла;
	//
	//Возврат СпособыОбмена;
	
КонецФункции

// ЗАГЛУШКА
//
Функция ОписаниеСпособаОбмена(Имя, Представление)
	
	//Возврат Новый Структура(
	//	"Имя, Представление",
	//	Имя, Представление
	//);
	
КонецФункции

Функция КомандыОбмена() Экспорт
	
	МассивКомандОбмена = Новый Массив;
	
	// ======================
	// КОМАНДЫ ОБМЕНА
	
	// products
	МассивКомандОбмена.Добавить(ОписаниеКомандыОбмена(
		"ВыгрузкаНоменклатуры",
		"Выгрузка номенклатуры",
		Истина
	));
	
	// prices
	МассивКомандОбмена.Добавить(ОписаниеКомандыОбмена(
		"ВыгрузкаЦенНоменклатуры",
		"Выгрузка цен номенклатуры",
		Истина
	));
	
	// stocks
	МассивКомандОбмена.Добавить(ОписаниеКомандыОбмена(
		"ВыгрузкаОстатковНоменклатуры",
		"Выгрузка остатков номенклатуры",
		Истина
	));
	
	// orders
	МассивКомандОбмена.Добавить(ОписаниеКомандыОбмена(
		"ЗагрузкаЗаказов",
		"Загрузка заказов",
		Ложь
	));
	
	// ======================
	
	КомандыОбмена = Новый Структура;
	Для Каждого КомандаОбмена Из МассивКомандОбмена Цикл
		КомандыОбмена.Вставить(КомандаОбмена.Идентификатор, КомандаОбмена);
	КонецЦикла;
	
	Возврат КомандыОбмена;
	
КонецФункции

Функция ОписаниеКомандыОбмена(Идентификатор, Представление, Выгрузка)
	
	Возврат Новый Структура(
		"Идентификатор, Представление, Выгрузка",
		Идентификатор, Представление, Выгрузка
	);
	
КонецФункции

#Область Заказы

Процедура ЗагрузитьЗаказыКлиента(Контекст)
	
	Отказ = Ложь;
	
	ПараметрыЗапроса = Новый Структура;
	
	ПорцияПолученияЗаказов = Неопределено;
	Если Контекст.Параметры.Свойство("ПорцияПолученияЗаказов", ПорцияПолученияЗаказов)
		И ЗначениеЗаполнено(ПорцияПолученияЗаказов) Тогда
		ПараметрыЗапроса.Вставить("limit", ПорцияПолученияЗаказов);
	КонецЕсли;
	
	HTTPОтвет = ЗапросСервисаИнтеграции(Контекст, "ЗаказыОбмен", "GET", , ПараметрыЗапроса);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ЗагрузитьЗаказыКлиента'
		|Тело ответа:
		|%1",
		СтрокаJSON
	));
	
	ПоляСТипомДата = Новый Массив;
	ПоляСТипомДата.Добавить("start_change_date");
	ПоляСТипомДата.Добавить("end_change_date");
	ПоляСТипомДата.Добавить("change_date");
	ПоляСТипомДата.Добавить("date");
	ПоляСТипомДата.Добавить("shipment_date");
	
	Попытка
		Данные = ДанныеИзJSON(СтрокаJSON,, ПоляСТипомДата);
	Исключение
		БроситьИсключение(, ИнформацияОбОшибке());
	КонецПопытки;
	
	Для Каждого ДанныеВнешнейСистемы Из Данные.external_systems Цикл
		Замер = Замер();
		
		ВсегоЗаказов = ДанныеВнешнейСистемы.orders.Количество();
		ШагИнформирования = 10;
		
		ЛогИнфо(СтрШаблон(
			"Обработка заказов внешней системы: %1:
			|маркетплейс: %2
			|заказов: %3",
			ДанныеВнешнейСистемы.external_system.name,
			ДанныеВнешнейСистемы.marketplace_name,
			ВсегоЗаказов
		));
		
		Сч = 0;
		Для Каждого ДанныеЗаказа Из ДанныеВнешнейСистемы.orders Цикл
			
			РезультатЗагрузки = ЗагрузитьДанныеЗаказа(ДанныеВнешнейСистемы, ДанныеЗаказа, Контекст);
			
			Сч = Сч + 1;
			Если Сч % ШагИнформирования = 0 Тогда
				ЛогИнфо(СтрШаблон(
					"Обработано заказов: %1 из %2",
					Сч, ВсегоЗаказов
				));
			КонецЕсли;
		КонецЦикла;
		
		ЛогИнфо(СтрШаблон(
			"Загружены заказы внешней системы '%1'.
			|Потрачено времени: %2",
			ДанныеВнешнейСистемы.external_system.name,
			ПотраченоВремени(Замер)
		));
		
		// Всё успешно загрузилось - только теперь можно сдвинуть
		// дату+время изменений на стороне сервиса
		ЗаказыСдвинутьДатуИзменения(
			ДанныеВнешнейСистемы.external_system,
			ДанныеВнешнейСистемы.end_change_date,
			Контекст
		);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПриостановленныеЗаказыКлиента(Контекст)
	
	ТипыПричинПриостановки = ТипыПричинПриостановкиЗаказов();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("suspended", 1);  // Приостановленные = Истина
	ПараметрыЗапроса.Вставить("suspended_reason_type", ТипыПричинПриостановки.НедостаточноОстатка);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(Контекст, "ЗаказыСписок", "GET", , ПараметрыЗапроса);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ПроверитьПриостановленныеЗаказыКлиента'
		|Тело ответа:
		|%1",
		СтрокаJSON
	));
	
	ПоляСТипомДата = Новый Массив;
	ПоляСТипомДата.Добавить("date_end");
	ПоляСТипомДата.Добавить("change_date");
	ПоляСТипомДата.Добавить("date");
	ПоляСТипомДата.Добавить("shipment_date");
	
	Попытка
		Данные = ДанныеИзJSON(СтрокаJSON,, ПоляСТипомДата);
	Исключение
		БроситьИсключение(, ИнформацияОбОшибке());
	КонецПопытки;
	
	Замер = Замер();
	
	ВсегоЗаказов = Данные.orders.Количество();
	
	ЛогИнфо(СтрШаблон(
		"Проверка состояния приостановленных заказов:
		|заказов: %1",
		ВсегоЗаказов
	));
	
	Если ВсегоЗаказов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыЗаказа = НовыйМассив(
		Тип("ДокументСсылка.ЗаказКлиента"),
		Тип("ДокументСсылка.ЗаказНаПеремещение"));
	ТипДокументЗаказ = Новый ОписаниеТипов(ТипыЗаказа);
	
	ТаблицаДанныхЗаказов = Новый ТаблицаЗначений;
	ТаблицаДанныхЗаказов.Колонки.Добавить("Идентификатор",			ТипСтрока(36));
	ТаблицаДанныхЗаказов.Колонки.Добавить("ОрганизацияИНН",			ТипСтрока(12));
	ТаблицаДанныхЗаказов.Колонки.Добавить("КонтрагентИНН",			ТипСтрока(12));
	ТаблицаДанныхЗаказов.Колонки.Добавить("КонтрагентКПП",			ТипСтрока(9));
	ТаблицаДанныхЗаказов.Колонки.Добавить("Дата",					ТипДата());
	ТаблицаДанныхЗаказов.Колонки.Добавить("ДатаНачалоДня",			ТипДата());
	ТаблицаДанныхЗаказов.Колонки.Добавить("ДатаКонецДня",			ТипДата());
	ТаблицаДанныхЗаказов.Колонки.Добавить("НомерПоДаннымКлиента",	ТипСтрока(30));
	ТаблицаДанныхЗаказов.Колонки.Добавить("Ссылка",					ТипДокументЗаказ);
	
	Для Каждого ДанныеЗаказа Из Данные.orders Цикл
		
		Приостановка = ЗначениеСвойства(ДанныеЗаказа, "suspended");
		
		Если НЕ ЗначениеЗаполнено(Приостановка)
			ИЛИ Приостановка.reason_type <> ТипыПричинПриостановки.НедостаточноОстатка Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТаб = ТаблицаДанныхЗаказов.Добавить();
		
		СтрТаб.Идентификатор		= ДанныеЗаказа.uuid;
		СтрТаб.ОрганизацияИНН		= ДанныеЗаказа.supplier.inn;
		СтрТаб.КонтрагентИНН		= ДанныеЗаказа.counterparty.inn;
		СтрТаб.КонтрагентКПП		= ДанныеЗаказа.counterparty.kpp;
		СтрТаб.Дата					= ДанныеЗаказа.date;
		СтрТаб.ДатаНачалоДня		= НачалоДня(СтрТаб.Дата);
		СтрТаб.ДатаКонецДня			= КонецДня(СтрТаб.Дата);
		СтрТаб.НомерПоДаннымКлиента	= ДанныеЗаказа.order_number;
		СтрТаб.Ссылка				= ДокументПоОписаниюТипаДокумента(ДанныеЗаказа.doc_type, ДанныеЗаказа.doc_id);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанныхЗаказов", ТаблицаДанныхЗаказов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Идентификатор КАК Идентификатор,
	|	Таб.ОрганизацияИНН КАК ОрганизацияИНН,
	|	Таб.КонтрагентИНН КАК КонтрагентИНН,
	|	Таб.КонтрагентКПП КАК КонтрагентКПП,
	|	Таб.Дата КАК Дата,
	|	Таб.ДатаНачалоДня КАК ДатаНачалоДня,
	|	Таб.ДатаКонецДня КАК ДатаКонецДня,
	|	Таб.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	Таб.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаДанныхЗаказов
	|ИЗ
	|	&ТаблицаДанныхЗаказов КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Заказ,
	|	ЗаказКлиента.Проведен КАК Проведен,
	|	ЗаказКлиента.Организация КАК Организация,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаДанныхЗаказов.Идентификатор КАК Идентификатор,
	|	ТаблицаДанныхЗаказов.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	МАКСИМУМ(ЗаказКлиентаТовары.ПричинаОтмены) КАК ПричинаОтмены
	|ИЗ
	|	ТаблицаДанныхЗаказов КАК ТаблицаДанныхЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО (ЗаказКлиента.Дата МЕЖДУ ТаблицаДанныхЗаказов.ДатаНачалоДня И ТаблицаДанныхЗаказов.ДатаКонецДня)
	|			И (ЗаказКлиента.НомерПоДаннымКлиента = ТаблицаДанныхЗаказов.НомерПоДаннымКлиента)
	|			И (ЗаказКлиента.Организация.ИНН = ТаблицаДанныхЗаказов.ОрганизацияИНН)
	|			И (ЗаказКлиента.Контрагент.ИНН = ТаблицаДанныхЗаказов.КонтрагентИНН)
	|			И (ЗаказКлиента.Контрагент.КПП = ТаблицаДанныхЗаказов.КонтрагентКПП)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО (ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка)
	|			И (ЗаказКлиентаТовары.Отменено)
	|ГДЕ
	|	(ЗаказКлиента.Проведен
	|			ИЛИ ЗаказКлиента.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка,
	|	ЗаказКлиента.Проведен,
	|	ЗаказКлиента.Контрагент,
	|	ЗаказКлиента.ПометкаУдаления,
	|	ТаблицаДанныхЗаказов.Идентификатор,
	|	ТаблицаДанныхЗаказов.НомерПоДаннымКлиента,
	|	ЗаказКлиента.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.Проведен,
	|	ЗаказНаПеремещение.Организация,
	|	ЗаказНаПеремещение.СкладПолучатель,
	|	ЗаказНаПеремещение.ПометкаУдаления,
	|	ТаблицаДанныхЗаказов.Идентификатор,
	|	ТаблицаДанныхЗаказов.НомерПоДаннымКлиента,
	|	NULL
	|ИЗ
	|	ТаблицаДанныхЗаказов КАК ТаблицаДанныхЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|		ПО (ЗаказНаПеремещение.Ссылка = ТаблицаДанныхЗаказов.Ссылка)
	|ГДЕ
	|	(ЗаказНаПеремещение.Проведен
	|			ИЛИ ЗаказНаПеремещение.ПометкаУдаления)";
	
	ПричинаОтменыПоУмолчанию = Контекст.Параметры.ПричинаОтменыПродавцом;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПричинаОтмены = ЕслиПусто(Выборка.ПричинаОтмены, ПричинаОтменыПоУмолчанию);
		
		Контрагент = Выборка.Контрагент;
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Склады") Тогда
			КонтрагентСклад = Контрагент;
			НастройкиМаркетплейса = СтрокаНастройкиМаркетплейса(Контекст.Настройки, Выборка.Организация, КонтрагентСклад);
			Если НЕ ЗначениеЗаполнено(НастройкиМаркетплейса) Тогда
				ЛогОшибка(СтрШаблон(
					"Не определена настройка маркетплейса при проверке приостановленного заказа!
					|заказ: %1
					|организация: %2
					|склад: %3",
					Выборка.Заказ, Выборка.Организация, КонтрагентСклад
				));
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НастройкиМаркетплейса.Контрагент) Тогда
				ЛогОшибка(СтрШаблон(
					"Не указан контрагент в настройках маркетплейса при проверке приостановленного заказа!
					|заказ: %1
					|организация: %2
					|склад: %3",
					Выборка.Заказ, Выборка.Организация, КонтрагентСклад
				));
				Продолжить;
			КонецЕсли;
			Контрагент = НастройкиМаркетплейса.Контрагент;
		КонецЕсли;
		
		ПараметрыЗаказаУН = Новый Структура;
		ПараметрыЗаказаУН.Вставить("Идентификатор",	Выборка.Идентификатор);
		ПараметрыЗаказаУН.Вставить("Контрагент",	Контрагент);
		ПараметрыЗаказаУН.Вставить("Номер",			Выборка.НомерПоДаннымКлиента);
		
		ЭтотЗаказОтменен = ЭтотЗаказОтменен(Выборка.Заказ);
		
		Если (Выборка.Проведен И ЭтотЗаказОтменен) ИЛИ Выборка.ПометкаУдаления Тогда
			ЗаказыОтправитьКомандуОтказ(ПараметрыЗаказаУН, ПричинаОтмены, Контекст);
			
		ИначеЕсли Выборка.Проведен И НЕ ЭтотЗаказОтменен Тогда
			ЗаказыОтправитьКомандуЗарезервировать(ПараметрыЗаказаУН, Контекст);
			
		Иначе
			ЛогОшибка(СтрШаблон(
				"Необрабатываемое состояние приостановленного заказа.
				|заказ: %1",
				Выборка.Заказ
			));
		КонецЕсли;
		
	КонецЦикла;
	
	ЛогИнфо(СтрШаблон(
		"Проверены приостановленные заказы.
		|обработано заказов: %1
		|Потрачено времени: %2",
		Выборка.Количество(),
		ПотраченоВремени(Замер)
	));
	
КонецПроцедуры

Функция ЗагрузитьДанныеЗаказа(ДанныеВнешнейСистемы, ДанныеЗаказа, Контекст)
	
	Замер = Замер();
	
	ЛогИнфо(СтрШаблон(
		"Загрузка заказа:
		|order_number = %1
		|status = %2
		|",
		ДанныеЗаказа.order_number,
		ДанныеЗаказа.status
	));
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаказКлиента");
	Результат.Вставить("Новый", Ложь);
	Результат.Вставить("Записан", Ложь);
	
	Результат.Вставить("ОтмененПокупателем", СтатусЗаказаОтмененПокупателем(ДанныеЗаказа.status));
	Результат.Вставить("ОтмененПродавцом", СтатусЗаказаОтмененПродавцом(ДанныеЗаказа.status));
	Результат.Вставить("Приостановлен", Ложь);
	Результат.Вставить("УжеОтгружен", Ложь);
	Результат.Вставить("ПричинаОстановки", "");
	Результат.Вставить("ТипПричиныОстановки", "");
	
	// Команды сервису УН
	Результат.Вставить("ОтправленаКомандаПриостановлен",	Ложь);
	Результат.Вставить("ОтправленаКомандаОтказ",			Ложь);
	Результат.Вставить("ОтправленаКомандаРезерв",			Ложь);
	Результат.Вставить("ОтправленаКомандаСборка",			Ложь);
	
	Результат.Вставить("ДействияСЗаказом", Новый Массив);
	
	// Ищем ключевые реквизиты
	
	Организация = НайтиОрганизацию(ДанныеЗаказа.supplier.inn);
	Контрагент = НайтиКонтрагента(ДанныеЗаказа.counterparty.inn, ДанныеЗаказа.counterparty.kpp);
	
	НомерПоДаннымКлиента = ДанныеЗаказа.order_number;
	ДатаЗаказа = ДанныеЗаказа.date;
	
	НастройкиМаркетплейса = СтрокаНастройкиМаркетплейса(Контекст.Настройки, Организация, Контрагент);
	
	Если НастройкиМаркетплейса = Неопределено Тогда
		ЛогВнимание(СтрШаблон(
			"Пропущен заказ внешней системы:
			|номер заказа: %1
			|Нет настроек маркетплейса '%2'",
			НомерПоДаннымКлиента,  // 1
			НастройкиМаркетплейса.Имя  // 2
		));
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ НастройкиМаркетплейса.Использование Тогда
		ЛогВнимание(СтрШаблон(
			"Пропущен заказ внешней системы:
			|номер заказа: %1
			|У маркетплейса '%2' отключено использование",
			НомерПоДаннымКлиента,  // 1
			НастройкиМаркетплейса.Имя  // 2
		));
		Возврат Результат;
	КонецЕсли;
	
	КомандаЗагрузкаЗаказов = КомандыОбмена().ЗагрузкаЗаказов.Идентификатор;
	Если НЕ ЗначениеЗаполнено(НастройкиМаркетплейса.КомандыОбмена)
		ИЛИ НастройкиМаркетплейса.КомандыОбмена.НайтиПоЗначению(КомандаЗагрузкаЗаказов) = Неопределено Тогда
		ЛогВнимание(СтрШаблон(
			"Пропущен заказ внешней системы:
			|номер заказа: %1
			|У маркетплейса '%2' отключена команда обмена '%3'",
			НомерПоДаннымКлиента,  // 1
			НастройкиМаркетплейса.Имя,  // 2
			КомандаЗагрузкаЗаказов  // 3
		));
		Возврат Результат;
	КонецЕсли;
	
	// =====================================
	// Поиск или создание+заполнение заказа
	
	ПараметрыЗаказаУН = Новый Структура;
	ПараметрыЗаказаУН.Вставить("Идентификатор",		ДанныеЗаказа.uuid);
	ПараметрыЗаказаУН.Вставить("Номер",				НомерПоДаннымКлиента);
	ПараметрыЗаказаУН.Вставить("Дата",				ДатаЗаказа);
	ПараметрыЗаказаУН.Вставить("ДатаОтгрузки",		ДанныеЗаказа.shipment_date);
	ПараметрыЗаказаУН.Вставить("Статус",			ДанныеЗаказа.status);
	ПараметрыЗаказаУН.Вставить("Сумма",				ДанныеЗаказа.amount);
	ПараметрыЗаказаУН.Вставить("Товары",			ДанныеЗаказа.products);
	ПараметрыЗаказаУН.Вставить("ТипДокумента",		ДанныеЗаказа.doc_type);
	ПараметрыЗаказаУН.Вставить("UUIDДокумента",		ДанныеЗаказа.doc_id);
	ПараметрыЗаказаУН.Вставить("Организация",		Организация);
	ПараметрыЗаказаУН.Вставить("ИмяСклада",			ДанныеЗаказа.stock);
	ПараметрыЗаказаУН.Вставить("Контрагент",		Контрагент);
	ПараметрыЗаказаУН.Вставить("НомерКонтракта",	ДанныеВнешнейСистемы.contract_number);
	ПараметрыЗаказаУН.Вставить("КодСоглашения",		ДанныеВнешнейСистемы.agreement_code);
	ПараметрыЗаказаУН.Вставить("СкладПолучатель",	НастройкиМаркетплейса.Склад);
	ПараметрыЗаказаУН.Вставить("НастройкиМП",		НастройкиМаркетплейса);
	ПараметрыЗаказаУН.Вставить("ИдСкладаМП",		ЗначениеСвойства(ДанныеЗаказа, "warehouse_id"));
	ПараметрыЗаказаУН.Вставить("ИмяМаркетплейса",	ДанныеВнешнейСистемы.marketplace_name);
	ПараметрыЗаказаУН.Вставить("КакПеремещение",	ЗначениеЗаполнено(НастройкиМаркетплейса.Склад));
	
	ЛогИнфо(СтрШаблон(
		"Параметры заказа:
		|ДатаОтгрузки = %1
		|ТипДокумента = %2
		|UUIDДокумента = %3
		|ИдСкладаМП = %4
		|",
		ПараметрыЗаказаУН.ДатаОтгрузки,
		ПараметрыЗаказаУН.ТипДокумента,
		ПараметрыЗаказаУН.UUIDДокумента,
		ПараметрыЗаказаУН.ИдСкладаМП
	));
	
	СостояниеЗаказа = СостояниеЗаказаКлиента(ПараметрыЗаказаУН);
	
	Если ПараметрыЗаказаУН.КакПеремещение Тогда
		ЗагрузитьДанныеЗаказаНаПеремещение(Результат, ПараметрыЗаказаУН, СостояниеЗаказа, Контекст);
	Иначе
		ЗагрузитьДанныеЗаказаКлиента(Результат, ПараметрыЗаказаУН, СостояниеЗаказа, Контекст);
	КонецЕсли;
	
	Если Результат.Записан Тогда
		ЛогИнфо(
			СтрШаблон(
				"Загружен заказ внешней системы:
				|заказ клиента: %1
				|новый: %2
				|отменен покупателем: %3
				|отменен продавцом: %4
				|действия с заказом: %5
				|Потрачено времени = %6",
				Результат.ЗаказКлиента,  // 1
				Результат.Новый,  // 2
				Результат.ОтмененПокупателем,  // 3
				Результат.ОтмененПродавцом,  // 4
				СтрСоединить(Результат.ДействияСЗаказом, ", "),  // 5
				ПотраченоВремени(Замер)  // 6
			),
			Результат.ЗаказКлиента
		);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьДанныеЗаказаНаПеремещение(Результат, ПараметрыЗаказаУН, СостояниеЗаказа, Контекст)
	
	ЗаказСсылка = СостояниеЗаказа.Ссылка;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
		Результат.ЗаказКлиента = ЗаказСсылка;
		Результат.УжеОтгружен = СостояниеЗаказа.УжеОтгружен;
		
		ЛогИнфо(СтрШаблон(
			"Найден заказ клиента:
			|Ссылка = %1
			|Проведен = %2
			|",
			ЗаказСсылка,
			ЗаказСсылка.Проведен
		));
		
		Если СостояниеЗаказа.УжеОтгружен Тогда
			ЛогИнфо(
				СтрШаблон(
					"Пропущен уже отгруженный/отгружаемый заказ внешней системы:
					|заказ клиента: %1
					|отменен покупателем: %2
					|отменен продавцом: %3
					|уже отгружен: %4",
					Результат.ЗаказКлиента,  // 1
					Результат.ОтмененПокупателем,  // 2
					Результат.ОтмененПродавцом,  // 3
					СостояниеЗаказа.УжеОтгружен  // 4
				),
				Результат.ЗаказКлиента
			);
			
			Возврат;
		КонецЕсли;
		
		ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
		
		Если (Результат.ОтмененПокупателем ИЛИ Результат.ОтмененПродавцом) Тогда
			
			Если ЭтотЗаказОтменен(ЗаказОбъект) ИЛИ НЕ ЗаказОбъект.Проведен Тогда
				ЛогИнфо(
					СтрШаблон(
						"Пропущен ранее уже отменённый заказ внешней системы:
						|заказ клиента: %1
						|отменен покупателем: %2
						|отменен продавцом: %3",
						Результат.ЗаказКлиента,  // 1
						Результат.ОтмененПокупателем,  // 2
						Результат.ОтмененПродавцом  // 3
					),
					Результат.ЗаказКлиента
				);
				
				Возврат;
				
			КонецЕсли;
			
			Если НЕ ЭтотЗаказОтменен(ЗаказОбъект)
				И Результат.ОтмененПокупателем
				И СостояниеЗаказа.ДобавленВОрдер
				И ЗаказОбъект.Проведен Тогда
				ЛогИнфо(
					СтрШаблон(
						"Пропущен отменённый клиентом заказ внешней системы:
						|заказ клиента: %1
						|отменен покупателем: %2
						|отменен продавцом: %3
						|ВАЖНО: у нас не отгружен, но уже добавлен в ордер!",
						Результат.ЗаказКлиента,  // 1
						Результат.ОтмененПокупателем,  // 2
						Результат.ОтмененПродавцом  // 3
					),
					Результат.ЗаказКлиента
				);
				
				Возврат;
				
			КонецЕсли;
			
			Если НЕ ЭтотЗаказОтменен(ЗаказОбъект)
				И Результат.ОтмененПродавцом
				И ЗаказОбъект.Проведен Тогда
				ЛогИнфо(
					СтрШаблон(
						"Пропущен отменённый продавцом (на сайте?) заказ внешней системы:
						|заказ клиента: %1
						|отменен покупателем: %2
						|отменен продавцом: %3
						|ВАЖНО: у нас не отгружен, но может быть в состоянии отгрузки!",
						Результат.ЗаказКлиента,  // 1
						Результат.ОтмененПокупателем,  // 2
						Результат.ОтмененПродавцом  // 3
					),
					Результат.ЗаказКлиента
				);
				
				// TODO: может, отправить куда нить в Телеграм сообщение о баге?
				
				Возврат;
				
			КонецЕсли;
			
			// Далее идём только если надо его отменить у нас
			
		Иначе
			// Все остальные статусы нам надо пропустить.
			// Заказ уже в УТ, он был зарезервирован
			
			ЛогИнфо(СтрШаблон(
				"Пропущен ранее уже зарезервированный заказ внешней системы:
				|заказ клиента: %1",
				Результат.ЗаказКлиента  // 1
			),Результат.ЗаказКлиента);
			
			Возврат;
		КонецЕсли;
		
		//// Для уже загруженных ранее заказов предполагается
		//// только обновление реквизитов заказа
		//РежимЗаписи = РежимЗаписиДокумента.Запись;
		
	Иначе
		Результат.Новый = Истина;
		
		Если Результат.ОтмененПокупателем Тогда
			ЛогИнфо(СтрШаблон(
				"Пропущен заказ внешней системы: уже отменен покупателем!
				|order_number = %1
				|status = %2",
				ПараметрыЗаказаУН.Номер,
				ПараметрыЗаказаУН.Статус
			));
			Возврат
		КонецЕсли;
		
		ЛогИнфо("Заказ клиента НЕ найден! Создаём...");
		
		//Если НЕ (
		//	СтатусЗаказаНовый(ПараметрыЗаказаУН.Статус)
		//	ИЛИ Результат.ОтмененПокупателем
		//	ИЛИ Результат.ОтмененПродавцом
		//	)
		//	Тогда
		//	ЛогИнфо(
		//		СтрШаблон(
		//			"Пропущен заказ внешней системы: недопустимый статус для создания заказа!
		//			|order_number = %1
		//			|status = %2",
		//			ДанныеЗаказа.order_number,  // 1
		//			ДанныеЗаказа.status  // 1
		//		),
		//		Результат.ЗаказКлиента
		//	);
		//	Возврат;
		//КонецЕсли;
		
		ЗаказОбъект = Документы.ЗаказНаПеремещение.СоздатьДокумент();
		ЗаказОбъект.Дата = ПараметрыЗаказаУН.Дата;
		
		ЗаказОбъект.Организация = ПараметрыЗаказаУН.Организация;
		ЗаказОбъект.СкладОтправитель = НайтиСклад(ПараметрыЗаказаУН.ИмяСклада);
		ЗаказОбъект.СкладПолучатель = ПараметрыЗаказаУН.СкладПолучатель;
		
		ЗаказОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
		ЗаказОбъект.Приоритет = НайтиПриоритет("Высокий");
		
		ЗаказОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ЗаказОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(
			ЗаказОбъект.Ответственный, ЗаказОбъект.Подразделение);
		
		ЗаказОбъект.Комментарий = СтрШаблон(
			"Заказ Яндекс.Маркет; № заказа: %1; Дата отгрузки: %2;",
			ПараметрыЗаказаУН.Номер,
			Формат(ПараметрыЗаказаУН.ДатаОтгрузки, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	НастройкиМаркетплейса = ПараметрыЗаказаУН.НастройкиМП;
	
	ЗаказОбъект.ЖелаемаяДатаПоступления = ПараметрыЗаказаУН.ДатаОтгрузки;
	ЗаказОбъект.СпособДоставки = НастройкиМаркетплейса.СпособДоставки;
	
	ЗаказОбъект.АдресДоставки = НастройкиМаркетплейса.АдресДоставки;
	ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(
		ЗаказОбъект.АдресДоставки, ЗаказОбъект.АдресДоставкиЗначенияПолей);
	ЗаказОбъект.АдресДоставкиЗначение = ЗаказОбъект.АдресДоставкиЗначенияПолей;
	
	ЗаказОбъект.ЗонаДоставки = НастройкиМаркетплейса.ЗонаДоставки;
	
	ЛогИнфо(СтрШаблон(
		"Установлены параметры доставки:
		|Способ: %1
		|Адрес: %2
		|Адрес (значения полей): %3",
		ЗаказОбъект.СпособДоставки,
		ЗаказОбъект.АдресДоставки, ЗаказОбъект.АдресДоставкиЗначенияПолей
	));
	
	ЗаказОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	
	// =====================================
	// Содержимое заказа
	
	Если Результат.Новый Тогда
		
		Для Каждого Элемент Из ПараметрыЗаказаУН.Товары Цикл
			
			НовСтр = ЗаказОбъект.Товары.Добавить();
			
			НовСтр.Номенклатура = НайтиНоменклатуру(Элемент.product.code);
			НовСтр.Количество = Элемент.qty;
			НовСтр.КоличествоУпаковок = Элемент.qty;
			
			НовСтр.НачалоОтгрузки = ПараметрыЗаказаУН.ДатаОтгрузки;
			НовСтр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			
		КонецЦикла;
		
		// Доп. обработка товаров
		
		Для Каждого СтрТЧ ИЗ ЗаказОбъект.Товары Цикл
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрТЧ.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтрТЧ, СтруктураДействий, Неопределено);
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрТЧ Из ЗаказОбъект.Товары Цикл
			// Обновляем дату отгрузки, если она не была известна ранее
			Если НЕ ЗначениеЗаполнено(СтрТЧ.НачалоОтгрузки) Тогда
				СтрТЧ.НачалоОтгрузки = ПараметрыЗаказаУН.ДатаОтгрузки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// =====================================
	// Обработка отмены заказа
	
	Если Результат.ОтмененПокупателем ИЛИ Результат.ОтмененПродавцом Тогда
		ОтменитьПозицииЗаказа(ЗаказОбъект, Неопределено);
	КонецЕсли;
	
	// =====================================
	// Пробуем провести
	
	Результат.ЗаказКлиента = ЗаписатьДокументЗаказКлиента(
		ЗаказОбъект, РежимЗаписи, Результат, ПараметрыЗаказаУН, Контекст);
	
	Результат.Записан = Истина;
	
	ЛогИнфо(СтрШаблон(
		"Записанные параметры доставки:
		|Способ: %1
		|Адрес: %2
		|Адрес (значения полей): %3",
		Результат.ЗаказКлиента.СпособДоставки,
		Результат.ЗаказКлиента.АдресДоставки,
		Результат.ЗаказКлиента.АдресДоставкиЗначенияПолей
	));
	
КонецПроцедуры

Процедура ЗагрузитьДанныеЗаказаКлиента(Результат, ПараметрыЗаказаУН, СостояниеЗаказа, Контекст)
	
	ЗаказКлиентаСсылка = СостояниеЗаказа.Ссылка;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
		Результат.ЗаказКлиента = ЗаказКлиентаСсылка;
		Результат.УжеОтгружен = СостояниеЗаказа.УжеОтгружен;
		
		ЛогИнфо(СтрШаблон(
			"Найден заказ клиента:
			|Ссылка = %1
			|Проведен = %2
			|",
			ЗаказКлиентаСсылка,
			ЗаказКлиентаСсылка.Проведен
		));
		
		Если СостояниеЗаказа.УжеОтгружен Тогда
			ЛогИнфо(
				СтрШаблон(
					"Пропущен уже отгруженный/отгружаемый заказ внешней системы:
					|заказ клиента: %1
					|отменен покупателем: %2
					|отменен продавцом: %3
					|уже отгружен: %4",
					Результат.ЗаказКлиента,  // 1
					Результат.ОтмененПокупателем,  // 2
					Результат.ОтмененПродавцом,  // 3
					СостояниеЗаказа.УжеОтгружен  // 4
				),
				Результат.ЗаказКлиента
			);
			
			Возврат;
		КонецЕсли;
		
		ЗаказКлиента = ЗаказКлиентаСсылка.ПолучитьОбъект();
		
		Если (Результат.ОтмененПокупателем ИЛИ Результат.ОтмененПродавцом) Тогда
			
			Если ЭтотЗаказОтменен(ЗаказКлиента) ИЛИ НЕ ЗаказКлиента.Проведен Тогда
				ЛогИнфо(
					СтрШаблон(
						"Пропущен ранее уже отменённый заказ внешней системы:
						|заказ клиента: %1
						|отменен покупателем: %2
						|отменен продавцом: %3",
						Результат.ЗаказКлиента,  // 1
						Результат.ОтмененПокупателем,  // 2
						Результат.ОтмененПродавцом  // 3
					),
					Результат.ЗаказКлиента
				);
				
				Возврат;
				
			КонецЕсли;
			
			Если НЕ ЭтотЗаказОтменен(ЗаказКлиента)
				И Результат.ОтмененПокупателем
				И СостояниеЗаказа.ДобавленВОрдер
				И ЗаказКлиента.Проведен Тогда
				ЛогИнфо(
					СтрШаблон(
						"Пропущен отменённый клиентом заказ внешней системы:
						|заказ клиента: %1
						|отменен покупателем: %2
						|отменен продавцом: %3
						|ВАЖНО: у нас не отгружен, но уже добавлен в ордер!",
						Результат.ЗаказКлиента,  // 1
						Результат.ОтмененПокупателем,  // 2
						Результат.ОтмененПродавцом  // 3
					),
					Результат.ЗаказКлиента
				);
				
				Возврат;
				
			КонецЕсли;
			
			Если НЕ ЭтотЗаказОтменен(ЗаказКлиента)
				И Результат.ОтмененПродавцом
				И ЗаказКлиента.Проведен Тогда
				ЛогИнфо(
					СтрШаблон(
						"Пропущен отменённый продавцом (на сайте?) заказ внешней системы:
						|заказ клиента: %1
						|отменен покупателем: %2
						|отменен продавцом: %3
						|ВАЖНО: у нас не отгружен, но может быть в состоянии отгрузки!",
						Результат.ЗаказКлиента,  // 1
						Результат.ОтмененПокупателем,  // 2
						Результат.ОтмененПродавцом  // 3
					),
					Результат.ЗаказКлиента
				);
				
				// TODO: может, отправить куда нить в Телеграм сообщение о баге?
				
				Возврат;
				
			КонецЕсли;
			
			// Далее идём только если надо его отменить у нас
			
		Иначе
			// Все остальные статусы нам надо пропустить.
			// Заказ уже в УТ, он был зарезервирован
			
			ЛогИнфо(СтрШаблон(
				"Пропущен ранее уже зарезервированный заказ внешней системы:
				|заказ клиента: %1",
				Результат.ЗаказКлиента  // 1
			),Результат.ЗаказКлиента);
			
			Возврат;
		КонецЕсли;
		
		//// Для уже загруженных ранее заказов предполагается
		//// только обновление реквизитов заказа
		//РежимЗаписи = РежимЗаписиДокумента.Запись;
		
	Иначе
		Результат.Новый = Истина;
		
		Если Результат.ОтмененПокупателем Тогда
			ЛогИнфо(СтрШаблон(
				"Пропущен заказ внешней системы: уже отменен покупателем!
				|order_number = %1
				|status = %2",
				ПараметрыЗаказаУН.Номер,
				ПараметрыЗаказаУН.Статус
			));
			Возврат
		КонецЕсли;
		
		ЛогИнфо("Заказ клиента НЕ найден! Создаём...");
		
		//Если НЕ (
		//	СтатусЗаказаНовый(ПараметрыЗаказаУН.Статус)
		//	ИЛИ Результат.ОтмененПокупателем
		//	ИЛИ Результат.ОтмененПродавцом
		//	)
		//	Тогда
		//	ЛогИнфо(
		//		СтрШаблон(
		//			"Пропущен заказ внешней системы: недопустимый статус для создания заказа!
		//			|order_number = %1
		//			|status = %2",
		//			ДанныеЗаказа.order_number,  // 1
		//			ДанныеЗаказа.status  // 1
		//		),
		//		Результат.ЗаказКлиента
		//	);
		//	Возврат;
		//КонецЕсли;
		
		ЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
		ЗаказКлиента.Дата = ПараметрыЗаказаУН.Дата;
		
		ЗаказКлиента.Организация = ПараметрыЗаказаУН.Организация;
		ЗаказКлиента.Контрагент = ПараметрыЗаказаУН.Контрагент;
		ЗаказКлиента.Партнер = ПараметрыЗаказаУН.Контрагент.Партнер;
		
		ЗаказКлиента.Соглашение = НайтиСоглашениеСКлиентом(
			ПараметрыЗаказаУН.Организация,
			ПараметрыЗаказаУН.Контрагент,
			ПараметрыЗаказаУН.КодСоглашения);
		
		ЗаказКлиента.ЗаполнитьУсловияПродажПоСоглашению(Ложь);
		
		ЗаказКлиента.Договор = НайтиДоговорКонтрагента(
			ПараметрыЗаказаУН.Организация,
			ПараметрыЗаказаУН.Контрагент,
			ПараметрыЗаказаУН.НомерКонтракта);
		
		ЗаказКлиента.Валюта = ЗаказКлиента.Договор.ВалютаВзаиморасчетов;
		
		ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЗаказКлиента);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ЗаказКлиента.НалогообложениеНДС, ПараметрыЗаполнения);
		
		ЗаказКлиента.Склад = НайтиСклад(ПараметрыЗаказаУН.ИмяСклада);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		Иначе
			ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		ЗаказКлиента.Приоритет = НайтиПриоритет("Средний");
		
		ЗаказКлиента.Менеджер = Пользователи.ТекущийПользователь();
		ЗаказКлиента.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(
			ЗаказКлиента.Менеджер, ЗаказКлиента.Подразделение
		);
		
	КонецЕсли;
	
	ЗаказКлиента.НеОтгружатьЧастями = Истина;
	ЗаказКлиента.ДатаОтгрузки = ПараметрыЗаказаУН.ДатаОтгрузки;
	
	НастройкиДоставки = НастройкиДоставкиМаркеплейса(ПараметрыЗаказаУН, Контекст);
	
	ЗаказКлиента.СпособДоставки = НастройкиДоставки.СпособДоставки;
	
	ЗаказКлиента.АдресДоставки = НастройкиДоставки.АдресДоставки;
	ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(
		ЗаказКлиента.АдресДоставки, ЗаказКлиента.АдресДоставкиЗначенияПолей);
	ЗаказКлиента.АдресДоставкиЗначение = ЗаказКлиента.АдресДоставкиЗначенияПолей;
	
	ЗаказКлиента.ЗонаДоставки = НастройкиДоставки.ЗонаДоставки;
	
	ЛогИнфо(СтрШаблон(
		"Установлены параметры доставки:
		|Способ: %1
		|Адрес: %2
		|Адрес (значения полей): %3",
		ЗаказКлиента.СпособДоставки,
		ЗаказКлиента.АдресДоставки, ЗаказКлиента.АдресДоставкиЗначенияПолей
	));
	
	ЗаказКлиента.НомерПоДаннымКлиента = ПараметрыЗаказаУН.Номер;
	ЗаказКлиента.ДатаПоДаннымКлиента = ПараметрыЗаказаУН.Дата;
	
	ЗаказКлиента.ДатаСогласования = ПараметрыЗаказаУН.Дата;
	ЗаказКлиента.Согласован = Истина;
	
	ЗаказКлиента.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ЗаказКлиента.СкидкиРассчитаны = Истина;
	ЗаказКлиента.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	ЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
	// =====================================
	// Содержимое заказа
	
	Если Результат.Новый Тогда
		
		ЗаказКлиента.СуммаДокумента = ПараметрыЗаказаУН.Сумма;
		
		Для Каждого Элемент Из ПараметрыЗаказаУН.Товары Цикл
			
			НовСтр = ЗаказКлиента.Товары.Добавить();
			
			НовСтр.Номенклатура = НайтиНоменклатуру(Элемент.product.code);
			НовСтр.Количество = Элемент.qty;
			НовСтр.КоличествоУпаковок = Элемент.qty;
			НовСтр.Цена = Элемент.price;
			НовСтр.Сумма = Элемент.amount;
			НовСтр.Склад = ЗаказКлиента.Склад;
			
			НовСтр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			
		КонецЦикла;
		
		// Доп. обработка товаров
		
		//УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(ЗаказКлиента, ЗаказКлиента.Товары);
		СкорректироватьСтавкуНДСВТЧДокумента(ЗаказКлиента, ЗаказКлиента.Товары);
		
		СтруктураЗаполненияСтавкиНДС = Новый Структура(
			"НалогообложениеНДС, Дата, ПоДатеОтгрузки",
			ЗаказКлиента.НалогообложениеНДС, ЗаказКлиента.Дата, Истина);
		СтруктураЗаполненияСтавкиНДС.Вставить("Организация", ЗаказКлиента.Организация);
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиента);
		
		Для Каждого СтрТЧ ИЗ ЗаказКлиента.Товары Цикл
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрТЧ.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", СтруктураЗаполненияСтавкиНДС);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтрТЧ, СтруктураДействий, Неопределено);
		КонецЦикла;
		
		ЗаказКлиента.СуммаДокумента = ЗаказКлиента.Товары.Итог("СуммаСНДС");
		
	КонецЕсли;
	
	// =====================================
	// Доп. поля
	
	Если ЕстьРасширениеХакстера() Тогда
		ЗаказКлиента.Маркетплейс_Заявка = Истина;
		ЗаказКлиента.Маркетплейс = ПараметрыЗаказаУН.ИмяМаркетплейса;
		ЗаказКлиента.НомерЗаказаМаркетплейс = ПараметрыЗаказаУН.Номер;
		ЗаказКлиента.СтатусДокументаМаркетплейс = ПараметрыЗаказаУН.Статус;  // TODO: заменить на имя статуса маркетплейса
	КонецЕсли;
	
	// =====================================
	// Обработка отмены заказа
	
	Если Результат.ОтмененПокупателем Тогда
		ПричинаОтмены = Контекст.Параметры.ПричинаОтменыПокупателем;
	Иначе
		ПричинаОтмены = Контекст.Параметры.ПричинаОтменыПродавцом;
	КонецЕсли;
	
	Если Результат.ОтмененПокупателем ИЛИ Результат.ОтмененПродавцом Тогда
		ОтменитьПозицииЗаказа(ЗаказКлиента, ПричинаОтмены);
	КонецЕсли;
	
	// =====================================
	// Пробуем провести
	
	Результат.ЗаказКлиента = ЗаписатьДокументЗаказКлиента(
		ЗаказКлиента, РежимЗаписи, Результат, ПараметрыЗаказаУН, Контекст);
	
	Результат.Записан = Истина;
	
	ЛогИнфо(СтрШаблон(
		"Записанные параметры доставки:
		|Способ: %1
		|Адрес: %2
		|Адрес (значения полей): %3",
		Результат.ЗаказКлиента.СпособДоставки,
		Результат.ЗаказКлиента.АдресДоставки,
		Результат.ЗаказКлиента.АдресДоставкиЗначенияПолей
	));
	
КонецПроцедуры

Функция ЗаписатьДокументЗаказКлиента(ЗаказКлиента, РежимЗаписи, Результат, ПараметрыЗаказаУН, Контекст)
	
	Перем Ошибка;
	
	ЗаказСсылка = ?(Результат.Новый, Неопределено, ЗаказКлиента.Ссылка);
	
	ЛимитПопыток = 3;
	НомерПопытки = 0;
	
	Пока Истина Цикл
		
		НомерПопытки = НомерПопытки + 1;
		
		// При неудачном проведении информация будет в сообщениях
		ОсвободитьБуферСообщений();
		
		Попытка
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
			ЗаказКлиента.Записать(РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
			
			Если Результат.Новый
				И ЗаказКлиента.Проведен
				И НЕ (Результат.ОтмененПокупателем ИЛИ Результат.ОтмененПродавцом) Тогда
				// Если это новый заказ, он не отменен, то выставляем флаг,
				// что можно отправить сигнал об успешном резервировании
				
				Если СтатусЗаказаНовый(ПараметрыЗаказаУН.Статус)
					ИЛИ СтатусЗаказаЗаказан(ПараметрыЗаказаУН.Статус) Тогда
					
					ЗаказыОтправитьКомандуЗарезервировать(ПараметрыЗаказаУН, Контекст, ЗаказКлиента);
					
					Результат.ОтправленаКомандаРезерв = Истина;
					Результат.ДействияСЗаказом.Добавить("зарезервирован");
				
				КонецЕсли;
				
			ИначеЕсли Результат.Новый
				И НЕ ЗаказКлиента.Проведен
				И Результат.Приостановлен Тогда
				// Если заказ попытались провести, не удалось и решили приостановить его,
				// (например, не хватило остатка и менеджер должен разобраться), то нужно
				// отправить сигнал об этом в УН
				
				ЗаказыОтправитьКомандуПриостановить(ПараметрыЗаказаУН, Результат, Контекст, ЗаказКлиента);
				
				Результат.ОтправленаКомандаПриостановлен = Истина;
				Результат.ДействияСЗаказом.Добавить("приостановлен");
				
			ИначеЕсли Результат.Новый
				И ЗаказКлиента.Проведен
				И Результат.ОтмененПродавцом Тогда
				// Если заказ новый и был отменен, то нужно отправить сигнал об этом
				// в маркетплейс
				
				ЗаказыОтправитьКомандуОтказ(ПараметрыЗаказаУН, Контекст.Параметры.ПричинаОтменыПродавцом, Контекст);
				
				Результат.ОтправленаКомандаОтказ = Истина;
				Результат.ДействияСЗаказом.Добавить("отмена");
				
			ИначеЕсли НЕ Результат.Новый
				И ЗаказКлиента.Проведен
				И Результат.ОтмененПродавцом Тогда
				// К нам прилетела инфа об отмене продавцом со стороны маркетплейса
				// (хз как это возможно, пока не понятно).
				// Тогда просто оставляем его у нас отменённым, и никакого
				// сигнала в УН не отправляем
				
				Результат.ОтправленаКомандаОтказ = Ложь;
				Результат.ДействияСЗаказом.Добавить("отмена");
				
			ИначеЕсли НЕ Результат.Новый
				И ЗаказКлиента.Проведен
				И Результат.ОтмененПокупателем Тогда
				// К нам прилетела инфа об отмене покупателем со стороны маркетплейса.
				// Тогда просто оставляем его у нас отменённым, и никакого
				// сигнала в УН не отправляем
				
				Результат.ОтправленаКомандаОтказ = Ложь;
				Результат.ДействияСЗаказом.Добавить("отмена");
				
			Иначе
				БроситьИсключение(
					ТипыОшибок().НеЗавершенаОбработкаЗаказа,
					"Не обработан результат проведения/записи заказа!"
				);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			Прервать;  // выходим из цикла при успешном проведении
			
		Исключение
			ОтменитьТранзакцию();
			
			Ошибка = Ошибка(ИнформацияОбОшибке());
			
			ТекстыСообщений = Новый Массив;
			Если Ошибка.Тип = ТипыОшибок().Неизвестная Тогда
				
				// Проверим: вдруг есть полезная информация в сообщениях?
				ТекстыСообщений = ТекстыСообщенийПользователю();
				
				Ошибка.Тип = ОпределитьТипОшибки(ТекстыСообщений);
				
			КонецЕсли;
			
		КонецПопытки;
		
		// =====================================
		// Обработка неизвестного исключения
		
		Если Ошибка.Тип = ТипыОшибок().Неизвестная
			ИЛИ (НомерПопытки >= ЛимитПопыток) Тогда
			
			Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
				ЛогОшибка(СтрШаблон(
					"Ошибка при проведении заказа!
					|Заказ: %1
					|Попытка проведения: %2 из %3
					|Сообщения:
					|%4",
					ЗаказКлиента,
					НомерПопытки, ЛимитПопыток,
					СтрСоединить(ТекстыСообщений, Символы.ПС)
				), ЗаказСсылка);
			КонецЕсли;
			
			// Если эта ошибка всё ещё неизвестная - бросаем исключение
			БроситьИсключение(Ошибка.Тип, Ошибка.Текст);
			
		КонецЕсли;
		
		// =====================================
		// Обработка известных исключений
		
		// Если после проведения/записи заказа не отправили результат в сервис
		Если Ошибка.Тип = ТипыОшибок().НеЗавершенаОбработкаЗаказа Тогда
			ЛогОшибка(СтрШаблон(
				"Ошибка обработки результата проведения/записи заказа!
				|Заказ: %1",
				ЗаказКлиента
			), ЗаказСсылка);
			БроситьИсключение(Ошибка.Тип, Ошибка.Текст);
		КонецЕсли;
		
		// Если не хватает остатка - приостановим заказ
		Если Ошибка.Тип = ТипыОшибок().НедостаточноОстатка Тогда
			
			//ЛогИнфо(СтрШаблон(
			//	"Недостаточно остатка при проведении заказа!
			//	|Заказ: %1
			//	|Попытка проведения: %2 из %3
			//	|Сообщения:
			//	|%4",
			//	ЗаказКлиента,
			//	НомерПопытки, ЛимитПопыток,
			//	СтрСоединить(ТекстыСообщений, Символы.ПС)
			//));
			//
			////Пробуем отменить заказ и проведём зАново
			//ОтменитьПозицииЗаказа(ЗаказКлиента, Контекст.Параметры.ПричинаОтменыПродавцом);
			//Результат.ОтмененПродавцом = Истина;
			//
			//ЛогИнфо("Выполняется попытка выставить в заказе отмену и провести...");
			
			Результат.Приостановлен = Истина;
			Результат.ПричинаОстановки = СтрСоединить(ТекстыСообщений, Символы.ПС);
			Результат.ТипПричиныОстановки = ТипыПричинПриостановкиЗаказов().НедостаточноОстатка;
			
			РазделительКомментация = "";
			Если ЗначениеЗаполнено(ЗаказКлиента.Комментарий) Тогда
				РазделительКомментация = Символы.ПС;
			КонецЕсли;
			ЗаказКлиента.Комментарий = ЗаказКлиента.Комментарий + РазделительКомментация + Результат.ПричинаОстановки;
			
			ЛогИнфо(СтрШаблон(
				"Недостаточно остатка при проведении заказа!
				|Заказ: %1
				|Заказ будет приостановлен для ручной обработки менеджером.
				|Сообщения:
				|%2",
				ЗаказКлиента,
				Результат.ПричинаОстановки
			), ЗаказСсылка);
			
			Если ЗаказКлиента.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
				ЛогИнфо("Выполняется попытка отменить проведение...", ЗаказСсылка);
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
				ЛогИнфо("Выполняется попытка записи...", ЗаказСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаказКлиента.Ссылка;
	
КонецФункции

Функция ЭтотЗаказОтменен(ЗаказКлиента)
	
	Отменен = (
		ЗначениеЗаполнено(ЗаказКлиента.Товары)
		И ЗаказКлиента.Товары.Найти(Ложь, "Отменено") = Неопределено
	);
	
	Возврат Отменен;
	
КонецФункции

Функция СтатусЗаказаОтмененПокупателем(ИмяСтатуса)
	Возврат ИмяСтатуса = СтатусыЗаказов_УН().ОтмененПокупателем;
КонецФункции

Функция СтатусЗаказаОтмененПродавцом(ИмяСтатуса)
	Возврат ИмяСтатуса = СтатусыЗаказов_УН().ОтмененПродавцом;
КонецФункции

Функция СтатусЗаказаЗаказан(ИмяСтатуса)
	Возврат ИмяСтатуса = СтатусыЗаказов_УН().Заказан;
КонецФункции

Функция СтатусЗаказаНовый(ИмяСтатуса)
	Возврат ИмяСтатуса = СтатусыЗаказов_УН().Новый;
КонецФункции

Процедура ОтменитьПозицииЗаказа(ЗаказОбъект, ПричинаОтмены)
	
	Если ЭтотЗаказОтменен(ЗаказОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗаказКлиента = ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.ЗаказКлиента");
	
	Для Каждого СтрТЧ Из ЗаказОбъект.Товары Цикл
		СтрТЧ.Отменено = Истина;
		Если ЭтоЗаказКлиента Тогда
			СтрТЧ.ПричинаОтмены = ПричинаОтмены;
			//СтрТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаказыСдвинутьДатуИзменения(ВнешняяСистема, ДатаИзмененияПоследнегоЗаказа, Контекст)
	
	ЛогИнфо(СтрШаблон(
		"Сдвиг даты изменения заказов внешней системы.
		|внешняя система: %1
		|дата изменения последнего заказа: %2
		|ИД ключа: %3",
		ВнешняяСистема.name,
		ДатаИзмененияПоследнегоЗаказа,
		Контекст.КлючИД
	));
	
	Данные = Новый Структура;
	Данные.Вставить("external_system", ВнешняяСистема);
	Данные.Вставить("end_change_date", ДатаИзмененияПоследнегоЗаказа);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ЗаказыОбменСдвинутьДатуИзменения", "PATCH",
		, // ПараметрыURL
		, // ПараметрыЗапроса
		Данные
	);
	
КонецПроцедуры

Процедура ЗаказыОтправитьКомандуОтказ(ПараметрыЗаказаУН, ПричинаОтмены, Контекст)
	
	ЛогИнфо(СтрШаблон(
		"Отправка отказа по заказу внешней системы.
		|контрагент: %1
		|номер заказа: %2
		|ИД ключа: %3",
		ПараметрыЗаказаУН.Контрагент.Наименование,
		ПараметрыЗаказаУН.Номер,
		Контекст.КлючИД
	));
	
	Данные = Новый Структура;
	Данные.Вставить("reason", Строка(ПричинаОтмены));
	
	ЗаказыОбработатьКоманду(ПараметрыЗаказаУН.Идентификатор, "reject", Данные, Контекст);
	
КонецПроцедуры

Процедура ЗаказыОтправитьКомандуПриостановить(ПараметрыЗаказаУН, РезультатОбработки, Контекст, ДокументЗаказ = Неопределено)
	
	ЛогИнфо(СтрШаблон(
		"Отправка приостановки заказа внешней системы.
		|контрагент: %1
		|номер заказа: %2
		|тип причины остановки: %3
		|причина остановки:
		|%4
		|ИД ключа: %5",
		ПараметрыЗаказаУН.Контрагент.Наименование,
		ПараметрыЗаказаУН.Номер,
		РезультатОбработки.ТипПричиныОстановки,
		РезультатОбработки.ПричинаОстановки,
		Контекст.КлючИД
	));
	
	Данные = Новый Структура;
	Данные.Вставить("reason", Строка(РезультатОбработки.ПричинаОстановки));
	Данные.Вставить("reason_type", РезультатОбработки.ТипПричиныОстановки);
	
	Если ДокументЗаказ <> Неопределено Тогда
		ДобавитьОписаниеТипаДокумента(Данные, ДокументЗаказ.Ссылка)
	КонецЕсли;
	
	ЗаказыОбработатьКоманду(ПараметрыЗаказаУН.Идентификатор, "suspend", Данные, Контекст);
	
КонецПроцедуры

Процедура ЗаказыОтправитьКомандуЗарезервировать(ПараметрыЗаказаУН, Контекст, ДокументЗаказ = Неопределено)
	
	ЛогИнфо(СтрШаблон(
		"Отправка резерва по заказу внешней системы.
		|контрагент: %1
		|номер заказа: %2
		|ИД ключа: %3",
		ПараметрыЗаказаУН.Контрагент.Наименование,
		ПараметрыЗаказаУН.Номер,
		Контекст.КлючИД
	));
	
	Данные = Неопределено;
	
	Если ДокументЗаказ <> Неопределено Тогда
		Данные = Новый Структура;
		ДобавитьОписаниеТипаДокумента(Данные, ДокументЗаказ.Ссылка)
	КонецЕсли;
	
	ЗаказыОбработатьКоманду(ПараметрыЗаказаУН.Идентификатор, "reserve", Данные, Контекст);
	
КонецПроцедуры

Процедура ЗаказыОтправитьКомандуСборка(ПараметрыЗаказаУН, Контекст)
	
	ЛогИнфо(СтрШаблон(
		"Отправка на сборку заказа внешней системы.
		|контрагент: %1
		|номер заказа: %2
		|ИД ключа: %3",
		ПараметрыЗаказаУН.Контрагент.Наименование,
		ПараметрыЗаказаУН.Номер,
		Контекст.КлючИД
	));
	
	Данные = Новый Структура;
	// Когда используется разделение отправления, то работает
	// процедура "ОтправитьЗаказНаСборкуСРазделением"
	
	ЗаказыОбработатьКоманду(ПараметрыЗаказаУН.Идентификатор, "pickup", Данные, Контекст);
	
КонецПроцедуры

Процедура ЗаказыОбработатьКоманду(Идентификатор, Команда, Знач Данные = Неопределено, Контекст)
	
	ПараметрыURL = Новый Структура;
	ПараметрыURL.Вставить("Идентификатор", Идентификатор);
	ПараметрыURL.Вставить("ИмяКоманды", Команда);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ЗаказыКоманды",
		"POST",
		ПараметрыURL,
		,  // ПараметрыЗапроса
		ЕслиПусто(Данные, Новый Структура)
	);
	
КонецПроцедуры

Процедура ДобавитьОписаниеТипаДокумента(Приемник, ДокументСсылка)
	
	Если ТипЗнч(Приемник) = Тип("Структура") Тогда
		
		Приемник.Вставить("doc_type",	ИмяТипаXML(ДокументСсылка));
		Приемник.Вставить("doc_id",		XMLСтрока(ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументПоОписаниюТипаДокумента(ИмяТипаXML, ИдентификаторСсылки)
	
	ДокументСсылка = Неопределено;
	
	Если НЕ (ЗначениеЗаполнено(ИмяТипаXML)
		И ЗначениеЗаполнено(ИдентификаторСсылки)) Тогда
		Возврат ДокументСсылка;
	КонецЕсли;
	
	ТипДокумента = ИзXMLТипа(ИмяТипаXML, "");
	Если ТипДокумента = Неопределено Тогда
		Возврат ДокументСсылка;
	КонецЕсли;

	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
	МенеджерДокумента = Документы[МетаданныеДокумента.Имя];
	
	ДокументСсылка = МенеджерДокумента.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ИдентификаторСсылки)
	);
	
	Возврат ДокументСсылка;
	
КонецФункции

функция ЕстьРасширениеХакстера()
	
	ПустойЗаказ = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
	Возврат ЕстьРеквизит(ПустойЗаказ, "НомерЗаказаМаркетплейс");
	
КонецФункции

Функция НастройкиДоставкиМаркеплейса(ПараметрыЗаказаУН, Контекст)
	
	НастройкиДоставки = Новый Структура("СпособДоставки, АдресДоставки, ЗонаДоставки");
	
	ЗонаДоставки = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыЗаказаУН.ИдСкладаМП) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗоныДоставки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗоныДоставки КАК ЗоныДоставки
		|ГДЕ
		|	ЗоныДоставки.Описание ПОДОБНО &ШаблонПоиска СПЕЦСИМВОЛ ""\""";
		ШаблонПоиска = СтрШаблон("%1 \[%2\]", ПараметрыЗаказаУН.ИдСкладаМП, ПараметрыЗаказаУН.ИмяМаркетплейса)+"%";
		Запрос.УстановитьПараметр("ШаблонПоиска", ШаблонПоиска);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗонаДоставки = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура(
		"Использование, Организация, Имя, ЗонаДоставки",
		Истина, ПараметрыЗаказаУН.Организация, ПараметрыЗаказаУН.ИмяМаркетплейса, ЗонаДоставки);
		
	СтрокиНастроек = Контекст.Настройки.НастройкиДоставкиМаркетплейсов.НайтиСтроки(ПараметрыПоиска);
	
	Если ЗначениеЗаполнено(СтрокиНастроек) Тогда
		ЗаполнитьЗначенияСвойств(НастройкиДоставки, СтрокиНастроек[0]);
	Иначе
		// Берем по старому
		// TODO: заменить полностью на таблицу "НастройкиДоставкиМаркетплейсов" из настроек
		ЗаполнитьЗначенияСвойств(НастройкиДоставки, ПараметрыЗаказаУН.НастройкиМП);
	КонецЕсли;
	
	Возврат НастройкиДоставки;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

Процедура ВыполнитьОбменВыгрузка(СтрокаНастройкиОбмена, СтруктураНастроек)
	
	//ДанныеДляОбмена = Новый Массив;
	//		
	//Если СтрокаНастройкиОбмена.СпособОбмена = СпособыОбмена().ФайлыИзКаталога.Имя Тогда
	//	
	//	Если НЕ ЗаполнитьДанныеДляОбменаИзКаталога(ДанныеДляОбмена, СтрокаНастройкиОбмена) Тогда
	//		Возврат;
	//	КонецЕсли;
	//	);
	//	
	//Иначе
	//	// TODO: обработать ошибку, что способ неизвестен
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//// Собственно отправка
	//HTTPСоединение = СоединениеСервисаИнтеграции(СтруктураНастроек);
	//АдресРесурса = АдресРесурсаОбменаСервисаИнтеграции(СтруктураНастроек, СтрокаНастройкиОбмена);
	//
	//ЗаголовкиЗапроса = Новый Соответствие;
	//ЗаголовкиЗапроса.Вставить("Content-type", "application/xml");
	//ЗаголовкиЗапроса.Вставить("api-key", КлючAPI(СтруктураНастроек, СтрокаНастройкиОбмена.КлючИД));
	//
	//Для Каждого ЭлементДанных Из ДанныеДляОбмена Цикл
	//	
	//	Если ТипЗнч(ЭлементДанных) = Тип("Файл") Тогда
	//		ДвоичныеДанные = Новый ДвоичныеДанные(ЭлементДанных.ПолноеИмя);
	//		
	//	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДвоичныеДанные") Тогда
	//		ДвоичныеДанные = ЭлементДанных;
	//		
	//	Иначе
	//		// TODO: обработать ошибку, что тип данных неизвествен?
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовкиЗапроса);
	//	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
	//	
	//	Попытка
	//		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	//	Исключение
	//		ТекстОшибки = ОписаниеОшибки();
	//		// TODO: обработать ошибку неудачного соединения
	//		Прервать;
	//	КонецПопытки;
	//	
	//	Если HTTPОтвет.КодСостояния <> 200 Тогда
	//		// TODO: обработать ошибку неудачной обработки сервиса
	//		Прервать;
	//	КонецЕсли;
	//	
	//	// Удачно обработанные файлы удаляем
	//	Если ТипЗнч(ЭлементДанных) = Тип("Файл") Тогда
	//		УдалитьФайлы(ЭлементДанных.ПолноеИмя);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьДанныеДляОбменаИзКаталога(ДанныеДляОбмена, СтрокаНастройкиОбмена)
	
	Если НЕ ЗначениеЗаполнено(СтрокаНастройкиОбмена.ПутьКФайлам) Тогда
		// TODO: зафиксировать ошибку, что не указан путь к файлам
		Возврат Ложь;
	КонецЕсли;
	
	КаталогФайлов = Новый Файл(СтрокаНастройкиОбмена.ПутьКФайлам);
	Если НЕ КаталогФайлов.Существует() ИЛИ НЕ КаталогФайлов.ЭтоКаталог() Тогда
		// TODO: зафиксировать ошибку, что каталога нет или это не каталог
		Возврат Ложь;
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(КаталогФайлов.ПолноеИмя, "*.xml", Истина);
	НайденныеФайлы = СортироватьФайлы(НайденныеФайлы, "ВремяИзменения");
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		ДанныеДляОбмена.Добавить(Файл);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Поиск

Функция НайтиОрганизацию(ИНН)
	
	Ссылка = Неопределено;
	
	КешСсылок = Кеш("Организация");
	Ссылка = КешСсылок.Получить(ИНН);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		БроситьИсключение(ТипыОшибок().НеоднозначныйПоиск, "Организация по ИНН: "+ ИНН);
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
		КешСсылок.Вставить(ИНН, Ссылка);
	Иначе
		БроситьИсключение(ТипыОшибок().НеНайдено, "Организация по ИНН: "+ ИНН);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиКонтрагента(ИНН, КПП)
	
	Ссылка = Неопределено;
	
	КлючКеша = ИНН + КПП;
	
	КешСсылок = Кеш("Контрагент");
	Ссылка = КешСсылок.Получить(КлючКеша);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И ЕСТЬNULL(Контрагенты.ГоловнойКонтрагент.Ссылка, Контрагенты.Ссылка) = Контрагенты.Ссылка
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		БроситьИсключение(ТипыОшибок().НеоднозначныйПоиск, "Контрагент по ИНН/КПП: "+ ИНН + "/" + КПП);
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
		КешСсылок.Вставить(КлючКеша, Ссылка);
	Иначе
		БроситьИсключение(ТипыОшибок().НеНайдено, "Контрагент по ИНН/КПП: "+ ИНН + "/" + КПП);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиСоглашениеСКлиентом(Организация, Контрагент, КодСоглашения)
	
	Ссылка = Неопределено;
	
	Хеш = Хеш(Новый Структура(
		"Организация, Контрагент, КодСоглашения",
		Организация, Контрагент, КодСоглашения
	));
	
	КешСсылок = Кеш("СоглашениеСКлиентом");
	Ссылка = КешСсылок.Получить(Хеш);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Контрагент",		Контрагент);
	Запрос.УстановитьПараметр("КодСоглашения",	КодСоглашения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияДопРеквизиты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ДополнительныеРеквизиты КАК СоглашенияДопРеквизиты
	|ГДЕ
	|	СоглашенияДопРеквизиты.Свойство.Имя = ""КодСоглашения""
	|	И СоглашенияДопРеквизиты.Значение = &КодСоглашения
	|	И СоглашенияДопРеквизиты.Ссылка.Контрагент = &Контрагент
	|	И СоглашенияДопРеквизиты.Ссылка.Организация = &Организация
	|	И НЕ СоглашенияДопРеквизиты.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		БроситьИсключение(ТипыОшибок().НеоднозначныйПоиск, СтрШаблон(
			"Соглашение (организация, контрагент, код соглашения):
			|%1, %2, %3",
			Организация, Контрагент, КодСоглашения
		));
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
		КешСсылок.Вставить(Хеш, Ссылка);
	Иначе
		БроситьИсключение(ТипыОшибок().НеНайдено, СтрШаблон(
			"Соглашение (организация, контрагент, код соглашения):
			|%1, %2, %3",
			Организация, Контрагент, КодСоглашения
		));
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиДоговорКонтрагента(Организация, Контрагент, НомерДоговора)
	
	Ссылка = Неопределено;
	
	Хеш = Хеш(Новый Структура(
		"Организация, Контрагент, НомерДоговора",
		Организация, Контрагент, НомерДоговора
	));
	
	КешСсылок = Кеш("ДоговорКонтрагента");
	Ссылка = КешСсылок.Получить(Хеш);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Контрагент",		Контрагент);
	Запрос.УстановитьПараметр("НомерДоговора",	НомерДоговора);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Номер = &НомерДоговора
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером)
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		БроситьИсключение(ТипыОшибок().НеоднозначныйПоиск,СтрШаблон(
			"Договор (организация, контрагент, номер договора):
			|%1, %2, %3",
			Организация, Контрагент, НомерДоговора
		));
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
		КешСсылок.Вставить(Хеш, Ссылка);
	Иначе
		БроситьИсключение(ТипыОшибок().НеНайдено,СтрШаблон(
			"Договор (организация, контрагент, номер договора):
			|%1, %2, %3",
			Организация, Контрагент, НомерДоговора
		));
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиВалюту(Код)
	
	Ссылка = Неопределено;
	
	КешСсылок = Кеш("Валюта");
	Ссылка = КешСсылок.Получить(Код);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		БроситьИсключение(ТипыОшибок().НеНайдено, "Валюта по коду: "+ Код);
	КонецЕсли;
	
	КешСсылок.Вставить(Код, Ссылка);
	
	Возврат Ссылка;
	
КонецФункции

Функция СостояниеЗаказаКлиента(ПараметрыЗаказаУН)
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("УжеОтгружен", Ложь);
	Результат.Вставить("ДобавленВОрдер", Ложь);
	
	// Возможно, уже получали его, пробуем идентифицировать ссылку
	Ссылка = ДокументПоОписаниюТипаДокумента(
		ПараметрыЗаказаУН.ТипДокумента, ПараметрыЗаказаУН.UUIDДокумента);
	
	Если ПараметрыЗаказаУН.КакПеремещение Тогда
		// Со складом напрямую работают только заказы на перемещение
		
		ШаблонПоискаПоНомеру = "%"+ПараметрыЗаказаУН.Номер+";%";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",					Ссылка);
		Запрос.УстановитьПараметр("Организация",			ПараметрыЗаказаУН.Организация);
		Запрос.УстановитьПараметр("СкладПолучатель",		ПараметрыЗаказаУН.СкладПолучатель);
		Запрос.УстановитьПараметр("ШаблонПоискаПоНомеру",	ШаблонПоискаПоНомеру);
		Запрос.УстановитьПараметр("ДатаНачала",				НачалоДня(ПараметрыЗаказаУН.Дата) - Дней(5));
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ПараметрыЗаказаУН.Дата) + Дней(1));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказыНаПеремещение.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РегТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РегТоварыКОтгрузке.КОтгрузке > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК УжеОтгружен,
		|	МАКСИМУМ(РОРаспоряжения.Распоряжение ЕСТЬ НЕ NULL ) КАК ДобавленВОрдер
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказыНаПеремещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК РегТоварыКОтгрузке
		|		ПО (РегТоварыКОтгрузке.ДокументОтгрузки = ЗаказыНаПеремещение.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РОРаспоряжения
		|		ПО (РОРаспоряжения.Распоряжение = ЗаказыНаПеремещение.Ссылка)
		|ГДЕ
		|	ЗаказыНаПеремещение.Организация = &Организация
		|	И ЗаказыНаПеремещение.СкладПолучатель = &СкладПолучатель
		|	И НЕ ЗаказыНаПеремещение.ПометкаУдаления
		|	И (ЗаказыНаПеремещение.Ссылка = &Ссылка
		|			ИЛИ ЗаказыНаПеремещение.Комментарий ПОДОБНО &ШаблонПоискаПоНомеру)
		|	И ЗаказыНаПеремещение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаПеремещение.Ссылка";

	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",			ПараметрыЗаказаУН.Организация);
		Запрос.УстановитьПараметр("Контрагент",				ПараметрыЗаказаУН.Контрагент);
		Запрос.УстановитьПараметр("НомерПоДаннымКлиента",	ПараметрыЗаказаУН.Номер);
		Запрос.УстановитьПараметр("ДатаНачала",				НачалоДня(ПараметрыЗаказаУН.Дата) - Дней(2));
		Запрос.УстановитьПараметр("ДатаОкончания",			КонецДня(ПараметрыЗаказаУН.Дата) + Дней(1));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказыКлиента.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РегЗаказыКлиентов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РегЗаказыКлиентов.Заказано > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК УжеОтгружен,
		|	МАКСИМУМ(РОРаспоряжения.Распоряжение ЕСТЬ НЕ NULL) КАК ДобавленВОрдер
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказыКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов КАК РегЗаказыКлиентов
		|		ПО (РегЗаказыКлиентов.ЗаказКлиента = ЗаказыКлиента.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РОРаспоряжения
		|		ПО (РОРаспоряжения.Распоряжение = ЗаказыКлиента.Ссылка)
		|ГДЕ
		|	ЗаказыКлиента.Организация = &Организация
		|	И ЗаказыКлиента.Контрагент = &Контрагент
		|	И НЕ ЗаказыКлиента.ПометкаУдаления
		|	И (ЗаказыКлиента.НомерПоДаннымКлиента = &НомерПоДаннымКлиента
		|		ИЛИ &УсловиеНомерЗаказаМаркетплейса)
		|	И ЗаказыКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиента.Ссылка";
		
		УсловиеНомерЗаказаМаркетплейса = "";
		Если ЕстьРасширениеХакстера() Тогда
			УсловиеНомерЗаказаМаркетплейса = "ИЛИ ЗаказыКлиента.НомерЗаказаМаркетплейс = &НомерПоДаннымКлиента";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЛИ &УсловиеНомерЗаказаМаркетплейса", УсловиеНомерЗаказаМаркетплейса);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Ссылка = Выборка.Ссылка;
		Результат.УжеОтгружен = Выборка.УжеОтгружен;
		Результат.ДобавленВОрдер = Выборка.ДобавленВОрдер;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиНоменклатуру(Код)
	
	Ссылка = Неопределено;
	
	КешСсылок = Кеш("Номенклатура");
	Ссылка = КешСсылок.Получить(Код);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", Код);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &Код
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		БроситьИсключение(ТипыОшибок().НеоднозначныйПоиск, "Номенклатура по коду: "+ Код);
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
		КешСсылок.Вставить(Код, Ссылка);
	Иначе
		БроситьИсключение(ТипыОшибок().НеНайдено, "Номенклатура по коду: "+ Код);
	КонецЕсли;
	
	КешСсылок.Вставить(Код, Ссылка);
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиСклад(Наименование)
	
	Ссылка = Неопределено;
	
	КешСсылок = Кеш("Склад");
	Ссылка = КешСсылок.Получить(Наименование);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Наименование = &Наименование
	|	И НЕ Склады.ЭтоГруппа
	|	И НЕ Склады.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		БроситьИсключение(ТипыОшибок().НеоднозначныйПоиск, "Склад по наименованию: "+ Наименование);
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
		КешСсылок.Вставить(Наименование, Ссылка);
	Иначе
		БроситьИсключение(ТипыОшибок().НеНайдено, "Склад по наименованию: "+ Наименование);
	КонецЕсли;
	
	КешСсылок.Вставить(Наименование, Ссылка);
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиПриоритет(Наименование)
	
	Ссылка = Неопределено;
	
	КешСсылок = Кеш("Приоритет");
	Ссылка = КешСсылок.Получить(Наименование);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Приоритеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Приоритеты КАК Приоритеты
	|ГДЕ
	|	Приоритеты.Наименование = &Наименование
	|	И НЕ Приоритеты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
		КешСсылок.Вставить(Наименование, Ссылка);
	Иначе
		БроситьИсключение(ТипыОшибок().НеНайдено, "Приоритет по наименованию: "+ Наименование);
	КонецЕсли;
	
	КешСсылок.Вставить(Наименование, Ссылка);
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#Область Перечисления

Функция СтатусыЗаказов_УН()
	
	СтатусыЗаказов_УН = Кеш("СтатусыЗаказов_УН", Ложь);
	
	Если ЗначениеЗаполнено(СтатусыЗаказов_УН) Тогда
		Возврат СтатусыЗаказов_УН;
	КонецЕсли;
	
	Значения = Новый Массив;
	
	Значения.Добавить("Доставлен");
	Значения.Добавить("Доставляется");
	Значения.Добавить("Заказан");
	Значения.Добавить("Новый");
	Значения.Добавить("Отгружен");
	Значения.Добавить("ОтмененПокупателем");
	Значения.Добавить("ОтмененПродавцом");
	Значения.Добавить("Собран");
	
	Для Каждого Значение Из Значения Цикл
		СтатусыЗаказов_УН.Вставить(Значение, Значение);
	КонецЦикла;
	
	Возврат СтатусыЗаказов_УН;
	
КонецФункции

#КонецОбласти

#Область ПараметрыОбмена

Функция ПараметрыОбмена() Экспорт
	
	ПараметрыОбмена = Кеш("ПараметрыОбмена", Ложь);
	
	Если ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Возврат ПараметрыОбмена;
	КонецЕсли;
	
	МассивПараметровОбмена = Новый Массив;
	
	// ======================
	// ПАРАМЕТРЫ
	
	// Причина отмены продавцом
	МассивПараметровОбмена.Добавить(ПараметрОбмена(
		"ПричинаОтменыПродавцом",
		КомандыОбмена().ЗагрузкаЗаказов.Идентификатор,
		Тип("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Для автоматической отмены заказа, если при загрузке было неудачное проведение"
	));
	
	// Причина отмены покупателем
	МассивПараметровОбмена.Добавить(ПараметрОбмена(
		"ПричинаОтменыПокупателем",
		КомандыОбмена().ЗагрузкаЗаказов.Идентификатор,
		Тип("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Для отмены заказа при загрузке, если он имеет статус 'ОтмененПокупателем'"
	));
	
	// Причина отмены покупателем
	МассивПараметровОбмена.Добавить(ПараметрОбмена(
		"ПорцияПолученияЗаказов",
		КомандыОбмена().ЗагрузкаЗаказов.Идентификатор,
		ТипЧисло(3, 0, Истина),
		"Определяет какое кол-во заказов будет загружено за один запрос.
		|Рекомендуется не более 50-100 шт. Если не указано, то равно 10.",
		Ложь  // Обязательный
	));
	
	// ======================
	
	Для Каждого ПараметрОбмена Из МассивПараметровОбмена Цикл
		ПараметрыОбмена.Вставить(ПараметрОбмена.Имя, ПараметрОбмена);
	КонецЦикла;
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Функция ПараметрОбмена(Имя, Знач КомандыОбмена, Тип, Описание, Обязательный = Истина)
	
	КомандыОбмена = Новый Структура(КомандыОбмена);
	
	Если ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
		ТипЗначения = Тип;
	ИначеЕсли ТипЗнч(Тип) = Тип("Тип") Тогда
		ТипЗначения = Новый ОписаниеТипов(НовыйМассив(Тип));
	ИначеЕсли ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипЗначения = Новый ОписаниеТипов(Тип);
	Иначе
		ВызватьИсключение "Недопустимый тип значения аргумента 'Тип': " + ТипЗнч(Тип);
	КонецЕсли;
	
	Возврат Новый Структура(
		"Имя, КомандыОбмена, ТипЗначения, Описание, Обязательный",
		Имя, КомандыОбмена, ТипЗначения, Описание, Обязательный
	);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СервисИнтеграции

Функция Контекст(Настройки)
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("Настройки", Настройки);
	
	Контекст.Вставить("Соединение", СоединениеСервисаИнтеграции(Настройки));
	Контекст.Вставить("СоединениеФайлы", СоединениеСервисаФайлов(Настройки));
	
	Контекст.Вставить("КлючИД");
	Контекст.Вставить("КлючAPI");
	Контекст.Вставить("ВерсияAPI");
	
	Контекст.Вставить("Параметры", Новый Структура);
	
	Возврат Контекст;
	
КонецФункции

Процедура УстановитьКонтекстНастройкиОбмена(Контекст, СтрокаНастройкиОбмена)
	
	Контекст.КлючИД = СтрокаНастройкиОбмена.КлючИД;
	Контекст.КлючAPI = КлючAPI(Контекст.Настройки, СтрокаНастройкиОбмена.КлючИД);
	Контекст.ВерсияAPI = СтрокаНастройкиОбмена.ВерсияAPI;
	
	Контекст.Параметры.Очистить();
	
	СтруктураПоиска = Новый Структура("НастройкаИд", СтрокаНастройкиОбмена.Ид);
	СтрокиПараметров = Контекст.Настройки.ПараметрыОбмена.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрТаб Из СтрокиПараметров Цикл
		Контекст.Параметры.Вставить(СтрТаб.Имя, СтрТаб.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция КонтекстВызоваСервиса(Организация, Параметры = Неопределено, ВерсияAPI = Неопределено)
	
	Настройки = Настройки();
	
	Контекст = Контекст(Настройки);
	
	СтрокаКлюча = Настройки.КлючиAPI.Найти(Организация, "Владелец");
	
	Если СтрокаКлюча = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаКлюча.КлючAPI)
		Тогда
		ВызватьИсключениеОтсутствуетКлючAPI(Организация);
	КонецЕсли;
	
	Контекст.КлючИД = СтрокаКлюча.Ид;
	Контекст.КлючAPI = СтрокаКлюча.КлючAPI;
	Контекст.ВерсияAPI = ЕслиПусто(ВерсияAPI, "v1");
	Контекст.Параметры = ЕслиПусто(Параметры, Новый Структура);
	
	Возврат Контекст;
	
КонецФункции

Функция СоединениеСервисаИнтеграции(Настройки)
	
	ЗащищенноеСоединение = Неопределено;
	Если Настройки.ЗащищенноеСоединениеСервисаИнтеграции Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	ПортСервисаИнтеграции = Неопределено;
	Если ЗначениеЗаполнено(Настройки.ПортСервисаИнтеграции) Тогда
		ПортСервисаИнтеграции = Настройки.ПортСервисаИнтеграции;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		Настройки.АдресСервисаИнтеграции,
		ПортСервисаИнтеграции,
		Настройки.ПользовательСервисаИнтеграции,
		Настройки.ПарольСервисаИнтеграции,
		,  // TODO: добавить прокси?
		Настройки.ТаймаутСервисаИнтеграции,
		ЗащищенноеСоединение
	);
	
	Возврат Соединение;
	
КонецФункции

Функция СоединениеСервисаФайлов(Настройки)
	
	ЗащищенноеСоединение = Неопределено;
	Если Настройки.ЗащищенноеСоединениеСервисаФайлов Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	ПортСервисаФайлов = Неопределено;
	Если ЗначениеЗаполнено(Настройки.ПортСервисаФайлов) Тогда
		ПортСервисаФайлов = Настройки.ПортСервисаФайлов;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		Настройки.АдресСервисаФайлов,
		ПортСервисаФайлов,
		Настройки.ПользовательСервисаФайлов,
		Настройки.ПарольСервисаФайлов,
		,  // TODO: добавить прокси?
		Настройки.ТаймаутСервисаФайлов,
		ЗащищенноеСоединение
	);
	
	Возврат Соединение;
	
КонецФункции

Функция АдресРесурсаСервисаИнтеграции(ИмяРесурса, Настройки, ВерсияAPI)
	
	ЭндпоинтыРесурсов = Новый Соответствие;
	
	ЭндпоинтыРесурсов["ЗаказыСписок"] = "orders/";
	ЭндпоинтыРесурсов["РеквизитыСпискаЗаказов"] = "orders/";
	ЭндпоинтыРесурсов["ЗаказыОбмен"] = "orders/exchange/";
	ЭндпоинтыРесурсов["ЗаказыОбменСдвинутьДатуИзменения"] = "orders/exchange/";
	ЭндпоинтыРесурсов["ЗаказыКоманды"] = "orders/{Идентификатор}/command/{ИмяКоманды}/";
	
	ЭндпоинтыРесурсов["ПоставкиКоманды"] = "supplies/{Идентификатор}/command/{ИмяКоманды}/";
	
	ЭндпоинтыРесурсов["ВнешниеСистемы"] = "external-systems/";
	ЭндпоинтыРесурсов["ВнешниеСистемыКоманды"] = "external-systems/{Идентификатор}/command/{ИмяКоманды}/";
	
	ЭндпоинтыРесурсов["ОтгрузкаСостояниеТоваровЗаказов"] = "shipment/products-state/";
	
	ЭндпоинтыРесурсов["КомандыРезультат"] = "commands/{Идентификатор}/";
	
	Эндпоинт = ЭндпоинтыРесурсов.Получить(ИмяРесурса);
	Если НЕ ЗначениеЗаполнено(Эндпоинт) Тогда
		ВызватьИсключение "Неизвестный эндпоинт сервиса интеграции!";
	КонецЕсли;
	
	АдресРесурса = СтрШаблон(
		"/%1/hs/mi/v%2/%3/",
		Настройки.РазмещениеAPIСервисаИнтеграции,
		ВерсияAPI,
		Эндпоинт
	);
	
	Возврат АдресРесурса;
	
КонецФункции

Функция ДобавитьПараметрыЗапроса(ПараметрыЗапроса, Знач АдресРесурса)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Возврат АдресРесурса;
	КонецЕсли;
	
	ЧастиАдресаРесурса = Новый Массив;
	ЧастиАдресаРесурса.Добавить(АдресРесурса);
	ЧастиАдресаРесурса.Добавить("?");
	
	ПараметрыАдреса = Новый Массив;
	Для Каждого Элемент Из ПараметрыЗапроса Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ЗначениеПараметра = Элемент.Значение;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ЗначениеПараметра = Формат(Элемент.Значение, "ЧРД=.; ЧН=0; ЧГ=0");
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ЗначениеПараметра = XMLСтрока(Элемент.Значение);
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			ЗначениеПараметра = Формат(Элемент.Значение, "БЛ=0; БИ=1");
			
		Иначе
			ЗначениеПараметра = Строка(Элемент.Значение);
		КонецЕсли;
		
		ПараметрыАдреса.Добавить(СтрШаблон("%1=%2", Элемент.Ключ, ЗначениеПараметра));

	КонецЦикла;
	
	ЧастиАдресаРесурса.Добавить(СтрСоединить(ПараметрыАдреса, "&"));
	
	Возврат СтрСоединить(ЧастиАдресаРесурса);
	
КонецФункции

Функция ДобавитьПараметрыURL(ПараметрыURL, Знач АдресРесурса)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыURL) Тогда
		Возврат АдресРесурса;
	КонецЕсли;
	
	Для Каждого Элемент Из ПараметрыURL Цикл
		АдресРесурса = СтрЗаменить(
			АдресРесурса,
			СтрШаблон("{%1}", Элемент.Ключ),
			Элемент.Значение
		);
	КонецЦикла;
	
	Возврат АдресРесурса;
	
КонецФункции

Функция ЗаголовкиЗапросаСервисаИнтеграции(КлючAPI)
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("api-key", КлючAPI);
	
	Возврат ЗаголовкиЗапроса;
	
КонецФункции

Функция ЗаголовкиЗапросаСервисаФайлов()
	
	ЗаголовкиЗапроса = Новый Соответствие;
	
	Возврат ЗаголовкиЗапроса;
	
КонецФункции

Функция ОписаниеСоединенияРесурса(HTTPСоединение, АдресРесурса, HTTPМетод)
	Возврат СтрШаблон(
		"Запрос сервиса интеграции:
		|сервер: %1:%2 (%3, таймаут %4)
		|ресурс: %5 %6",
		HTTPСоединение.Сервер, HTTPСоединение.Порт,
		?(HTTPСоединение.ЗащищенноеСоединение = Неопределено, "http", "https"),
		HTTPСоединение.Таймаут,
		HTTPМетод, АдресРесурса
	)
КонецФункции

Функция ВыполнитьЗапросСервисаИнтеграции(Соединение, HTTPЗапрос, HTTPМетод, ИсключениеЕслиНеуспешныйОтвет = Истина)
	
	Замер = Замер();
	ЛогОтладка(ОписаниеСоединенияРесурса(Соединение, HTTPЗапрос.АдресРесурса, HTTPМетод));
	
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	Исключение
		ЛогОшибка(СтрШаблон(
			"Ошибка запроса сервиса интеграции!
			|время ожидания: %1
			|текст ошибки:
			|%2",
			ПотраченоВремени(Замер), ОписаниеОшибки()
		));
		БроситьИсключение(, ИнформацияОбОшибке());
	КонецПопытки;
	
	ЛогОтладка(СтрШаблон(
		"Получен ответ сервиса интеграции!
		|время ожидания: %1
		|код состояния: %2",
		ПотраченоВремени(Замер), HTTPОтвет.КодСостояния
	));
	
	УспешныеКодыСостояния = НовыйМассив(200, 201, 204);
	
	УспешныйОтвет = (УспешныеКодыСостояния.Найти(HTTPОтвет.КодСостояния) <> Неопределено);
	
	Если НЕ УспешныйОтвет И ИсключениеЕслиНеуспешныйОтвет Тогда
		// TODO: идентифицировать тип ошибки сервиса интеграции
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		ЛогОшибка(СтрШаблон(
			"Ошибка запроса сервиса интеграции!
			|код состояния: %1
			|тело ответа:
			|%2",
			HTTPОтвет.КодСостояния, ТелоОтвета
		));
		БроситьИсключение(, ТелоОтвета);
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция ЗапросСервисаИнтеграции(Контекст, ИмяРесурса, Метод,
								Знач ПараметрыURL = Неопределено, Знач ПараметрыЗапроса = Неопределено, Знач Данные = Неопределено,
								ИсключениеЕслиНеуспешныйОтвет = Истина, Знач ДопЗаголовкиЗапроса = Неопределено)
	
	АдресРесурса = АдресРесурсаСервисаИнтеграции(
		ИмяРесурса,
		Контекст.Настройки,
		Контекст.ВерсияAPI
	);
	
	ДопЗаголовкиЗапроса = ЕслиПусто(ДопЗаголовкиЗапроса, новый Соответствие);
	ЗаголовкиЗапроса = ЗаголовкиЗапросаСервисаИнтеграции(Контекст.КлючAPI);
	Для Каждого Элемент Из ДопЗаголовкиЗапроса Цикл
		ЗаголовкиЗапроса.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ПараметрыURL = ЕслиПусто(ПараметрыURL, Новый Структура);
	АдресРесурса = ДобавитьПараметрыURL(ПараметрыURL, АдресРесурса);
	
	ПараметрыЗапроса = ЕслиПусто(ПараметрыЗапроса, Новый Структура);
	АдресРесурса = ДобавитьПараметрыЗапроса(ПараметрыЗапроса, АдресРесурса);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовкиЗапроса);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			СтрокаJSON = Данные;
		Иначе
			СтрокаJSON = ДанныеКакJSON(Данные);
		КонецЕсли;
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	КонецЕсли;
	
	HTTPОтвет = ВыполнитьЗапросСервисаИнтеграции(Контекст.Соединение, HTTPЗапрос, Метод, ИсключениеЕслиНеуспешныйОтвет);
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция КомандыПолучитьРезультатСервиса(Организация, ИдентификаторыЗапросов) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация);
	
	РезультатыЗапросов = Новый Массив;
	ПоляТипаДата = "processed_date";  // TODO: дополнить?
	
	Для Каждого Идентификатор Из ИдентификаторыЗапросов Цикл
		
		Результат = Новый Структура;
		Результат.Вставить("Идентификатор", Идентификатор);
		Результат.Вставить("Обработано",	Ложь);
		Результат.Вставить("ДатаОбработки",	'00010101');
		Результат.Вставить("Ошибка",		Ложь);
		Результат.Вставить("ТекстОшибки",	"");
		Результат.Вставить("Результат",		Неопределено);
		
		Попытка
			HTTPОтвет = ЗапросСервисаИнтеграции(
				Контекст,
				"КомандыРезультат",
				"GET",
				Новый Структура("Идентификатор", Идентификатор)
			);
			
			СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
			
			ЛогОтладка(СтрШаблон(
				"Метод: 'КомандыПолучитьРезультатСервиса'
				|Идентификатор: %1
				|Тело ответа:
				|%2",
				Идентификатор,
				СтрокаJSON
			));
			
			Данные = ДанныеИзJSON(СтрокаJSON, , ПоляТипаДата);
			
			Результат.Обработано	= Данные.processed;
			Результат.ДатаОбработки	= Данные.processed_date;
			Результат.Ошибка		= Данные.error;
			Результат.ТекстОшибки	= Данные.error_text;
			Результат.Результат		= Данные.result;
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			
			Результат.Ошибка		= Истина;
			Результат.ТекстОшибки	= ТекстОшибки;
			
		КонецПопытки;
		
		РезультатыЗапросов.Добавить(Результат);
		
	КонецЦикла;
	
	Возврат РезультатыЗапросов;
	
КонецФункции

#КонецОбласти

#Область Справочники

Функция ВнешниеСистемы_Найти(Организация, ИмяМаркетплейса) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ВнешниеСистемы",
		"GET"
	);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ВнешниеСистемы_Найти'
		|Организация: %1
		|ИмяМаркетплейса: %2
		|Тело ответа:
		|%3",
		Организация,
		ИмяМаркетплейса,
		СтрокаJSON
	));
	
	ДанныеОтвета = ДанныеИзJSON(СтрокаJSON);
	
	ВнешниеСистемы = Новый Массив;
	Для Каждого Элемент Из ДанныеОтвета.external_systems Цикл
		
		Если СтрНайти(ВРег(Элемент.external_system.name), "FBO") Тогда
			// FBO нам тут не нужны!
			Продолжить;
		КонецЕсли;
		
		Если НРег(Элемент.marketplace_name) = НРег(ИмяМаркетплейса) Тогда
			ВнешниеСистемы.Добавить(Элемент.external_system);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВнешниеСистемы.Количество() = 1 Тогда
		Возврат ВнешниеСистемы[0];
		
	ИначеЕсли ВнешниеСистемы.Количество() > 1 Тогда
		ВызватьИсключение СтрШаблон(
			"Неоднозначное определение внешней системы!
			|Организация: %1
			|Маркетплейс: %2",
			Организация, ИмяМаркетплейса
		);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Отправления

Функция ЗаказыТребующиеРазбивкиОтправлений(Организация, ПараметрыМаркетплейса) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, ПараметрыМаркетплейса);
	
	ТипыПричинПриостановки = ТипыПричинПриостановкиЗаказов();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("suspended", 1);
	ПараметрыЗапроса.Вставить("suspended_reason_type", ТипыПричинПриостановки.ТребуетсяРазделениеОтправлений);
	ПараметрыЗапроса.Вставить("limit", 20);
	//ПараметрыЗапроса.Вставить("next", "");  // TODO: при необходимости добавить пагинацию
	
	HTTPОтвет = ЗапросСервисаИнтеграции(Контекст, "ЗаказыСписок", "GET", , ПараметрыЗапроса);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ЗакатыТребующиеРазбивкиОтправлений'
		|Тело ответа:
		|%1",
		СтрокаJSON
	));
	
	ПоляСТипомДата = Новый Массив;
	ПоляСТипомДата.Добавить("date_end");
	ПоляСТипомДата.Добавить("change_date");
	ПоляСТипомДата.Добавить("date");
	ПоляСТипомДата.Добавить("shipment_date");
	
	Попытка
		ДанныеОтвета = ДанныеИзJSON(СтрокаJSON,, ПоляСТипомДата);
	Исключение
		БроситьИсключение(, ИнформацияОбОшибке());
	КонецПопытки;
	
	ЗаказыДляРазбивки = Новый Структура;
	ЗаказыДляРазбивки.Вставить("Заказы", Новый Массив);
	
	Для Каждого ДанныеЗаказа Из ДанныеОтвета.orders Цикл
		Приостановка = ЗначениеСвойства(ДанныеЗаказа, "suspended");
		
		Если НЕ ЗначениеЗаполнено(Приостановка)
			ИЛИ Приостановка.reason_type <> ТипыПричинПриостановки.ТребуетсяРазделениеОтправлений Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаказа = СтрокаЗаказаДляРазбивкиОтправлений();
		
		СтрокаЗаказа.Идентификатор = ДанныеЗаказа.uuid;
		
		СтрокаЗаказа.Заказ = ДокументПоОписаниюТипаДокумента(
			ЗначениеСвойства(ДанныеЗаказа, "doc_type"),
			ЗначениеСвойства(ДанныеЗаказа, "doc_id")
		);
		
		ЗаказыДляРазбивки.Заказы.Добавить(СтрокаЗаказа);
	КонецЦикла;
	
	Возврат ЗаказыДляРазбивки;
	
КонецФункции

Функция СтрокаЗаказаДляРазбивкиОтправлений()
	
	СтрокаЗаказа = Новый Структура;
	
	СтрокаЗаказа.Вставить("Идентификатор");
	СтрокаЗаказа.Вставить("Заказ");
	
	Возврат СтрокаЗаказа;
	
КонецФункции

Процедура ОтправитьЗаказНаСборкуСРазделением(Организация, ПараметрыМаркетплейса, РезультатРазделения) Экспорт

	Контекст = КонтекстВызоваСервиса(Организация, ПараметрыМаркетплейса);
	
	УИДЗаказаУН = РезультатРазделения.Идентификатор;
	
	Данные = Новый Структура;
	Данные.Вставить("shipments", Новый Массив);
	
	Для Каждого Коробка Из РезультатРазделения.КоробкиЗаказа Цикл
		
		box = Новый Структура("products", Новый Массив);
		Для Каждого СтрокаЗаказа Из Коробка.Товары Цикл
			product = Новый Структура("code, qty", СтрокаЗаказа.Код, СтрокаЗаказа.Количество);
			box.products.Добавить(product);
		КонецЦикла;
		
		Данные.shipments.Добавить(box);
	КонецЦикла;
	
	ЗаказыОбработатьКоманду(УИДЗаказаУН, "pickup", Данные, Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область Отгрузка

Функция ВнешниеСистемыКоманда_АктивныеПоставки(Организация, СтруктураПараметров) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, СтруктураПараметров);
	
	Идентификатор = СтруктураПараметров.ИдВнешнейСистемы;
	
	ПараметрыURL = Новый Структура;
	ПараметрыURL.Вставить("Идентификатор",	Идентификатор);
	ПараметрыURL.Вставить("ИмяКоманды",		"active_supply");
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ВнешниеСистемыКоманды",
		"POST",
		ПараметрыURL
		
	);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ВнешниеСистемыКоманда_АктивныеПоставки'
		|Организация: %1
		|Идентификатор (внешней системы): %2
		|Тело ответа:
		|%3",
		Организация,
		Идентификатор,
		СтрокаJSON
	));
	
	ДанныеОтвета = ДанныеИзJSON(СтрокаJSON);
	
	Возврат ДанныеОтвета.command_id;
	
КонецФункции

Функция ВнешниеСистемыКоманда_СоздатьПоставку(Организация, СтруктураПараметров) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, СтруктураПараметров);
	
	Идентификатор = СтруктураПараметров.ИдВнешнейСистемы;
	
	ПараметрыURL = Новый Структура;
	ПараметрыURL.Вставить("Идентификатор",	Идентификатор);
	ПараметрыURL.Вставить("ИмяКоманды",		"create_supply");
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ВнешниеСистемыКоманды",
		"POST",
		ПараметрыURL
		
	);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ВнешниеСистемыКоманда_СоздатьПоставку'
		|Организация: %1
		|Идентификатор (внешней системы): %2
		|Тело ответа:
		|%3",
		Организация,
		Идентификатор,
		СтрокаJSON
	));
	
	ДанныеОтвета = ДанныеИзJSON(СтрокаJSON);
	
	Возврат ДанныеОтвета.command_id;
	
КонецФункции

Функция ПоставкиКоманда_ЗакрытьПоставку(Организация, СтруктураПараметров) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, СтруктураПараметров);
	
	Идентификатор = СтруктураПараметров.ИдПоставки;
	
	ПараметрыURL = Новый Структура;
	ПараметрыURL.Вставить("Идентификатор",	Идентификатор);
	ПараметрыURL.Вставить("ИмяКоманды",		"close");
	
	Данные = Новый Структура;
	Данные.Вставить("orders", СтруктураПараметров.НомераЗаказов);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ПоставкиКоманды",
		"POST",
		ПараметрыURL, ,
		Данные
	);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ПоставкиКоманда_ЗакрытьПоставку'
		|Организация: %1
		|Идентификатор (поставки): %2
		|Тело ответа:
		|%3",
		Организация,
		Идентификатор,
		СтрокаJSON
	));
	
	ДанныеОтвета = ДанныеИзJSON(СтрокаJSON);
	
	Возврат ДанныеОтвета.command_id;
	
КонецФункции

Функция ПоставкиКоманда_ДобавитьЗаказы(Организация, СтруктураПараметров) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, СтруктураПараметров);
	
	Идентификатор = СтруктураПараметров.ИдПоставки;
	
	ПараметрыURL = Новый Структура;
	ПараметрыURL.Вставить("Идентификатор",	Идентификатор);
	ПараметрыURL.Вставить("ИмяКоманды",		"add_orders");
	
	Данные = Новый Структура;
	Данные.Вставить("orders", СтруктураПараметров.НомераЗаказов);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ПоставкиКоманды",
		"POST",
		ПараметрыURL, ,
		Данные
	);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЛогОтладка(СтрШаблон(
		"Метод: 'ПоставкиКоманда_ДобавитьЗаказы'
		|Организация: %1
		|Идентификатор (поставки): %2
		|Тело ответа:
		|%3",
		Организация,
		Идентификатор,
		СтрокаJSON
	));
	
	ДанныеОтвета = ДанныеИзJSON(СтрокаJSON);
	
	Возврат ДанныеОтвета.command_id;
	
КонецФункции

Функция УстановитьСостояниеОтгрузкиТоваровЗаказов(Организация, ПакетСтрокОтгрузки) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, ПакетСтрокОтгрузки);
	
	Данные = Новый Структура;
	Данные.Вставить("external_system",	Новый Структура("uuid", ПакетСтрокОтгрузки.ИдВнешнейСистемы));
	Данные.Вставить("marketplace_name",	ПакетСтрокОтгрузки.ИмяМаркетплейса);
	Данные.Вставить("products",			Новый Массив);
	
	ЗаказыСтрок = Новый Соответствие;
	Для Каждого СтруктураСтроки Из ПакетСтрокОтгрузки.Строки Цикл
		Элемент = Новый Структура;
		
		Элемент.Вставить("order",			СтруктураСтроки.ЗаказКлиента);
		Элемент.Вставить("product",			СтруктураСтроки.Номенклатура);
		Элемент.Вставить("row_id",			СтруктураСтроки.ИдентификаторСтроки);
		Элемент.Вставить("selected",		СтруктураСтроки.Выбор);
		Элемент.Вставить("fulfilled",		СтруктураСтроки.Отработан);
		
		Данные.products.Добавить(Элемент);
		ЗаказыСтрок.Вставить(СтруктураСтроки.ЗаказКлиента);
		
	КонецЦикла;
	
	ПараметрыСериализатора = Новый Структура;
	ПараметрыСериализатора.Вставить("НоменклатураСериализаторКраткий");
	ПараметрыСериализатора.Вставить("ЗаказКлиентаСериализаторКраткий");
	ПараметрыСериализатора.Вставить("Заказы", КлючиСоответствия(ЗаказыСтрок));
	
	ДанныеJSON = ДанныеКакJSON(Данные, ПараметрыСериализатора);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ОтгрузкаСостояниеТоваровЗаказов",
		"PATCH",
		,  // ПараметрыURL
		,  // ПараметрыЗапроса
		ДанныеJSON
	);
	
КонецФункции

Функция ТекущееСостояниеОтгрузкиТоваровЗаказов(Организация, ПакетЗаказов) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, ПакетЗаказов);
	
	Данные = Новый Структура;
	Данные.Вставить("external_system",	Новый Структура("uuid", ПакетЗаказов.ИдВнешнейСистемы));
	Данные.Вставить("marketplace_name",	ПакетЗаказов.ИмяМаркетплейса);
	Данные.Вставить("orders",			ПакетЗаказов.Заказы);
	
	ПараметрыСериализатора = Новый Структура;
	ПараметрыСериализатора.Вставить("ЗаказКлиентаСериализаторКраткий");
	ПараметрыСериализатора.Вставить("Заказы", ПакетЗаказов.Заказы);
	
	ДанныеJSON = ДанныеКакJSON(Данные, ПараметрыСериализатора);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"ОтгрузкаСостояниеТоваровЗаказов",
		"POST",
		,  // ПараметрыURL
		,  // ПараметрыЗапроса
		ДанныеJSON
	);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ПоляСТипомДата = Новый Массив;
	ПоляСТипомДата.Добавить("selected_date");
	ПоляСТипомДата.Добавить("fulfilled_date");
	ПоляСТипомДата.Добавить("date");
	
	Попытка
		ДанныеОтвета = ДанныеИзJSON(СтрокаJSON,, ПоляСТипомДата);
	Исключение
		БроситьИсключение(, ИнформацияОбОшибке());
	КонецПопытки;
	
	ТекущееСостояние = Новый Структура;
	ТекущееСостояние.Вставить("Заказы", Новый Соответствие);
	ТекущееСостояние.Вставить("Товары", Новый Соответствие);
	ТекущееСостояние.Вставить("Поставки", Новый Соответствие);
	ТекущееСостояние.Вставить("Отправления", Новый Соответствие);
	ТекущееСостояние.Вставить("Строки", Новый Соответствие);
	
	// Реквизиты заказов
	РеквизитыЗаказов = ЗначениеСвойства(ДанныеОтвета, "orders", Новый Массив);
	Для Каждого order Из РеквизитыЗаказов Цикл
		
		СтруктураЗаказа = Новый Структура;
		
		СтруктураЗаказа.Вставить("ДатаЗаказа", order.date);
		
		ТекущееСостояние.Заказы.Вставить(order.number, СтруктураЗаказа);
		
	КонецЦикла;
	
	// Товары заказов
	Для Каждого product Из ДанныеОтвета.products Цикл
		
		СтруктураТовара = Новый Структура;
		
		СтруктураТовара.Вставить("Штрихкод", product.external_system_barcode);
		
		Ключ = product.product_id;
		ТекущееСостояние.Товары.Вставить(Ключ, СтруктураТовара);
		
	КонецЦикла;
	
	// Поставки заказов
	Для Каждого row Из ДанныеОтвета.supplies Цикл
		
		СтруктураПоставки = Новый Структура;
		
		СтруктураПоставки.Вставить("НомерПоставки", row.supply_number);
		
		Ключ = row.order;
		ТекущееСостояние.Поставки.Вставить(Ключ, СтруктураПоставки);
		
	КонецЦикла;
	
	// Отправления товаров заказов
	Для Каждого row Из ДанныеОтвета.shipments Цикл
		
		СтруктураОтправления = Новый Структура;
		
		СтруктураОтправления.Вставить("НомерДоставки", row.delivery_number);
		СтруктураОтправления.Вставить("Количество", row.qty);
		
		Ключ = row.order + row.product_id;
		ОтправленияТовара = ТекущееСостояние.Отправления.Получить(Ключ);
		Если ОтправленияТовара = Неопределено Тогда
			ОтправленияТовара = Новый Массив;
			ТекущееСостояние.Отправления.Вставить(Ключ, ОтправленияТовара);
		КонецЕсли;
		ОтправленияТовара.Добавить(СтруктураОтправления);
		
	КонецЦикла;
	
	// Состояние выбора заказов
	Для Каждого row Из ДанныеОтвета.order_rows Цикл
		
		СтруктураСтроки = Новый Структура;
		
		СтруктураСтроки.Вставить("НомерДоставки",	row.delivery_number);
		СтруктураСтроки.Вставить("ДатаВыбора",		row.selected_date);
		СтруктураСтроки.Вставить("ДатаОбработки",	row.fulfilled_date);
		
		Ключ = row.order + row.row_id;
		ТекущееСостояние.Строки.Вставить(Ключ, СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат ТекущееСостояние;
	
КонецФункции

Функция РеквизитыЗаказовМаркетплейсов(Организация, ПакетЗаказов) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, ПакетЗаказов);
	
	Данные = Новый Структура;
	Данные.Вставить("marketplace_name",	ПакетЗаказов.ИмяМаркетплейса);
	Данные.Вставить("orders",			ПакетЗаказов.Заказы);
	
	ПараметрыСериализатора = Новый Структура;
	ПараметрыСериализатора.Вставить("ЗаказКлиентаСериализаторИдентификатор");
	ПараметрыСериализатора.Вставить("Заказы", ПакетЗаказов.Заказы);
	
	ДанныеJSON = ДанныеКакJSON(Данные, ПараметрыСериализатора);
	
	HTTPОтвет = ЗапросСервисаИнтеграции(
		Контекст,
		"РеквизитыСпискаЗаказов",
		"POST",
		,  // ПараметрыURL
		,  // ПараметрыЗапроса
		ДанныеJSON
	);
	
	СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ПоляСТипомДата = Новый Массив;
	ПоляСТипомДата.Добавить("date");
	
	Попытка
		ДанныеОтвета = ДанныеИзJSON(СтрокаJSON,, ПоляСТипомДата);
	Исключение
		БроситьИсключение(, ИнформацияОбОшибке());
	КонецПопытки;
	
	РеквизитыЗаказов = Новый Соответствие;
	
	// Реквизиты заказов
	СписокЗаказовМП = ЗначениеСвойства(ДанныеОтвета, "orders", Новый Массив);
	Для Каждого order Из СписокЗаказовМП Цикл
		
		ЗначенияРеквизитов = Новый Структура;
		
		ЗначенияРеквизитов.Вставить("Дата",						order.date);
		ЗначенияРеквизитов.Вставить("НомерЗаказаМаркетплейса",	order.number);
		
		ЗаказСсылка = ДокументПоОписаниюТипаДокумента(order.doc_type, order.doc_id);
		
		РеквизитыЗаказов.Вставить(ЗаказСсылка, ЗначенияРеквизитов);
		
	КонецЦикла;
	
	Возврат РеквизитыЗаказов;
	
КонецФункции

// Перенесено из старого модуля "УчетНДСУП"
// Заменяет ставки НДС в табличной части документа на актуальную на дату документа,
// а также пересчитывает соответствующие суммы НДС.
//
// Параметры:
//  Документ - ДокументОбъект - объект документа, в табличной части которого необходимо заменить ставки НДС
//  ТабличнаяЧасть - ТабличнаяЧасть - табличная часть документа
//  СтруктураПересчетаСуммы - Структура - см. ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ().
//
Процедура СкорректироватьСтавкуНДСВТЧДокумента(Документ, ТабличнаяЧасть, СтруктураПересчетаСуммы = Неопределено)
	
	Если Не ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПересчетаСуммы = Неопределено Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Документ);
	КонецЕсли;
	НалогообложениеНДС = Неопределено;
	СтруктураПересчетаСуммы.Свойство("НалогообложениеНДС", НалогообложениеНДС);
	ДатаАктуальности = ?(ЗначениеЗаполнено(Документ.Дата), Документ.Дата, ТекущаяДатаСеанса());
	
	ЕстьСуммаПродажи = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "СуммаПродажи");
	
	ПоляНДС = Новый Структура("СуммаНДС, СуммаСНДС, СуммаПродажиНДС, СуммаВознаграждения, СуммаНДСВознаграждения");
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		//Если УчетНДСУП.СкорректироватьСтавкуНДС(СтрокаТЧ.СтавкаНДС, ДатаАктуальности) Тогда
		Если СкорректироватьСтавкуНДС(СтрокаТЧ.СтавкаНДС, ДатаАктуальности) Тогда
			ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТЧ.СтавкаНДС);
			
			ПоляНДС.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаТЧ.Сумма, ПроцентНДС,
				СтруктураПересчетаСуммы.ЦенаВключаетНДС, НалогообложениеНДС);
			ПоляНДС.СуммаСНДС = СтрокаТЧ.Сумма + ?(СтруктураПересчетаСуммы.ЦенаВключаетНДС, 0, ПоляНДС.СуммаНДС);
			Если ЕстьСуммаПродажи Тогда
				ПоляНДС.СуммаПродажиНДС = Окр(СтрокаТЧ.СуммаПродажи * ПроцентНДС / (100 + ПроцентНДС), 2, РежимОкругления.Окр15как20);
			Иначе
				ПоляНДС.СуммаПродажиНДС = 0;
			КонецЕсли;
			ПоляНДС.СуммаВознаграждения = 0;
			ПоляНДС.СуммаНДСВознаграждения = 0;
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПоляНДС);
		КонецЕсли;
		
		// Код добавлен для облегчения перехода с 2.4 на 2.5.
		// Позволяет заполнить ставки НДС в новых документах, которые созданы на основании или копированием еще необновленных документов продажи/закупки.
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) И ЗначениеЗаполнено(НалогообложениеНДС) Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "Номенклатура") Тогда
				СтрокаТЧ.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(ДатаАктуальности, СтрокаТЧ.Номенклатура, НалогообложениеНДС);
			Иначе
				СтрокаТЧ.СтавкаНДС = УчетНДСУП.СтавкаНДСПоТипуНалогообложения(НалогообложениеНДС);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Перенесено из старого модуля "УчетНДСУП"
// Заменяет переданную ставку НДС на актуальную на указанную дату.
//
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - значение ставки НДС, которое необходимо скорректировать
//  Дата - Дата - дата на которую необходимо получить актуальную ставку НДС.
//
// Возвращаемое значение:
//  Булево - Истина, если значение ставки НДС было заменено.
//
Функция СкорректироватьСтавкуНДС(СтавкаНДС, Дата)
	
	НоваяСтавкаНДС = Неопределено;
	
	ДатаСтавки = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	УчетНДСЛокализация_СкорректироватьСтавкуНДС(НоваяСтавкаНДС, СтавкаНДС, ДатаСтавки);
	
	Если НоваяСтавкаНДС <> Неопределено И СтавкаНДС <> НоваяСтавкаНДС Тогда
		СтавкаНДС = НоваяСтавкаНДС;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Перенесено из старого модуля "УчетНДСЛокализация"
Процедура УчетНДСЛокализация_СкорректироватьСтавкуНДС(НоваяСтавкаНДС, СтавкаНДС, Знач Дата)
	
	мНДС = УчетНДСЛокализация;
	
	//++ Локализация
	Если СтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18) И Дата >= '20190101' Тогда
		НоваяСтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20);
	ИначеЕсли СтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18_118) И Дата >= '20190101' Тогда
		НоваяСтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20_120);
	ИначеЕсли СтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20) И Дата < '20190101' Тогда
		НоваяСтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18);
	ИначеЕсли СтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20_120) И Дата < '20190101' Тогда
		НоваяСтавкаНДС = мНДС.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС18_118);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Этикетки

Функция СкачатьЭтикеткиТоваровЗаказов(Организация, ПакетСтрокЭтикеток) Экспорт
	
	Контекст = КонтекстВызоваСервиса(Организация, ПакетСтрокЭтикеток);
	НастройкиМаркетплейса = СтрокаНастройкиМаркетплейса(Контекст.Настройки, Организация, ПакетСтрокЭтикеток.Контрагент);
	
	Если НЕ ЗначениеЗаполнено(НастройкиМаркетплейса.КаталогЭтикеток) Тогда
		БроситьИсключение(, СтрШаблон(
			"Не определён каталог ресурса этикеток маркетплейса!.
			|Организация: %1
			|Имя маркетплейса: %2",
			Организация, ПакетСтрокЭтикеток.ИмяМаркетплейса
		));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкиМаркетплейса.ТипФайлаЭтикетки) Тогда
		БроситьИсключение(, СтрШаблон(
			"Не определён тип файлов этикеток!
			|Организация: %1
			|Имя маркетплейса: %2",
			Организация, ПакетСтрокЭтикеток.ИмяМаркетплейса
		));
	КонецЕсли;
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("НомерЗаказаМаркетплейса",	ТипСтрока(30));
	ТаблицаСтрок.Колонки.Добавить("ДатаЗаказаМаркетплейса",		ТипДата());
	ТаблицаСтрок.Колонки.Добавить("НомерДоставки",				ТипСтрока(255));
	Если ПакетСтрокЭтикеток.ЭтоКонтрагентСклад Тогда
		ТаблицаСтрок.Колонки.Добавить("ЗаказКлиента",				ТипСсылка(Тип("ДокументСсылка.ЗаказНаПеремещение")));
		ТаблицаСтрок.Колонки.Добавить("ИдентификаторСтроки",		ТипЧисло(10));
	Иначе
		ТаблицаСтрок.Колонки.Добавить("ЗаказКлиента",				ТипСсылка("ДокументСсылка.ЗаказКлиента"));
		ТаблицаСтрок.Колонки.Добавить("ИдентификаторСтроки",		ТипСтрока(40));
	КонецЕсли;
	
	Для Каждого Элемент Из ПакетСтрокЭтикеток.Строки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаСтрок.Добавить(), Элемент);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСтрок", ТаблицаСтрок);
	Запрос.УстановитьПараметр("ЭтоКонтрагентСклад", ПакетСтрокЭтикеток.ЭтоКонтрагентСклад);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.ЗаказКлиента КАК ЗаказКлиента,
	|	Таб.НомерЗаказаМаркетплейса КАК НомерЗаказаМаркетплейса,
	|	Таб.ДатаЗаказаМаркетплейса КАК ДатаЗаказаМаркетплейса,
	|	Таб.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таб.НомерДоставки КАК НомерДоставки
	|ПОМЕСТИТЬ ВТ_ТаблицаСтрок
	|ИЗ
	|	&ТаблицаСтрок КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСтрок.ДатаЗаказаМаркетплейса КАК ДатаЗаказа,
	|	ВТ_ТаблицаСтрок.НомерЗаказаМаркетплейса КАК НомерЗаказа,
	|	ЗаказыТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТ_ТаблицаСтрок.НомерДоставки КАК НомерДоставки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказыКлиента
	|		ПО (ЗаказыКлиента.Ссылка = ЗаказыТовары.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСтрок КАК ВТ_ТаблицаСтрок
	|		ПО (ВТ_ТаблицаСтрок.ЗаказКлиента = ЗаказыТовары.Ссылка)
	|			И (ВТ_ТаблицаСтрок.ИдентификаторСтроки = ЗаказыТовары.ИдентификаторСтроки)
	|ГДЕ
	|	НЕ &ЭтоКонтрагентСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаСтрок.ДатаЗаказаМаркетплейса,
	|	ВТ_ТаблицаСтрок.НомерЗаказаМаркетплейса,
	|	ЗаказыТовары.КодСтроки,
	|	ВТ_ТаблицаСтрок.НомерДоставки
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ЗаказыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ЗаказыНаПеремещение
	|		ПО (ЗаказыНаПеремещение.Ссылка = ЗаказыТовары.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаСтрок КАК ВТ_ТаблицаСтрок
	|		ПО (ВТ_ТаблицаСтрок.ЗаказКлиента = ЗаказыТовары.Ссылка)
	|			И (ВТ_ТаблицаСтрок.ИдентификаторСтроки = ЗаказыТовары.КодСтроки)
	|ГДЕ
	|	&ЭтоКонтрагентСклад";
	
	Результат = Новый Структура;
	Результат.Вставить("Строки", Новый Соответствие);
	
	КаталогКешаЭтикеток = КаталогКешаЭтикеток(Контекст);
	КаталогМаркетплейса = ПолучитьКаталог(КаталогКешаЭтикеток, ПакетСтрокЭтикеток.ИмяМаркетплейса);
	
	ЗаголовкиЗапроса = ЗаголовкиЗапросаСервисаФайлов();
	ШаблонАдресаРесурса = "/{КаталогЭтикеток}/{КаталогДаты}/{Файл}";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НастройкиМаркетплейса.ИспользоватьОтправления Тогда
			ИменаФайловЭтикеток = СтрРазделить(Выборка.НомерДоставки, Символы.ПС);
		Иначе
			ИменаФайловЭтикеток = НовыйМассив(Выборка.НомерЗаказа);
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура("Получен, ТекстОшибки, Файлы", Ложь, "", Новый Массив);
		
		КлючСтроки = Выборка.НомерЗаказа + XMLСтрока(Выборка.ИдентификаторСтроки);
		Результат.Строки[КлючСтроки] = СтруктураСтроки;
		
		Для Каждого ИмяФайлаЭтикетки Из ИменаФайловЭтикеток Цикл
		
			// TODO: узнать - бывает ли разные этикетки для разных заказов?
			ФайлЭтикетки = ФайлЭтикетки(
				КаталогМаркетплейса,
				Выборка.ДатаЗаказа,
				ИмяФайлаЭтикетки,
				НастройкиМаркетплейса.ТипФайлаЭтикетки
			);
			
			Если ФайлЭтикетки.Существует() Тогда
				СтруктураСтроки.Получен = Истина;
				СтруктураСтроки.Файлы.Добавить(ФайлЭтикетки.ПолноеИмя);
				Продолжить;
			КонецЕсли;
			
			КаталогФайлаЭтикетки = Новый Файл(ФайлЭтикетки.Путь);
			
			ПараметрыURL = Новый Структура;
			ПараметрыURL.Вставить("КаталогЭтикеток",	ЧастьURL(НастройкиМаркетплейса.КаталогЭтикеток));
			ПараметрыURL.Вставить("КаталогДаты",		КаталогФайлаЭтикетки.Имя);
			ПараметрыURL.Вставить("Файл",				ФайлЭтикетки.Имя);
			АдресРесурса = ДобавитьПараметрыURL(ПараметрыURL, ШаблонАдресаРесурса);  // образец: /foto/Markirovka/WB/2023_03_17/723308799.png
			
			//ПараметрыЗапроса = ЕслиПусто(ПараметрыЗапроса, Новый Структура);
			ПараметрыЗапроса = Новый Структура;
			АдресРесурса = ДобавитьПараметрыЗапроса(ПараметрыЗапроса, АдресРесурса);
			
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовкиЗапроса);
			
			Замер = Замер();
			
			ПредставлениеРесурса = СтрШаблон(
				"Сервер: %1
				|Ресурс: %2",
				Контекст.СоединениеФайлы.Сервер,
				АдресРесурса
			);
			
			Попытка
				HTTPОтвет = Контекст.СоединениеФайлы.ВызватьHTTPМетод("GET", HTTPЗапрос);
			Исключение
				СтруктураСтроки.ТекстОшибки = ОписаниеОшибки();
				ЛогОшибка(СтрШаблон(
					"Ошибка запроса сервиса файлов!
					|ресурс:
					|%1
					|время ожидания: %2
					|текст ошибки:
					|%3",
					ПредставлениеРесурса,
					ПотраченоВремени(Замер), СтруктураСтроки.ТекстОшибки
				));
				БроситьИсключение(, ИнформацияОбОшибке());
			КонецПопытки;
			
			ЛогОтладка(СтрШаблон(
				"Получен ответ сервиса файлов!
				|время ожидания: %1
				|код состояния: %2",
				ПотраченоВремени(Замер), HTTPОтвет.КодСостояния
			));
			
			Если HTTPОтвет.КодСостояния = 200 Тогда
				
				ДанныеОтвета = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
				
				Если ДанныеОтвета = Неопределено Тогда
					СтруктураСтроки.ТекстОшибки = СтрШаблон(
						"Пустое тело ответа!
						|%1",
						ПредставлениеРесурса
					);
					// TODO: записать ошибку в лог
					Продолжить;
				КонецЕсли;
				
				ДанныеОтвета.Записать(ФайлЭтикетки.ПолноеИмя);
				СтруктураСтроки.Файлы.Добавить(ФайлЭтикетки.ПолноеИмя);
				СтруктураСтроки.Получен = Истина;
				
				Продолжить;
			КонецЕсли;
			
			// Обработка ошибок
			
			Если HTTPОтвет.КодСостояния = 404 Тогда
				ТекстОшибки = "не найден на сервере";
			Иначе
				ТекстОшибки = HTTPОтвет.ПолучитьТелоКакСтроку();
			КонецЕсли;
			
			СтруктураСтроки.ТекстОшибки = СтрШаблон(
				"Не удалось получить файл по причине: %1
				|%2",
				ТекстОшибки,
				ПредставлениеРесурса
			);
			
			Прервать;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КаталогКешаЭтикеток(Контекст)
	
	Если ЗначениеЗаполнено(Контекст.Настройки.КаталогКешаЭтикеток) Тогда
		КаталогКешаЭтикеток = Новый Файл(Контекст.Настройки.КаталогКешаЭтикеток);
		
	Иначе
		КаталогTEMP = Новый Файл(КаталогВременныхФайлов());
		КаталогМодуляИнтеграции = ПолучитьКаталог(КаталогTEMP, "МаркетплейсыИнтеграция");
		
		КаталогКешаЭтикеток = ПолучитьКаталог(КаталогМодуляИнтеграции, "Этикетки");
		
	КонецЕсли;
	
	Если НЕ КаталогКешаЭтикеток.Существует()
		ИЛИ НЕ КаталогКешаЭтикеток.ЭтоКаталог() Тогда
		ЗаписьЖурнала = ЛогОшибка(СтрШаблон(
			"Не найден каталог для кеширования этикеток!
			|ожидаемый каталог: %1",
			КаталогКешаЭтикеток.ПолноеИмя
		));
		БроситьИсключение(, ЗаписьЖурнала.Комментарий);
	КонецЕсли;
	
	Возврат КаталогКешаЭтикеток;
	
КонецФункции

Функция ФайлЭтикетки(КаталогМаркетплейса, ДатаЗаказа, ИмяФайлаЭтикетки, РасширениеФайла)
	
	ИмяКаталогаДатаЗаказа = Формат(ДатаЗаказа, "ДФ=yyyy_MM_dd");  // образец: "2023_03_17"
	ИмяФайлаСРасширением = СтрШаблон("%1.%2", ИмяФайлаЭтикетки, РасширениеФайла);  // образец: "723308799.png"
	
	КаталогДаты = ПолучитьКаталог(КаталогМаркетплейса, ИмяКаталогаДатаЗаказа);
	ФайлЭтикетки = Новый Файл(КаталогДаты.ПолноеИмя + "\" + ИмяФайлаСРасширением);
	
	Возврат ФайлЭтикетки;
	
КонецФункции

#КонецОбласти

#Область Печать

Функция МакетыПечати() Экспорт
	
	МакетыПечати = Кеш("МакетыПечати", Ложь);
	
	Если ЗначениеЗаполнено(МакетыПечати) Тогда
		Возврат МакетыПечати;
	КонецЕсли;
	
	// ======================
	// МАКЕТЫ ДЛЯ ПЕЧАТИ
	
	ИменаМакетов = Новый Массив;
	
	ИменаМакетов.Добавить("ЭтикеткаТовары_СтикерМаркетплейсаИШтрихкоды");
	ИменаМакетов.Добавить("ЭтикеткаТовары_СтикерМаркетплейса");
	ИменаМакетов.Добавить("ЭтикеткаТовары_ШтрихкодТовара");
	ИменаМакетов.Добавить("РеестрПоставки");
	
	// ======================
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		МакетыПечати.Вставить(ИмяМакета, ИмяМакета);
	КонецЦикла;
	
	Возврат МакетыПечати;
	
КонецФункции

Процедура Печать(ОбъектыНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ЭтотОбъект.ОбработкаСсылка = ПараметрыВывода.ДополнительнаяОбработкаСсылка;
	
	// ОбъектыПечати - здесь пустой список значений, т.к. не передаётся из метода БСП
	
	ВсеМакетплейсы = Маркетплейсы();
	ИмяМаркетплейса = Неопределено;
	ОбъектыНазначения.Свойство("ИмяМаркетплейса", ИмяМаркетплейса);
	
	// Стикеры + штрихкоды
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейсаИШтрихкоды) Тогда
		
		Если ИмяМаркетплейса = ВсеМакетплейсы.Wildberries Тогда  // Wildberries
			СформироватьПечатныеФормыЭтикеток_СтикерыМаркетплейсаИШтрихкоды_Wildberries(ОбъектыНазначения, ОбъектыПечати, КоллекцияПечатныхФорм);	
		Иначе
			ВызватьИсключение "Неизвестный тип маркетплейса!";
		КонецЕсли;
		
	КонецЕсли;
	
	// Стикеры
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейса) Тогда
		
		Если ИмяМаркетплейса = ВсеМакетплейсы.OZON Тогда  // OZON
			СформироватьПечатныеФормыЭтикеток_СтикерыМаркетплейса_OZON(ОбъектыНазначения, ОбъектыПечати, КоллекцияПечатныхФорм);
		ИначеЕсли ИмяМаркетплейса = ВсеМакетплейсы.Yandex Тогда  // Yandex
			СформироватьПечатныеФормыЭтикеток_СтикерыМаркетплейса_Yandex(ОбъектыНазначения, ОбъектыПечати, КоллекцияПечатныхФорм);
		Иначе
			ВызватьИсключение "Неизвестный тип маркетплейса!";
		КонецЕсли;
		
	КонецЕсли;
	
	// Штрихкоды
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, МакетыПечати().ЭтикеткаТовары_ШтрихкодТовара) Тогда
		
		Если ИмяМаркетплейса = ВсеМакетплейсы.OZON Тогда  // OZON
			СформироватьПечатныеФормыЭтикеток_ШтрихкодТовара_OZON(ОбъектыНазначения, ОбъектыПечати, КоллекцияПечатныхФорм);
		Иначе
			ВызватьИсключение "Неизвестный тип маркетплейса!";
		КонецЕсли;
		
	КонецЕсли;
	
	// Реестр
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, МакетыПечати().РеестрПоставки) Тогда
		СформироватьПечатныеФормыРеестрПоставки(ОбъектыНазначения, ОбъектыПечати, КоллекцияПечатныхФорм);
	КонецЕсли;
	
	//ПечатьЭтикетокИЦенниковЛокализация.ПриПечати(КоллекцияПечатныхФорм, ОбъектыНазначения, ОбъектыПечати);
	
КонецПроцедуры

Процедура СформироватьПечатныеФормыЭтикеток_СтикерыМаркетплейсаИШтрихкоды_Wildberries(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.Товары);
	
	НужноПечататьЭтикетки = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейсаИШтрихкоды)Тогда
		НужноПечататьЭтикетки = Истина;
		КоллекцияПечатныхФормБСП.Удалить(
			КоллекцияПечатныхФормБСП.Найти(ВРег(МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейсаИШтрихкоды), "ИмяВРЕГ")
		);
	КонецЕсли;
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.СтруктураНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаПечатьТовары";
	
	// Собираем используемые поля из шаблонов.
	СоответствиеШаблонов = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И СтрокаТЧ.КоличествоЭтикеток > 0 И НужноПечататьЭтикетки Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
	КонецЦикла;
	Если ДанныеПечати.Свойство("СтруктураМакетаШаблона") И ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СоответствиеШаблонов.Вставить(Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	КонецЕсли;
	
	// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение ИЗ СоответствиеШаблонов Цикл
		
		ШаблонЭтикетокИЦенников = КлючИЗначение.Ключ;
		
		Если ЗначениеЗаполнено(ШаблонЭтикетокИЦенников) Тогда
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		Иначе
			СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
		КонецЕсли;
		
		// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(ШаблонЭтикетокИЦенников, СтруктураШаблона);
		
		// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
			СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Организация", ДанныеПечати.Организация);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоОбмена",                 ДанныеПечати.ПравилоОбмена);
	СтруктураНастроек.ПараметрыДанных.Вставить("МаксимальныйКодВесовогоТовара", ДанныеПечати.МаксимальныйКодВесовогоТовара);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоВыгрузкиВВесы",          ДанныеПечати.ПравилоВыгрузкиВВесы);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",       ДанныеПечати.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("Дата",          ДанныеПечати.Дата);
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦеныДополнительно", ДанныеПечати.ВидЦеныДополнительно);
	СтруктураНастроек.ПараметрыДанных.Вставить("ДатаДополнительно",    ДанныеПечати.ДатаДополнительно);
	
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;

#Область ПодготовкаСтруктурыДанныхШаблона
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек, "Товары");

#КонецОбласти

#Область ФормированиеТабличногоДокумента
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		
		Если (
				(
					ЗначениеЗаполнено(КлючИЗначение.Ключ)
					И КлючИЗначение.Ключ.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров
				)
				ИЛИ Не ЗначениеЗаполнено(КлючИЗначение.Ключ)
			)
			И НужноПечататьЭтикетки Тогда
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
			ПечатнаяФорма.СинонимМакета        = СтрШаблон(НСтр("ru = 'Этикетка: %1'"), КлючИЗначение.Ключ);
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикетокДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма = КоллекцияПечатныхФорм[0];
	
	КонтекстВывода = Новый Структура;
	
	КонтекстВывода.Вставить("КоличествоМиллиметровВПикселе", КоличествоМиллиметровВПикселе);
	КонтекстВывода.Вставить("ИсходныеДанные", ИсходныеДанные);
	КонтекстВывода.Вставить("НомерКолонки", 0);
	КонтекстВывода.Вставить("НомерРяда", 0);
	
	Для Каждого СтрокаТовары Из СтруктураРезультата.Таблица Цикл
		
		СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(
			СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]
		);
		
		Если СтрокаТовары.ШаблонЭтикеткиДляПечати = ДанныеПечати.МИ_ШаблонЭтикеткиМаркетплейса Тогда
			
			Попытка
				ВывестиЭтикеткуМаркетплейса(СтруктураРезультата, СтрокаТовары, СтруктураШаблона, ПечатнаяФорма, КонтекстВывода);
			Исключение
				Сообщить(СтрШаблон(
					"Ошибка вывода этикетки маркетплейса!
					|Товар: %1
					|Ошибка:
					|%2",
					СтрокаТовары.Номенклатура,
					ОписаниеОшибки()
				));
			КонецПопытки;
			
		Иначе
			ВывестиЭтикеткуШтрихкода(СтруктураРезультата, СтрокаТовары, СтруктураШаблона, ПечатнаяФорма, КонтекстВывода);
		КонецЕсли;
		
	КонецЦикла; // Цикл по строкам таблицы товаров

#КонецОбласти

	Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
		НоваяСтрока = КоллекцияПечатныхФормБСП.Добавить();
		
		НоваяСтрока.ИмяМакета = ПечатнаяФорма.ИмяМакета;
		НоваяСтрока.ИмяВРЕГ   = ВРег(ПечатнаяФорма.ИмяМакета);
		НоваяСтрока.Экземпляров = 1;
		
		НоваяСтрока.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		НоваяСтрока.СинонимМакета = ПечатнаяФорма.СинонимМакета;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПечатныеФормыЭтикеток_СтикерыМаркетплейса_OZON(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.Товары);
	
	НужноПечататьЭтикетки = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейса)Тогда
		НужноПечататьЭтикетки = Истина;
		КоллекцияПечатныхФормБСП.Удалить(
			КоллекцияПечатныхФормБСП.Найти(ВРег(МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейса), "ИмяВРЕГ")
		);
	КонецЕсли;
	
	КолонкиДляПечати = "МИ_Заказ, МИ_НомерДоставки, МИ_ФайлЭтикетки";
	ТаблицаОтправлений = ИсходныеДанные.Скопировать(, КолонкиДляПечати);
	ТаблицаОтправлений.Свернуть(КолонкиДляПечати);
	
	Результат = Новый ТабличныйДокумент;
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	//СтруктураШаблона = ПараметрыПечати.Этикетка.Шаблон.Получить();
	Этикетка = ДанныеПечати.МИ_ШаблонЭтикеткиМаркетплейса;
	СтруктураШаблона = Этикетка.Шаблон.Получить();
	
	// Применение настроек табличного документа.
	ЗаполнитьЗначенияСвойств(Результат, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
	
	Для Каждого СтрОтправления Из ТаблицаОтправлений Цикл
	
		Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) <> 1 Тогда
				Продолжить;
			КонецЕсли;
				
			//ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
			ЗначениеШтрихкода = "4600702066425";//ПолучитьШтрихкод(Объект.Заказ);
			
			ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
			ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(
				ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
			
			Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
				УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
			Иначе
				УровеньЧеткости = 1;
			КонецЕсли;
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
			ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
			ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
			ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
			ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
			ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
			
			Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
				ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
				ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("УголПоворота") Тогда
				ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
				ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("Масштабировать") Тогда
				ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
				ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
				ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
			КонецЕсли;
			
			ФайлЭтикетки = СтрОтправления.МИ_ФайлЭтикетки;
			ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("jpg");
			ПутьКПрограммеКонвертацииPDF = "C:\Program Files\ImageMagick-7.0.11-Q16-HDRI\magick.exe";
			СтрокаИсполнения =
				"""" + ПутьКПрограммеКонвертацииPDF
				+ """" +" convert  -density 150 -quality 100 -debug none "
				+ ФайлЭтикетки + " " + ИмяФайлаРезультата;
				
			ЗапуститьПриложение(СтрокаИсполнения,, Истина);
			ДвоичныеДанныеРезультата = Новый ДвоичныеДанные(ИмяФайлаРезультата);
			УдалитьФайлы(ИмяФайлаРезультата);
			Рисунок.Картинка = Новый Картинка(ДвоичныеДанныеРезультата);
				
		КонецЦикла;
		
		Результат.Вывести(Область);
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	
	КонецЦикла;
	
	НоваяСтрока = КоллекцияПечатныхФормБСП.Добавить();
	НоваяСтрока.ИмяМакета = "Этикетка: " + Этикетка;;
	НоваяСтрока.ИмяВРЕГ   = ВРег(НоваяСтрока.ИмяМакета);
	НоваяСтрока.Экземпляров = 1;
	НоваяСтрока.ТабличныйДокумент = Результат;
	НоваяСтрока.СинонимМакета = СтрШаблон(НСтр("ru = 'Этикетка: %1'"), Этикетка);
	
КонецПроцедуры

Процедура СформироватьПечатныеФормыЭтикеток_ШтрихкодТовара_OZON(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	// TODO: наполнить
	
	Результат = Новый ТабличныйДокумент;
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.Товары);
	
	НужноПечататьЭтикетки = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, МакетыПечати().ЭтикеткаТовары_ШтрихкодТовара)Тогда
		НужноПечататьЭтикетки = Истина;
		КоллекцияПечатныхФормБСП.Удалить(
			КоллекцияПечатныхФормБСП.Найти(ВРег(МакетыПечати().ЭтикеткаТовары_ШтрихкодТовара), "ИмяВРЕГ")
		);
	КонецЕсли;
	
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	//СтруктураШаблона = ПараметрыПечати.Этикетка.Шаблон.Получить();
	Этикетка = ДанныеПечати.МИ_ШаблонЭтикеткиШтрихкода;
	СтруктураШаблона = Этикетка.Шаблон.Получить();
	
	//МассивОбъектов, ПараметрыПечати
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;

	Для каждого СтрТаб Из ИсходныеДанные Цикл
		
		ЗначениеШтрихкода = СокрЛП(СтрТаб.Штрихкод);
		
		Если НЕ ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
			Продолжить;
		КонецЕсли;
		
		// TODO: узнать, что это за условие
		//Если Лев(СтрН.Штрихкод, 3) = "OZN" Тогда
		//	
		//КонецЕсли;
		
		Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
		
		// Применение настроек табличного документа.
		ЗаполнитьЗначенияСвойств(Результат, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			
			Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 0 Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
			ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(
				ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
			
			Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
				УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
			Иначе
				УровеньЧеткости = 1;
			КонецЕсли;
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
			ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
			ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
			ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
			ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
			ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
			
			Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
				ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
				ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("УголПоворота") Тогда
				ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
				ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("Масштабировать") Тогда
				ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
				ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
				ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
			КонецЕсли;
			
			Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
						
		КонецЦикла;
		
		Результат.Вывести(Область);
		
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	НоваяСтрока = КоллекцияПечатныхФормБСП.Добавить();
	НоваяСтрока.ИмяМакета = "Этикетка: " + Этикетка;;
	НоваяСтрока.ИмяВРЕГ   = ВРег(НоваяСтрока.ИмяМакета);
	НоваяСтрока.Экземпляров = 1;
	НоваяСтрока.ТабличныйДокумент = Результат;
	НоваяСтрока.СинонимМакета = СтрШаблон(НСтр("ru = 'Этикетка: %1'"), Этикетка);
	
КонецПроцедуры

Процедура СформироватьПечатныеФормыЭтикеток_СтикерыМаркетплейса_Yandex(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.Товары);
	
	НужноПечататьЭтикетки = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейса)Тогда
		НужноПечататьЭтикетки = Истина;
		КоллекцияПечатныхФормБСП.Удалить(
			КоллекцияПечатныхФормБСП.Найти(ВРег(МакетыПечати().ЭтикеткаТовары_СтикерМаркетплейса), "ИмяВРЕГ")
		);
	КонецЕсли;
	
	КолонкиДляПечати = "МИ_Заказ, МИ_НомерДоставки, МИ_ФайлЭтикетки";
	ТаблицаОтправлений = ИсходныеДанные.Скопировать(, КолонкиДляПечати);
	ТаблицаОтправлений.Свернуть(КолонкиДляПечати);
	
	Результат = Новый ТабличныйДокумент;
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	//СтруктураШаблона = ПараметрыПечати.Этикетка.Шаблон.Получить();
	Этикетка = ДанныеПечати.МИ_ШаблонЭтикеткиМаркетплейса;
	СтруктураШаблона = Этикетка.Шаблон.Получить();
	
	// Применение настроек табличного документа.
	ЗаполнитьЗначенияСвойств(Результат, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
	
	Для Каждого СтрОтправления Из ТаблицаОтправлений Цикл
		
		ФайлЭтикетки = СтрОтправления.МИ_ФайлЭтикетки;
		ФайлРезультата = Новый Файл(ПолучитьИмяВременногоФайла("jpg"));
		
		ИмяФайлаРезультата = СтрЗаменить(ФайлРезультата.ПолноеИмя, ".jpg", "%04d.jpg");
		ПутьКПрограммеКонвертацииPDF = "C:\Program Files\ImageMagick-7.0.11-Q16-HDRI\magick.exe";
		СтрокаИсполнения =
			"""" + ПутьКПрограммеКонвертацииPDF
			+ """" +" convert  -density 150 -quality 100 -debug none +adjoin "
			+ ФайлЭтикетки + " " + ИмяФайлаРезультата;
			
		ЗапуститьПриложение(СтрокаИсполнения,, Истина);
		
		МаскаПоиска = СтрШаблон("%1*.jpg", ФайлРезультата.ИмяБезРасширения);
		ФайлыРезультата = НайтиФайлы(ФайлРезультата.Путь, МаскаПоиска);
		
		ДанныеФайлов = Новый Массив;
		Для Каждого ЭлементФайл Из ФайлыРезультата Цикл
			ДанныеФайлов.Добавить(Новый ДвоичныеДанные(ЭлементФайл.ПолноеИмя));
			УдалитьФайлы(ЭлементФайл.ПолноеИмя);  // убираем за собой мусок
		КонецЦикла;
		
		Для Каждого ДвоичныеДанныеФайла Из ДанныеФайлов Цикл
			
			Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
			
			Для каждого Рисунок Из Область.Рисунки Цикл
				
				Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) <> 1 Тогда
					Продолжить;
				КонецЕсли;
					
				//ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
				ЗначениеШтрихкода = "4600702066425";//ПолучитьШтрихкод(Объект.Заказ);
				
				ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
				ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(
					ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
				
				Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
					УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
				Иначе
					УровеньЧеткости = 1;
				КонецЕсли;
				
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
				ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
				ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
				ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
				ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
				ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
				
				Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
					ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
					ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("УголПоворота") Тогда
					ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
					ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("Масштабировать") Тогда
					ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
					ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
					ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
				КонецЕсли;
			
				Рисунок.Картинка = Новый Картинка(ДвоичныеДанныеФайла);
					
			КонецЦикла;
			
			Результат.Вывести(Область);
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
	
	КонецЦикла;
	
	НоваяСтрока = КоллекцияПечатныхФормБСП.Добавить();
	НоваяСтрока.ИмяМакета = "Этикетка: " + Этикетка;;
	НоваяСтрока.ИмяВРЕГ   = ВРег(НоваяСтрока.ИмяМакета);
	НоваяСтрока.Экземпляров = 1;
	НоваяСтрока.ТабличныйДокумент = Результат;
	НоваяСтрока.СинонимМакета = СтрШаблон(НСтр("ru = 'Этикетка: %1'"), Этикетка);
	
КонецПроцедуры

Процедура ВывестиЭтикеткуШтрихкода(СтруктураРезультата, СтрокаТовары, СтруктураШаблона, ПечатнаяФорма, КонтекстВывода)
	
	КоличествоМиллиметровВПикселе = КонтекстВывода.КоличествоМиллиметровВПикселе;
	
	Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	// Применение настроек табличного документа.
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
	
	Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
		//Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
		Если ЕстьРеквизит(Область.Параметры, ПараметрШаблона.Значение) Тогда
			НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
			Если НаименованиеКолонки <> Неопределено Тогда
				Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Рисунок Из Область.Рисунки Цикл
		
		Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
			
			ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод())];
			Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
				ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
				ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(
				ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
				
				Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
					УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
				Иначе
					УровеньЧеткости = 1;
				КонецЕсли;
				
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
				ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
				ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
				ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
				ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
				ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
				
				Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
					ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
					ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("УголПоворота") Тогда
					ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
					ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("Масштабировать") Тогда
					ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
					ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
				КонецЕсли;
				Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
					ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
				КонецЕсли;
				
				//+
				//Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				Попытка //Улан в попытку так как есть кривавые шк
					Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
				Исключение
					Сообщить("Не удалось расспечатать ШК: "+ПараметрыШтрихкода.Штрихкод); 
				КонецПопытки;
				//+
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(Рисунок.Имя, "ЗнакВалюты") = 1 Тогда
			ЗначениеКодаВалюты = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраКодВалюты())];
			Попытка
				Рисунок.Картинка = Новый Картинка(Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты" + ЗначениеКодаВалюты), Истина);
			Исключение
				Рисунок.Картинка = Новый Картинка;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров
		
		КонтекстВывода.НомерКолонки = КонтекстВывода.НомерКолонки + 1;
		
		Если КонтекстВывода.НомерКолонки = 1 Тогда
			
			КонтекстВывода.НомерРяда = КонтекстВывода.НомерРяда + 1;
			
			ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
			
		Иначе
			
			ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
			
		КонецЕсли;
		
		Если КонтекстВывода.НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
			И КонтекстВывода.НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
			
			КонтекстВывода.НомерРяда    = 0;
			КонтекстВывода.НомерКолонки = 0;
			
			ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		ИначеЕсли КонтекстВывода.НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
			
			КонтекстВывода.НомерКолонки = 0;
			
		КонецЕсли;
		
	КонецЦикла; // Цикл по количеству экземпляров
	
КонецПроцедуры

Процедура ВывестиЭтикеткуМаркетплейса(СтруктураРезультата, СтрокаТовары, СтруктураШаблона, ПечатнаяФорма, КонтекстВывода)
	
	КоличествоМиллиметровВПикселе = КонтекстВывода.КоличествоМиллиметровВПикселе;
	
	Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;

	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	// Применение настроек табличного документа.
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
	
	Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
		//Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
		Если ЕстьРеквизит(Область.Параметры, ПараметрШаблона.Значение) Тогда
			НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(Справочники.ШаблоныЭтикетокИЦенников.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
			Если НаименованиеКолонки <> Неопределено Тогда
				Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КонвертерФайлов = Настройки().КонвертерФайлов;
	
	Для каждого Рисунок Из Область.Рисунки Цикл
		
		Если СтрНайти(Рисунок.Имя, Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()) = 1 Тогда
			
			ЗначениеШтрихкода = СтрокаТовары[
				СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(
					Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраШтрихкод()
				)
			];
		
			ЗначениеШтрихкодаДляКомпоненты = ЗначениеШтрихкода;
			ПечатьЭтикетокИЦенниковЛокализация.ПриОпределенииЗначенияШтрихкодаДляКомпоненты(
			ЗначениеШтрихкодаДляКомпоненты, СтруктураШаблона.ТипКода);
			Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
				УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
			Иначе
				УровеньЧеткости = 1;
			КонецЕсли;
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
			ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе) * УровеньЧеткости);
			ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
			ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
			ПараметрыШтрихкода.Вставить("ТипКода",          СтруктураШаблона.ТипКода);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст",  СтруктураШаблона.ОтображатьТекст);
			ПараметрыШтрихкода.Вставить("РазмерШрифта",     СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
			
			Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
				ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
				ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("УголПоворота") Тогда
				ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
				ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("Масштабировать") Тогда
				ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
				ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
			КонецЕсли;
			Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
				ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
			КонецЕсли;
			
			////Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			////Улан удалить тест воврат новый картинка
			//СтЗаказ = Новый Структура;
			//СтЗаказ.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			//СтЗаказ.Вставить("КоличествоЦенников", СтрокаТовары.КоличествоЦенниковДляПечати);
			//НайтиТовЗак = КонтекстВывода.ИсходныеДанные.НайтиСтроки(СтЗаказ);
			//Если НайтиТовЗак.Количество() > 0 Тогда
			//	ЗаказКлиента = НайтиТовЗак[0].МИ_Заказ;
			//	//Id_отправления = НайтиТовЗак[0].МИ_НомерПоставки;
			//Иначе
			//	ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
			//	//Id_отправления = "";
			//КонецЕсли;
			//
			//ДопПараметры = Новый Структура;
			//ДопПараметры.Вставить("ЗаказКлиента", ЗаказКлиента);
			//ДопПараметры.Вставить("ПараметрМакета1", ?(ЗначениеЗаполнено(ЗаказКлиента), ЗаказКлиента.Номер, ""));
			//Область.Параметры.Заполнить(ДопПараметры);
			////СписокФайлов = ПолучитьСписокФайлов1(Заказик,Истина,Id_отправления);
			//////СписокФайлов = ПолучитьСписокФайлов1(Документы.ЗаказКлиента.НайтиПоНомеру("ТД00-000028",Дата("20150101")), Истина);
			////Для Каждого Файл Из СписокФайлов Цикл 
			////	//Если Файл.Наименование = Id_отправления Тогда 
			////		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл);
			////		ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение); 		
			////		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			////		ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутем);
			////		ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("svg");
			////		стрПуть = ИмяФайлаСПутем;
			////		ДвоичныеДанныеРезультата = Новый ДвоичныеДанные(ИмяФайлаСПутем);
			////		Рисунок.Картинка = Новый Картинка(ДвоичныеДанныеРезультата);
			////	//КонецЕсли;
			////КонецЦикла;
			//
			//СписокФайлов = ПолучитьСписокФайлов(ЗаказКлиента);
			//
			//Для Каждого Файл Из СписокФайлов Цикл 
			//	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл);
			//	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение); 		
			//	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			//	ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутем);
			//	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("jpg");
			//	
			//	стрПуть = ИмяФайлаСПутем;
			//	
			//	//конвертация в катинку, если многостраничный файл то много картинок
			//	ПутьКПрограммеКонвертацииPDF = "C:\Program Files\ImageMagick-7.0.11-Q16-HDRI\magick.exe";
			//	стрПуть = """" + ПутьКПрограммеКонвертацииPDF + """" +" convert  -density 150 -quality 100 -debug none "+ стрПуть + " " + ИмяФайлаРезультата; 			
			//	ЗапуститьПриложение(стрПуть,, Истина);
			//	ДвоичныеДанныеРезультата = Новый ДвоичныеДанные(ИмяФайлаРезультата);
			//	
			//	ИмяФайла = Прав(ИмяФайлаРезультата, СтрДлина(ИмяФайлаРезультата) - СтрДлина(КаталогВременныхФайлов()));
			//	МасФайлов = НайтиФайлы(КаталогВременныхФайлов(), Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4) + "*");
			//	
			//	Для Каждого Файл Из МасФайлов Цикл
			//		УдалитьФайлы(ИмяФайлаСПутем);
			//		УдалитьФайлы(ИмяФайлаРезультата);
			//	КонецЦикла;
			//	Рисунок.Картинка = Новый Картинка(ДвоичныеДанныеРезультата);
			//КонецЦикла;
			
			СтЗаказ = Новый Структура;
			СтЗаказ.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
			СтЗаказ.Вставить("КоличествоЦенников", СтрокаТовары.КоличествоЦенниковДляПечати);
			СтрокиЗаказов = КонтекстВывода.ИсходныеДанные.НайтиСтроки(СтЗаказ);
			
			Если СтрокиЗаказов.Количество() > 0 Тогда
				СтрокаЗаказа = СтрокиЗаказов[0];
				ЗаказКлиента = СтрокаЗаказа.МИ_Заказ;
				ФайлЭтикетки = Новый Файл(СтрокаЗаказа.МИ_ФайлЭтикетки);
			Иначе
				ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
				ФайлЭтикетки = Неопределено;
			КонецЕсли;
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ЗаказКлиента", ЗаказКлиента);
			ДопПараметры.Вставить("ПараметрМакета1", ?(ЗначениеЗаполнено(ЗаказКлиента), ЗаказКлиента.Номер, ""));
			Область.Параметры.Заполнить(ДопПараметры);
			
			Если ТипЗнч(ФайлЭтикетки) = Тип("Файл") И ФайлЭтикетки.Существует() Тогда
				
				ВремФайлЭтикетки = ПолучитьИмяВременногоФайла(ФайлЭтикетки.Расширение);
				
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ФайлЭтикетки.ПолноеИмя);
				ДвоичныеДанныеФайла.Записать(ВремФайлЭтикетки);
				
				ФайлРезультатаКонвертации = ПолучитьИмяВременногоФайла("jpg");
				
				// Конвертация в картинку, если многостраничный файл то много картинок
				СтрокаЗапускаКонвертера = СтрШаблон(
					"""%1"" convert  -density 150 -quality 100 -debug none %2 %3",
					КонвертерФайлов,
					ВремФайлЭтикетки,
					ФайлРезультатаКонвертации
				);
				
				ЗапуститьПриложение(СтрокаЗапускаКонвертера,, Истина);
				ДвоичныеДанныеРезультата = Новый ДвоичныеДанные(ФайлРезультатаКонвертации);
				
				УдалитьФайлы(ВремФайлЭтикетки);
				УдалитьФайлы(ФайлРезультатаКонвертации);
				
				Рисунок.Картинка = Новый Картинка(ДвоичныеДанныеРезультата);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(Рисунок.Имя, "ЗнакВалюты") = 1 Тогда
			
			ЗначениеКодаВалюты = СтрокаТовары[
				СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(
					Справочники.ШаблоныЭтикетокИЦенников.ИмяПараметраКодВалюты()
				)
			];
			
			Попытка
				Рисунок.Картинка = Новый Картинка(
					Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет("ЗнакВалюты" + ЗначениеКодаВалюты),
					Истина
				);
			Исключение
				Рисунок.Картинка = Новый Картинка;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров
		
		КонтекстВывода.НомерКолонки = КонтекстВывода.НомерКолонки + 1;
		
		Если КонтекстВывода.НомерКолонки = 1 Тогда
			КонтекстВывода.НомерРяда = КонтекстВывода.НомерРяда + 1;
			ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
		Иначе
			ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
		КонецЕсли;
		
		Если КонтекстВывода.НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
			И КонтекстВывода.НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
			КонтекстВывода.НомерРяда    = 0;
			КонтекстВывода.НомерКолонки = 0;
			ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ИначеЕсли КонтекстВывода.НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
			КонтекстВывода.НомерКолонки = 0;
		КонецЕсли;
		
	КонецЦикла; // Цикл по количеству экземпляров
	
КонецПроцедуры

Функция ПолучитьСписокФайлов(Знач Заказы)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаПрисоединенныеФайлы.Ссылка КАК Файл
	|ИЗ
	|	Справочник.ЗаказКлиентаПрисоединенныеФайлы КАК ЗаказКлиентаПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ЗаказКлиентаПрисоединенныеФайлы.ПометкаУдаления
	|	И ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла В(&Заказы)
	|	И  ЗаказКлиентаПрисоединенныеФайлы.Расширение В (&РасширенияКартинок)";
	
	
	
	//|	И ЗаказКлиентаПрисоединенныеФайлы.Наименование = &Наименование
	Запрос.УстановитьПараметр("Заказы", Заказы);
	//Запрос.УстановитьПараметр("КартинкиИПДФ", КартинкиИПДФ);
	//Запрос.УстановитьПараметр("Наименование", Id_отправления);
	РасширенияКартинок = Новый СписокЗначений;
	//РасширенияКартинок.Добавить("jpg");
	РасширенияКартинок.Добавить("pdf");
	//РасширенияКартинок.Добавить("tif");
	//РасширенияКартинок.Добавить("jpeg");
	РасширенияКартинок.Добавить("png");
	//РасширенияКартинок.Добавить("bmp");
	//РасширенияКартинок.Добавить("jp2");
	РасширенияКартинок.Добавить("svg");
	Запрос.УстановитьПараметр("РасширенияКартинок", РасширенияКартинок);
	
	РезультатЗапросаТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапросаТЗ.ВыгрузитьКолонку("Файл");	
КонецФункции

Процедура СформироватьПечатныеФормыРеестрПоставки(ДанныеПечати, ОбъектыПечати, КоллекцияПечатныхФормБСП)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	НужноПечататьЭтикетки = Ложь;
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФормБСП, МакетыПечати().РеестрПоставки)Тогда
		НужноПечататьЭтикетки = Истина;
		КоллекцияПечатныхФормБСП.Удалить(
			КоллекцияПечатныхФормБСП.Найти(ВРег(МакетыПечати().РеестрПоставки), "ИмяВРЕГ")
		);
	КонецЕсли;
	
	ТаблицаТовары = XMLЗначение(Тип("ХранилищеЗначения"), ДанныеПечати.Товары).Получить();
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
	ПечатнаяФорма.ИмяМакета            = "Макет_Поставки";
	ПечатнаяФорма.СинонимМакета        = СтрШаблон("Поставка: %1", "");  // TODO: зачем это тут??
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
			ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = ПечатнаяФорма.ИмяМакета;
		КонецЕсли;
		
		Макет = ПолучитьМакет("Макет_Поставки");
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.НомерПоставки = ДанныеПечати.НомерПоставки;
		РисунокШК_WB = ОбластьШапка.Рисунки.КартинкаШтрихкода;
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Ширина",          Окр(РисунокШК_WB.Ширина / КоличествоМиллиметровВПикселе)+80);
		ПараметрыШтрихкода.Вставить("Высота",          Окр(РисунокШК_WB.Высота / КоличествоМиллиметровВПикселе));
		
		//ПараметрыШтрихкода.Вставить("ТипКода",         4);
		//ПараметрыШтрихкода.Вставить("ТипШтрихкода",    Перечисления.ТипыШтрихкодов.Code128); 
		
		ПараметрыШтрихкода.Вставить("ТипКода",         16);
		ПараметрыШтрихкода.Вставить("ТипШтрихкода",    Перечисления.ТипыШтрихкодов.QR); 
		
		ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
		ПараметрыШтрихкода.Вставить("УголПоворота",    0);
		ПараметрыШтрихкода.Вставить("Штрихкод",        ДанныеПечати.НомерПоставки);
		ПараметрыШтрихкода.Вставить("ПрозрачныйФон",   Истина);
		ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); 
		ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", 1);
		ПараметрыШтрихкода.Вставить("УровеньЧеткости",          1);
		ПараметрыШтрихкода.Вставить("Масштабировать",   Истина);
		ПараметрыШтрихкода.Вставить("МонохромныйШрифт", Истина);
		ОбластьШапка.Рисунки.КартинкаШтрихкода.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		КолСбор = ТаблицаТовары.Количество();
		ОбластьШапка.Параметры.КолЗаданий = Строка(КолСбор);
		ПечатнаяФорма.ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТЧ");
		ПечатнаяФорма.ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Для Каждого СтрТаб Из ТаблицаТовары Цикл
			ОбластьТЧ= Макет.ПолучитьОбласть("ТЧ");
			
			ОбластьТЧ.Параметры.НомерЗаказа			= СтрТаб.НомерЗаказа;
			ОбластьТЧ.Параметры.Баркод				= СтрТаб.Штрихкод;
			ОбластьТЧ.Параметры.НаименованиеТовара	= Строка(СтрТаб.Номенклатура) + Строка(СтрТаб.Характеристика);
			ОбластьТЧ.Параметры.НомерЭтик			= СтрТаб.НомерДоставки;
			
			ПечатнаяФорма.ТабличныйДокумент.Вывести(ОбластьТЧ);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			НоваяСтрока = КоллекцияПечатныхФормБСП.Добавить();
			
			НоваяСтрока.ИмяМакета = ПечатнаяФорма.ИмяМакета;
			НоваяСтрока.ИмяВРЕГ   = ВРег(ПечатнаяФорма.ИмяМакета);
			НоваяСтрока.Экземпляров = 1;
			
			НоваяСтрока.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
			НоваяСтрока.СинонимМакета = ПечатнаяФорма.СинонимМакета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область JSON

Функция ДанныеКакJSON(Данные, ПараметрыСериализатора = Неопределено) Экспорт
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(
		ПереносСтрокJSON.Авто,
		"    ",  // СимволыОтступа
		Истина,  // ИспользоватьДвойныеКавычки
		ЭкранированиеСимволовJSON.Нет,
		Ложь,  // ЭкранироватьУгловыеСкобки
		Ложь,  // ЭкранироватьАмперсанд
		Ложь,  // ЭкранироватьОдинарныеКавычки
		Истина,  // ЭкранироватьРазделителиСтрок
		Ложь  // ЭкранироватьСлеш
	);
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Ложь;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Если ТипЗнч(ПараметрыСериализатора) <> Тип("Структура") Тогда
		ПараметрыСериализатора = Новый Структура;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	
	ЗаписатьJSON(
		ЗаписьJSON,
		Данные,
		НастройкиСериализации,
		"СериализаторJSON",
		ЭтотОбъект,
		ПараметрыСериализатора
	);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция ДанныеИзJSON(СтрокаJSON, ПрочитатьВСоответствие = Ложь, ИменаСвойствСоЗначениямиДата = Неопределено, ОжидаемыйФорматДаты = Неопределено, Знач ПараметрыВосстановления = Неопределено) Экспорт
	
	МассивСвойствСоЗначениямиДата = Новый Массив;
	Если ТипЗнч(ИменаСвойствСоЗначениямиДата) = Тип("Массив") Тогда
		МассивСвойствСоЗначениямиДата = ИменаСвойствСоЗначениямиДата;
	ИначеЕсли ТипЗнч(ИменаСвойствСоЗначениямиДата) = Тип("Строка") Тогда
		Для Каждого Свойство Из Новый Структура(ИменаСвойствСоЗначениямиДата) Цикл
			МассивСвойствСоЗначениямиДата.Добавить(Свойство.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Если ОжидаемыйФорматДаты = Неопределено Тогда
		ОжидаемыйФорматДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	
	Если ПараметрыВосстановления = Неопределено Тогда
		ПараметрыВосстановления = Новый Структура;
	КонецЕсли;
	ПараметрыВосстановления.Вставить("СвойстваДаты", МассивСвойствСоЗначениямиДата);
	ПараметрыВосстановления.Вставить("ОжидаемыйФорматДаты", ОжидаемыйФорматДаты);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Значение = ПрочитатьJSON(
		ЧтениеJSON,
		ПрочитатьВСоответствие,
		МассивСвойствСоЗначениямиДата,
		ОжидаемыйФорматДаты,
		"ДесериализаторJSON",
		ЭтотОбъект,
		ПараметрыВосстановления
	);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ДесериализаторJSON(Свойство, Значение, Параметры) Экспорт
	
	// Пустые даты из JSON 1С восстанавливает не слишком удобно:
	// можно из значения
	// "0001-01-01T00:00:00+00:00"
	// получить дату
	// 01.01.0001  2:30:17
	// Поэтому обрабатываем вручную
	Если ЗначениеЗаполнено(Свойство)
		И Параметры.СвойстваДаты.Найти(Свойство) <> Неопределено Тогда
		
		Если Значение = "0001-01-01T00:00:00+00:00"
			ИЛИ Значение = "0001-01-01T00:00:00Z"
			Тогда
			Значение = '00010101';
		Иначе
			Значение = ПрочитатьДатуJSON(Значение, Параметры.ОжидаемыйФорматДаты);
		КонецЕсли;
		
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция СериализаторJSON(Свойство, Значение, Параметры, Отказ) Экспорт
	
	// В JSON могут быть записаны значения следующих типов:
	//	Неопределено,
	//	Булево,
	//	Число,
	//	Строка,
	//	Дата (будет преобразована в строку),
	//	Структура,
	//	ФиксированнаяСтруктура,
	//	Массив,
	//	ФиксированныйМассив,
	//	Соответствие,
	//	ФиксированноеСоответствие.
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		СериализованноеЗначение = НоменклатураСериализатор(Значение, Параметры);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		СериализованноеЗначение = ЗаказКлиентаСериализатор(Значение, Параметры);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		СериализованноеЗначение = ЗаказНаПеремещениеСериализатор(Значение, Параметры);
		
	Иначе
		СериализованноеЗначение = Значение;
		
	КонецЕсли;
		
	Возврат СериализованноеЗначение;
	
КонецФункции

#Область Сериализаторы

Функция НоменклатураСериализатор(Ссылка, Параметры) Экспорт
	
	КешСсылок = Кеш("Номенклатура");
	
	Значение = КешСсылок.Получить(Ссылка);
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	КраткийВид = Параметры.Свойство("НоменклатураСериализаторКраткий");
	
	Если КраткийВид Тогда
		Значение = Ссылка.Код;
		
	Иначе
		Значение = Новый Структура;
		Значение.Вставить("code", Ссылка.Код);
		
	КонецЕсли;
	
	КешСсылок.Вставить(Ссылка, Значение);
	
	Возврат Значение;
	
КонецФункции

Функция ЗаказКлиентаСериализатор(Ссылка, Параметры) Экспорт
	
	КешСсылок = Кеш("ЗаказКлиента");
	
	Значение = КешСсылок.Получить(Ссылка);
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Заказы = Неопределено;
	КешированиеМассиваЗаказов = (
		Параметры.Свойство("Заказы", Заказы)
		И ТипЗнч(Заказы) = Тип("Массив")
	);
	
	СсылкиЗаказов = ?(КешированиеМассиваЗаказов, Заказы, НовыйМассив(Ссылка));
	
	КраткийВид			= Параметры.Свойство("ЗаказКлиентаСериализаторКраткий");
	ПолныйВид			= НЕ КраткийВид;
	КакИдентификатор	= Параметры.Свойство("ЗаказКлиентаСериализаторИдентификатор");
	
	Если КакИдентификатор Тогда
		
		Для Каждого ТекСсылка Из СсылкиЗаказов Цикл
			
			Значение = Новый Структура;
			ДобавитьОписаниеТипаДокумента(Значение, ТекСсылка);
			
			КешСсылок.Вставить(ТекСсылка, Значение);
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заказы", СсылкиЗаказов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	&НомерЗаказаМаркетплейса КАК НомерЗаказаМаркетплейса
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка В(&Заказы)";
		
		// Берём номер заказа внешней системы из нужного поля
		Если ЕстьРасширениеХакстера() Тогда
			НомерЗаказаМаркетплейса =
			"ВЫБОР
			|	КОГДА ЗаказКлиента.НомерЗаказаМаркетплейс > """"
			|		ТОГДА ЗаказКлиента.НомерЗаказаМаркетплейс
			|	ИНАЧЕ ЗаказКлиента.НомерПоДаннымКлиента
			|КОНЕЦ";
		Иначе
			НомерЗаказаМаркетплейса = "ЗаказКлиента.НомерПоДаннымКлиента";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерЗаказаМаркетплейса", НомерЗаказаМаркетплейса);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если КраткийВид Тогда
				Значение = Выборка.НомерЗаказаМаркетплейса;
			Иначе
				Значение = Новый Структура;
				Значение.Вставить("order_number",	Выборка.НомерЗаказаМаркетплейса);
			КонецЕсли;
			
			КешСсылок.Вставить(Выборка.Ссылка, Значение);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		ВызватьИсключениеОбъектНеСериализован(Ссылка);
	КонецЕсли;
	
	Если КешированиеМассиваЗаказов Тогда
		Параметры.Удалить("Заказы");
		// Рекурсивный вызов, чтобы теперь взять из кеша
		Значение = ЗаказКлиентаСериализатор(Ссылка, Параметры);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗаказНаПеремещениеСериализатор(Ссылка, Параметры) Экспорт
	
	КешСсылок = Кеш("ЗаказНаПеремещение");
	
	Значение = КешСсылок.Получить(Ссылка);
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Заказы = Неопределено;
	КешированиеМассиваЗаказов = (
		Параметры.Свойство("Заказы", Заказы)
		И ТипЗнч(Заказы) = Тип("Массив")
	);
	
	СсылкиЗаказов = ?(КешированиеМассиваЗаказов, Заказы, НовыйМассив(Ссылка));
	
	// У заказов на перемещение нет номера маркетплейса в реквизитах,
	// поэтому всегда его сериализуем как структуру из типа документа
	// и идентификатора ссылки
	Для Каждого ТекСсылка Из СсылкиЗаказов Цикл
		
		Значение = Новый Структура;
		ДобавитьОписаниеТипаДокумента(Значение, ТекСсылка);
		
		КешСсылок.Вставить(ТекСсылка, Значение);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		ВызватьИсключениеОбъектНеСериализован(Ссылка);
	КонецЕсли;
	
	Если КешированиеМассиваЗаказов Тогда
		Параметры.Удалить("Заказы");
		// Рекурсивный вызов, чтобы теперь взять из кеша
		Значение = ЗаказНаПеремещениеСериализатор(Ссылка, Параметры);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область XML

// Преобразует (сериализует) любое значение в XML-строку.
// Преобразованы в могут быть только те объекты, для которых в синтакс-помощнике указано, что они сериализуются.
// См. также ЗначениеИзСтрокиXML.
//
// Параметры:
//  Значение - Произвольный - значение, которое необходимо сериализовать в XML-строку.
//
// Возвращаемое значение:
//  Строка - XML-строка.
//
Функция ЗначениеВСтрокуXML(Значение) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

// Выполняет преобразование (десериализацию) XML-строки в значение.
// См. также ЗначениеВСтрокуXML.
//
// Параметры:
//  СтрокаXML - Строка - XML-строка, с сериализованным объектом..
//
// Возвращаемое значение:
//  Произвольный - значение, полученное из переданной XML-строки.
//
Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
КонецФункции

Функция ИмяТипаXML(Значение) Экспорт
	// Обратное преобразование:
	// ТипЗначения = ИзXMLТипа(ИмяТипаXML, "");
	Возврат XMLТипЗнч(Значение).ИмяТипа;
КонецФункции

#КонецОбласти

#Область Хеширование

Функция Хеш(Данные)
	ДанныеXML = ОбщегоНазначения.ЗначениеВСтрокуXML(Данные);
	Возврат ХешSHA256(ДанныеXML);
КонецФункции

Функция ХешДанных(Данные, ФункцияХеширования, Base64 = Истина)
	
	Хешер = Новый ХешированиеДанных(ФункцияХеширования);
	Хешер.Добавить(Данные);

	Если ФункцияХеширования = ХешФункция.CRC32 Тогда
		Возврат Хешер.ХешСумма;
	ИначеЕсли Base64 Тогда
		Возврат Base64Строка(Хешер.ХешСумма);
	Иначе
		Возврат Хешер.ХешСумма;
	КонецЕсли;
	
КонецФункции

Функция ХешSHA1(Данные, Base64 = Истина) Экспорт
	Возврат ХешДанных(Данные, ХешФункция.SHA1, Base64);
КонецФункции

Функция ХешSHA256(Данные, Base64 = Истина) Экспорт
	Возврат ХешДанных(Данные, ХешФункция.SHA256, Base64);
КонецФункции

Функция ХешSHA512(Данные, Base64 = Истина) Экспорт
	Возврат ХешДанных(Данные, ХешФункция.SHA512, Base64);
КонецФункции

#КонецОбласти

#Область Файлы

Функция ВременныйФайл(Расширение = Неопределено, ДвоичныеДанные = Неопределено)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(Расширение);
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные.Записать(ВременныйФайл);
	КонецЕсли;
	
	Возврат Новый Файл(ВременныйФайл);
	
КонецФункции

Функция ВременныйКаталог()
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла();
	
	СоздатьКаталог(ИмяВременногоКаталога);
	
	Возврат Новый Файл(ИмяВременногоКаталога);
	
КонецФункции

Функция ИзвлечьАрхив(Архив, Путь, МаскаФильтр = Неопределено)
	
	ЧтениеZIP = Новый ЧтениеZipФайла(Архив.ПолноеИмя);
	ЧтениеZIP.ИзвлечьВсе(Путь.ПолноеИмя, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZIP.Закрыть();
	
	ИзвлеченныеФайлы = НайтиФайлы(Путь.ПолноеИмя, МаскаФильтр, Истина);
	
	Возврат ИзвлеченныеФайлы;
	
КонецФункции

Функция СортироватьФайлы(МассивФайлов, Поле, Направление = "Возр")
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Файл");
	ТаблицаФайлов.Колонки.Добавить(Поле);
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		СтрТаб = ТаблицаФайлов.Добавить();
		СтрТаб.Файл = Файл;
		
		Если Поле = "Размер" Тогда
			СтрТаб[Поле] = Файл.Размер();
			
		ИначеЕсли Поле = "ЭтоФайл" Тогда
			СтрТаб[Поле] = Файл.ЭтоФайл();
			
		ИначеЕсли Поле = "ЭтоКаталог" Тогда
			СтрТаб[Поле] = Файл.ЭтоКаталог();
			
		ИначеЕсли Поле = "ВремяИзменения" Тогда
			СтрТаб[Поле] = Файл.ПолучитьУниверсальноеВремяИзменения();
			
		Иначе
			СтрТаб[Поле] = Файл[Поле];
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаФайлов.Сортировать(Поле + " " + Направление);
	
	Возврат ТаблицаФайлов.ВыгрузитьКолонку("Файл");
	
КонецФункции

Функция ПолучитьКаталог(Знач КаталогРодитель, ИмяКаталога)
	
	Если ТипЗнч(КаталогРодитель) = Тип("Строка") Тогда
		КаталогРодитель = Новый Файл(КаталогРодитель);
	КонецЕсли;
	
	Каталог = Новый Файл(КаталогРодитель.ПолноеИмя + "\" + ИмяКаталога);
	
	Если НЕ Каталог.Существует() Тогда
		СоздатьКаталог(Каталог.ПолноеИмя);
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

Функция УдалениеФайлов(Файлы)
	
	Если ТипЗнч(Файлы) = Тип("Массив")
		ИЛИ ТипЗнч(Файлы) = Тип("ФиксированныйМассив") Тогда
		МассивФайлов = Файлы;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(Файлы);
	КонецЕсли;
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		Если ТипЗнч(Файл) <> Тип("Файл") Тогда
			Файл = Новый Файл(Файл);
		КонецЕсли;
		
		УдалитьФайлы(Файл.ПолноеИмя);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Кеширование

Функция СоздатьКеш()
	Возврат Новый Структура;
КонецФункции

Функция Кеш(Имя, КакСоответствие = Истина)
	
	Если Кеш = Неопределено Тогда
		Кеш = СоздатьКеш();
	КонецЕсли;
	
	КешПоИмени = Неопределено;
	
	Если НЕ Кеш.Свойство(Имя, КешПоИмени) Тогда
		
		Если КакСоответствие Тогда
			КешПоИмени = Новый Соответствие;
		Иначе
			КешПоИмени = Новый Структура;
		КонецЕсли;
		
		Кеш.Вставить(Имя, КешПоИмени);
		
	КонецЕсли;
	
	Возврат КешПоИмени;
	
КонецФункции

#КонецОбласти

#Область Исключения

Процедура ВызватьИсключениеОтсутствуетКлючAPI(Организация)
	БроситьИсключение(
		ТипыОшибок().ОтсутствуетКлючAPI,
		СтрШаблон(
			"Не найден ключ API для организации '%1'",
			Организация
		)
	);
КонецПроцедуры

Процедура ВызватьИсключениеМетодНеРеализован(ИмяМетода)
	БроситьИсключение(
		ТипыОшибок().МетодНеРеализован,
		СтрШаблон(
			"Не реализован метод '%1'",
			ИмяМетода
		)
	);
КонецПроцедуры

Процедура ВызватьИсключениеОбъектНеСериализован(Объект)
	БроситьИсключение(
		ТипыОшибок().ОбъектНеСериализован,
		СтрШаблон(
			"Не удалось сериализовать объект '%1'",
			Объект
		)
	);
КонецПроцедуры

#КонецОбласти

#Область Ошибки

Функция ТипыОшибок()
	
	ТипыОшибок = Кеш("ТипыОшибок", Ложь);
	
	Если ЗначениеЗаполнено(ТипыОшибок) Тогда
		Возврат ТипыОшибок;
	КонецЕсли;
	
	ИменаОшибок = Новый Массив;
	
	// ======================
	// ОШИБКИ
	
	// Технические
	ИменаОшибок.Добавить("НеизвестнаяКоманда");
	ИменаОшибок.Добавить("НеизвестнаяКомандаОбмена");
	ИменаОшибок.Добавить("Неизвестная");
	ИменаОшибок.Добавить("МетодНеРеализован");
	ИменаОшибок.Добавить("ОбъектНеСериализован");
	
	// Сервис интеграции
	ИменаОшибок.Добавить("ОтсутствуетКлючAPI");
	
	// Прикладные
	ИменаОшибок.Добавить("НеоднозначныйПоиск");
	ИменаОшибок.Добавить("НеНайдено");
	ИменаОшибок.Добавить("НедостаточноОстатка");
	ИменаОшибок.Добавить("НеЗавершенаОбработкаЗаказа");
	
	// Платформенные
	ИменаОшибок.Добавить("Блокировка");
	
	// ======================
	
	Для Каждого ТипОшибки Из ИменаОшибок Цикл
		ТипыОшибок.Вставить(ТипОшибки, ТипОшибкиПредставление(ТипОшибки));
	КонецЦикла;
	
	Возврат ТипыОшибок;
	
КонецФункции

Функция ТипОшибкиПредставление(ТипОшибки)
	
	Если Лев(ТипОшибки, 1) = "{" И Прав(ТипОшибки, 1) = "}" Тогда
		Возврат ТипОшибки;
	Иначе
		Возврат СтрШаблон("{%1}", ТипОшибки);
	КонецЕсли;
	
КонецФункции

Функция БроситьИсключение(Знач ТипОшибки = Неопределено, Знач Текст)
	
	Текст = ТекстОшибки(Текст);
	
	Если ТипОшибки = Неопределено Тогда
		ТипОшибки = ОпределитьТипОшибки(Текст);
	КонецЕсли;
	
	ТипОшибки = ТипОшибкиПредставление(ТипОшибки);
	
	Если СтрНайти(Текст, ТипОшибки) <> 1 Тогда
		ТекстИсключения = СтрШаблон(
			"%1: %2",
			ТипОшибки, Текст
		);
	Иначе
		ТекстИсключения = Текст;
	КонецЕсли;
	
	ВызватьИсключение ТекстИсключения;
	
КонецФункции

Функция Ошибка(ИнформацияОбОшибке)
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ошибка = Новый Структура("Текст, Инфо, Тип, Причина");
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Ошибка.Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Ошибка.Инфо = ИнформацияОбОшибке;
		Ошибка.Причина = Ошибка(ИнформацияОбОшибке.Причина);
	Иначе
		Ошибка.Текст = Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
	ТипыОшибок = ТипыОшибок();
	
	Для Каждого ТипОшибки Из ТипыОшибок Цикл
		Если СтрНайти(Ошибка.Текст, ТипОшибки.Значение) Тогда
			Ошибка.Тип = ТипОшибки.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Ошибка.Тип = Неопределено Тогда
		Ошибка.Тип = ОпределитьТипОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

Функция ОпределитьТипОшибки(ИсточникОшибки)
	
	Текст = ТекстОшибки(ИсточникОшибки);
	
	Если СтрНайти(Текст, "недостаточно свободного остатка") Тогда
		ТипОшибки = ТипыОшибок().НедостаточноОстатка;
		
	ИначеЕсли СтрНайти(Текст, "конфликт блокировок")
		ИЛИ СтрНайти(Текст, "взаимоблокировк")
		ИЛИ СтрНайти(Текст, "deadlock")
		Тогда
		ТипОшибки = ТипыОшибок().НедостаточноОстатка;
		
	Иначе
		ТипОшибки = ТипыОшибок().Неизвестная;
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ТекстОшибки(ИсточникОшибки)
	
	Если ТипЗнч(ИсточникОшибки) = Тип("Строка") Тогда
		Текст = ИсточникОшибки;
		
	ИначеЕсли ТипЗнч(ИсточникОшибки) = Тип("Массив") Тогда
		Текст = СтрСоединить(ИсточникОшибки, Символы.ПС);
		
	ИначеЕсли ТипЗнч(ИсточникОшибки) = Тип("ИнформацияОбОшибке") Тогда
		Текст = ПодробноеПредставлениеОшибки(ИсточникОшибки);
		
	Иначе
		ВызватьИсключение СтрШаблон(
			"Недопустимый тип значения аргумента '%1': %2",
			"ИсточникОшибки", ТипЗнч(ИсточникОшибки)
		);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПеречисленияОбщие

Функция Маркетплейсы() Экспорт
	
	Маркетплейсы = Кеш("Маркетплейсы", Ложь);
	
	Если ЗначениеЗаполнено(Маркетплейсы) Тогда
		Возврат Маркетплейсы;
	КонецЕсли;
	
	// ======================
	// МАРКЕТПЛЕЙСЫ
	
	ИменаМаркетплейсов = Новый Массив;
	
	ИменаМаркетплейсов.Добавить("Wildberries");
	ИменаМаркетплейсов.Добавить("OZON");
	ИменаМаркетплейсов.Добавить("Yandex");
	
	// ======================
	
	Для Каждого ИмяМаркетплейса Из ИменаМаркетплейсов Цикл
		Маркетплейсы.Вставить(ИмяМаркетплейса, ИмяМаркетплейса);
	КонецЦикла;
	
	Возврат Маркетплейсы;
	
КонецФункции

Функция ТипыПричинПриостановкиЗаказов() Экспорт
	
	МассивПричин = Новый Массив;
	
	МассивПричин.Добавить("Неизвестная");
	МассивПричин.Добавить("НеудачноеРезервирование");
	МассивПричин.Добавить("НедостаточноОстатка");
	МассивПричин.Добавить("ТребуетсяРазделениеОтправлений");
	
	ТипыПричин = Новый Структура;
	Для Каждого ТипПричины Из МассивПричин Цикл
		ТипыПричин.Вставить(ТипПричины, ТипПричины);
	КонецЦикла;
	
	Возврат ТипыПричин;
	
КонецФункции

#КонецОбласти

#Область Логирование

Функция ЛогИнфо(Текст, Ссылка = Неопределено, Подсобытие = Неопределено, НезависимыйРежим = Истина)
	Возврат ЗаписьЖурнала(Текст, УровеньЖурналаРегистрации.Информация, Ссылка, Подсобытие, НезависимыйРежим);
КонецФункции

Функция ЛогВнимание(Текст, Ссылка = Неопределено, Подсобытие = Неопределено, НезависимыйРежим = Истина)
	Возврат ЗаписьЖурнала(Текст, УровеньЖурналаРегистрации.Предупреждение, Ссылка, Подсобытие, НезависимыйРежим);
КонецФункции

Функция ЛогОшибка(Текст, Ссылка = Неопределено, Подсобытие = Неопределено, НезависимыйРежим = Истина)
	Возврат ЗаписьЖурнала(Текст, УровеньЖурналаРегистрации.Ошибка, Ссылка, Подсобытие, НезависимыйРежим);
КонецФункции

Функция ЛогОтладка(Текст, Ссылка = Неопределено, Подсобытие = Неопределено, НезависимыйРежим = Истина)
	Если Отладка Тогда
		Возврат ЗаписьЖурнала(Текст, УровеньЖурналаРегистрации.Примечание, Ссылка, Подсобытие, НезависимыйРежим);
	КонецЕсли;
	Возврат СтруктураЗаписиЖурнала();  // пустой контейнер
КонецФункции

Функция ОсновноеСобытиеЖурнала()
	Возврат "КлиентУН_МИ";
КонецФункции

Функция СтруктураЗаписиЖурнала(Событие = "", Уровень = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "")
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Событие",				Событие);
	СтруктураЗаписи.Вставить("Уровень",				Уровень);
	СтруктураЗаписи.Вставить("ОбъектМетаданных",	ОбъектМетаданных);
	СтруктураЗаписи.Вставить("Данные",				Данные);
	СтруктураЗаписи.Вставить("Комментарий",			Комментарий);
	СтруктураЗаписи.Вставить("ЭтоОшибка",			Уровень = УровеньЖурналаРегистрации.Ошибка);
	
	Возврат СтруктураЗаписи;
	
КонецФункции

Функция ЗаписьЖурнала(Комментарий, Уровень, Данные = Неопределено, Подсобытие = Неопределено, НезависимыйРежим = Истина)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
	
	Если НезависимыйРежим Тогда
		РежимТранзации = РежимТранзакцииЗаписиЖурналаРегистрации.Независимая;
	Иначе
		РежимТранзации = РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подсобытие) Тогда
		ИмяСобытия = СтрШаблон("%1.%2", ОсновноеСобытиеЖурнала, Подсобытие);
	Иначе
		ИмяСобытия = ОсновноеСобытиеЖурнала;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		Уровень,
		ОбъектМетаданных,
		Данные,
		Комментарий,
		РежимТранзации
	);
	
	СтруктураЗаписи = СтруктураЗаписиЖурнала(
		ИмяСобытия,
		Уровень,
		ОбъектМетаданных,
		Данные,
		Комментарий
	);
	
	Если Отладка Тогда
		Сообщить(Комментарий);
	КонецЕсли;
	
	Возврат СтруктураЗаписи;
	
КонецФункции

Функция ВыводДляОтладки(ИмяЗначения, Значение)
	Сообщить(СтрШаблон(
		"%1 = '%2' {%3}",
		ИмяЗначения,
		Значение,
		ТипЗнч(Значение)
	));
КонецФункции

#КонецОбласти

#Область Сообщения

Функция НакопленныеСообщения()
	Возврат Новый Массив;
КонецФункции

Процедура ОсвободитьБуферСообщений()
	
	СообщенияВБуфере = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Сообщение Из СообщенияВБуфере Цикл
		НакопленныеСообщения.Добавить(Сообщение);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстыСообщенийПользователю(ПереместитьСообщенияВНакопленные = Истина)
	
	ТекстыСообщений = Новый Массив;
	
	Для Каждого СообщениеПользователю Из ПолучитьСообщенияПользователю(Ложь) Цикл
		ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
	КонецЦикла;
	
	Если ПереместитьСообщенияВНакопленные Тогда
		// Перемещаем прочитанные сообщения в очередь - в накопленные
		ОсвободитьБуферСообщений();
	КонецЕсли;
	
	Возврат ТекстыСообщений;
	
КонецФункции

Процедура ВывестиНакопленныеСообщения()
	
	ОсвободитьБуферСообщений();
	
	Для Каждого Сообщение Из НакопленныеСообщения Цикл

		Если Отладка Тогда
			Сообщение.Текст = Сообщение.Текст
				+ Символы.ПС
				+ "-------------------------------------------";
		КонецЕсли;

		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Замеры

Функция Замер(Миллисекунды = Истина)
	Если Миллисекунды Тогда
		Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;
КонецФункции

Функция ПотраченоВремени(Замер, Форматировать = Истина)
	
	ЗамерВМиллисекундах = ТипЗнч(Замер) = Тип("Число");
	
	НовыйЗамер = Замер(ЗамерВМиллисекундах);
	ПотраченоВремени = НовыйЗамер - Замер;
	
	Если ЗамерВМиллисекундах Тогда
		ПотраченоВремени = ПотраченоВремени / 1000;
	КонецЕсли;
	
	Если Форматировать Тогда
		Возврат Формат(ПотраченоВремени, "ЧРД=.; ЧГ=0");
	Иначе
		Возврат ПотраченоВремени;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Общие

Функция ЕстьРеквизит(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция ЗначениеСвойства(Объект, ИмяСвойства, ЗначениеПоУмолчанию = Неопределено)
	
	Если ЕстьРеквизит(Объект, ИмяСвойства) Тогда
		Возврат Объект[ИмяСвойства];
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция КлючиСоответствия(Соответствие) Экспорт
	Ключи = Новый Массив;
	Для Каждого Элемент Из Соответствие Цикл
		Ключи.Добавить(Элемент.Ключ);
	КонецЦикла;
	Возврат Ключи;
КонецФункции

Функция ЕслиПусто(Значение, ЗначениеПоУмолчанию)
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

Функция НовыйМассив(Знч1, Знч2 = Null, Знч3 = Null, Знч4 = Null, Знч5 = Null)
	
	НовыйМассив = Новый Массив;
	
	Для Сч = 1 По 5 Цикл
		ТекЗнч = Вычислить("Знч" + Сч);
		Если ТекЗнч <> Null Тогда
			НовыйМассив.Добавить(ТекЗнч);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции

Функция ТипЧисло(ЧислоРазрядов = 0, ЧислоРазрядовДробнойЧасти = 0, Неотрицательное = Ложь)
	
	Если Неотрицательное Тогда
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Неотрицательный;
	Иначе
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(
		ЧислоРазрядов,
		ЧислоРазрядовДробнойЧасти,
		ДопустимыйЗнакЧисла
	);
	
	Возврат Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
КонецФункции

Функция ТипСтрока(Длина = 0, Фиксированная = Ложь)
	
	Если Фиксированная Тогда
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Фиксированная;
	Иначе
		ДопустимаяДлинаСтроки = ДопустимаяДлина.Переменная;
	КонецЕсли;
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(Длина, ДопустимаяДлинаСтроки);
	
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторыСтроки);
	
КонецФункции

Функция ТипДата(СоставДаты = Неопределено)
	
	Если СоставДаты = Неопределено Тогда
		СоставДаты = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	КвалификаторыДаты = Новый КвалификаторыДаты(СоставДаты);
	
	Возврат Новый ОписаниеТипов("Дата", , , КвалификаторыДаты);
	
КонецФункции

Функция ТипБулево()
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

Функция ТипСсылка(ИмяТипа)
	Если ТипЗнч(ИмяТипа) = Тип("Строка") Тогда
		Возврат Новый ОписаниеТипов(ИмяТипа);
	ИначеЕсли ТипЗнч(ИмяТипа) = Тип("Тип") Тогда
		Типы = Новый Массив;
		Типы.Добавить(ИмяТипа);
		Возврат Новый ОписаниеТипов(Типы);
	Иначе
		ВызватьИсключение СтрШаблон(
			"Недопустимое значение параметра 'ИмяТипа': '%1' (тип: '%2')",
			ИмяТипа, ТипЗнч(ИмяТипа));
	КонецЕсли;
КонецФункции

Функция ЧастьURL(Знач Строка)
	
	Строка = СокрЛП(Строка);
	
	Если СтрНачинаетсяС(Строка, "/") Тогда
		Строка = Сред(Строка, 2);
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(Строка, "/") Тогда
		Строка = Сред(Строка, 1, СтрДлина(Строка) - 1);
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция Дней(Количество)
	Возврат Количество * 3600 * 24;
КонецФункции

#КонецОбласти

#Область Настройки

Функция Настройки() Экспорт
	
	Настройки = Кеш("Настройки", Ложь);
	
	Если НЕ КешироватьНастройки Тогда
		Настройки = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Настройки = СтруктураНастроек();
	ВосстановитьНастройки(Настройки);
	
	Кеш.Вставить("Настройки", Настройки);
	
	Возврат Настройки;
	
КонецФункции

Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("НомерВерсииНастроек", 0);
	
	// Настройки подключения Сервиса интеграции
	СтруктураНастроек.Вставить("АдресСервисаИнтеграции", "");
	СтруктураНастроек.Вставить("ПортСервисаИнтеграции", 0);
	СтруктураНастроек.Вставить("ТаймаутСервисаИнтеграции", 30);
	СтруктураНастроек.Вставить("ПользовательСервисаИнтеграции", "");
	СтруктураНастроек.Вставить("ПарольСервисаИнтеграции", "");
	СтруктураНастроек.Вставить("ЗащищенноеСоединениеСервисаИнтеграции", Ложь);
	СтруктураНастроек.Вставить("РазмещениеAPIСервисаИнтеграции", "");
	
	// Настройки сервиса файлов
	СтруктураНастроек.Вставить("АдресСервисаФайлов", "10.12.0.13");
	СтруктураНастроек.Вставить("ПортСервисаФайлов", 80);
	СтруктураНастроек.Вставить("ТаймаутСервисаФайлов", 30);
	СтруктураНастроек.Вставить("ПользовательСервисаФайлов", "");
	СтруктураНастроек.Вставить("ПарольСервисаФайлов", "");
	СтруктураНастроек.Вставить("ЗащищенноеСоединениеСервисаФайлов", Ложь);
	СтруктураНастроек.Вставить("КорневойКаталогСервисаФайлов", "");
	СтруктураНастроек.Вставить("КаталогКешаЭтикеток");
	СтруктураНастроек.Вставить("КонвертерФайлов", "C:\Program Files\ImageMagick-7.0.11-Q16-HDRI\magick.exe");
	
	// Ключи API
	КлючиAPI = Новый ТаблицаЗначений;
	КлючиAPI.Колонки.Добавить("Ид");
	КлючиAPI.Колонки.Добавить("КлючAPI");
	КлючиAPI.Колонки.Добавить("Владелец");
	КлючиAPI.Колонки.Добавить("Описание");
	
	СтруктураНастроек.Вставить("КлючиAPI", КлючиAPI);
	
	// Настройки обмена данными
	НастройкиОбмена = Новый ТаблицаЗначений;
	НастройкиОбмена.Колонки.Добавить("Ид");
	НастройкиОбмена.Колонки.Добавить("Использование");
	НастройкиОбмена.Колонки.Добавить("Направление");
	НастройкиОбмена.Колонки.Добавить("КомандаОбмена");
	НастройкиОбмена.Колонки.Добавить("ВерсияAPI");
	НастройкиОбмена.Колонки.Добавить("КлючИд");
	НастройкиОбмена.Колонки.Добавить("Описание");
	
	СтруктураНастроек.Вставить("НастройкиОбмена", НастройкиОбмена);
	
	// Параметры настройки обмена данными
	ПараметрыОбмена = Новый ТаблицаЗначений;
	ПараметрыОбмена.Колонки.Добавить("НастройкаИд");
	ПараметрыОбмена.Колонки.Добавить("Имя");
	ПараметрыОбмена.Колонки.Добавить("ТипЗначения");
	ПараметрыОбмена.Колонки.Добавить("Значение");
	ПараметрыОбмена.Колонки.Добавить("Описание");
	ПараметрыОбмена.Колонки.Добавить("Обязательный");
	
	СтруктураНастроек.Вставить("ПараметрыОбмена", ПараметрыОбмена);
	
	// Маркетплейсы
	НастройкиМаркетплейсов = Новый ТаблицаЗначений;
	НастройкиМаркетплейсов.Колонки.Добавить("Использование");
	НастройкиМаркетплейсов.Колонки.Добавить("ТестовыйРежим");
	НастройкиМаркетплейсов.Колонки.Добавить("Организация");
	НастройкиМаркетплейсов.Колонки.Добавить("Контрагент");
	НастройкиМаркетплейсов.Колонки.Добавить("Склад");  // маркетплейса, когда через работа через "Заказ на перемещение"
	НастройкиМаркетплейсов.Колонки.Добавить("Имя");
	НастройкиМаркетплейсов.Колонки.Добавить("ШаблонЭтикеткиШтрихкода");
	НастройкиМаркетплейсов.Колонки.Добавить("ШаблонЭтикеткиМаркетплейса");
	НастройкиМаркетплейсов.Колонки.Добавить("КаталогЭтикеток");
	НастройкиМаркетплейсов.Колонки.Добавить("ТипФайлаЭтикетки");
	НастройкиМаркетплейсов.Колонки.Добавить("СпособДоставки");
	НастройкиМаркетплейсов.Колонки.Добавить("АдресДоставки");
	НастройкиМаркетплейсов.Колонки.Добавить("ЗонаДоставки");
	НастройкиМаркетплейсов.Колонки.Добавить("ИспользоватьОтправления");
	НастройкиМаркетплейсов.Колонки.Добавить("ИспользоватьПоставки");
	НастройкиМаркетплейсов.Колонки.Добавить("КомандыОбмена");
	
	СтруктураНастроек.Вставить("НастройкиМаркетплейсов", НастройкиМаркетплейсов);
	
	// Доставки маркетплейсов
	НастройкиДоставкиМаркетплейсов = Новый ТаблицаЗначений;
	НастройкиДоставкиМаркетплейсов.Колонки.Добавить("Использование");
	НастройкиДоставкиМаркетплейсов.Колонки.Добавить("Организация");
	НастройкиДоставкиМаркетплейсов.Колонки.Добавить("Имя");  // имя МП для связи с таблицей "НастройкиМаркетплейсов"
	НастройкиДоставкиМаркетплейсов.Колонки.Добавить("СпособДоставки");
	НастройкиДоставкиМаркетплейсов.Колонки.Добавить("АдресДоставки");
	НастройкиДоставкиМаркетплейсов.Колонки.Добавить("ЗонаДоставки");
	
	СтруктураНастроек.Вставить("НастройкиДоставкиМаркетплейсов", НастройкиДоставкиМаркетплейсов);
	
	// Прочее
	
	СтруктураНастроек.Вставить("ИспользоватьПодключаемоеОборудование", Ложь);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СохраненныеНастройки() Экспорт
	Возврат ОбработкаСсылка.ХранилищеНастроек.Получить();
КонецФункции

Процедура СохранитьНастройки(ИсточникНастроек) Экспорт
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ДополнительныеОтчетыИОбработки");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭтотОбъект.ОбработкаСсылка);
	Блокировка.Заблокировать();
	
	ТекущиеНастройки = Настройки();
	
	Если ТекущиеНастройки.НомерВерсииНастроек > ИсточникНастроек.НомерВерсииНастроек Тогда
		ОтменитьТранзакцию();
		ВызватьИсключение "Изменилась версия настроек! Требуется перечитать!";
	КонецЕсли;
	
	СтруктураНастроек = СтруктураНастроек();
	
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИмяНастройки = Настройка.Ключ;
		ЗначениеНастройки = Настройка.Значение;
		
		Если НЕ ЕстьРеквизит(ИсточникНастроек, ИмяНастройки) Тогда
			Продолжить;
		КонецЕсли;
		
		СохраняемоеЗначение = ИсточникНастроек[ИмяНастройки];

		Если ТипЗнч(ЗначениеНастройки) = Тип("ТаблицаЗначений") Тогда
			ЗначениеНастройки.Очистить();
			
			Если ТипЗнч(СохраняемоеЗначение) = Тип("ДанныеФормыКоллекция") Тогда
				СохраняемоеЗначение = СохраняемоеЗначение.Выгрузить();
			КонецЕсли;
			
			Если ТипЗнч(СохраняемоеЗначение) <> Тип("ТаблицаЗначений") Тогда
				ВызватьИсключение СтрШаблон(
					"Ошибка сохранения настройки '%1' из-за несоответствия типов!
					|Ожидаются типы: 'ТаблицаЗначений', 'ДанныеФормыКоллекция'",
					ИмяНастройки
				);
			КонецЕсли;
			
			Для Каждого СтрТаб Из СохраняемоеЗначение Цикл
				ЗаполнитьЗначенияСвойств(ЗначениеНастройки.Добавить(), СтрТаб);
			КонецЦикла;
			
		Иначе
			СтруктураНастроек[ИмяНастройки] = СохраняемоеЗначение;
			
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураНастроек.НомерВерсииНастроек = СтруктураНастроек.НомерВерсииНастроек + 1;
	
	ДополнительнаяОбработка = ОбработкаСсылка.ПолучитьОбъект();
	ДополнительнаяОбработка.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураНастроек);
	ДополнительнаяОбработка.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ВосстановитьНастройки(ПриемникНастроек) Экспорт
	
	СтруктураНастроек = СтруктураНастроек();
	
	СохраненныеНастройки = СохраненныеНастройки();
	
	Если СохраненныеНастройки = Неопределено Тогда
		СохраненныеНастройки = Новый Структура;
	КонецЕсли;
		
	Для Каждого Настройка Из СтруктураНастроек Цикл
		ИмяНастройки = Настройка.Ключ;
		ЗначениеНастройки = Настройка.Значение;
		
		Если НЕ ЕстьРеквизит(ПриемникНастроек, ИмяНастройки) Тогда
			Продолжить;
		КонецЕсли;
		
		СохраненноеЗначение = Неопределено;
		Если СохраненныеНастройки.Свойство(ИмяНастройки, СохраненноеЗначение) Тогда
			ЗначениеНастройки = СохраненноеЗначение;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеНастройки) = Тип("ТаблицаЗначений") Тогда
			
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				ПриемникНастроек[ИмяНастройки].Очистить();
			КонецЕсли;
			
			Для Каждого СтрТаб Из ЗначениеНастройки Цикл
				ЗаполнитьЗначенияСвойств(ПриемникНастроек[ИмяНастройки].Добавить(), СтрТаб);
			КонецЦикла;
			
		Иначе
			ПриемникНастроек[ИмяНастройки] = ЗначениеНастройки;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция КлючAPI(СтруктураНастроек, КлючИД)
	
	СтрокаКлюча = СтруктураНастроек.КлючиAPI.Найти(КлючИД, "Ид");
	Если СтрокаКлюча = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаКлюча.КлючAPI;
	
КонецФункции

Функция СтрокаНастройкиМаркетплейса(Настройки, Организация, Контрагент) Экспорт
	
	ПараметрыПоиска = Новый Структура("Организация", Организация);
	
	ЭтоКонтрагентСклад = ТипЗнч(Контрагент) = Тип("СправочникСсылка.Склады");
	Если ЭтоКонтрагентСклад Тогда
		ПараметрыПоиска.Вставить("Склад", Контрагент);
	Иначе
		ПараметрыПоиска.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	СтрокиНастроек = Настройки.НастройкиМаркетплейсов.НайтиСтроки(ПараметрыПоиска);
	
	Если НЕ ЗначениеЗаполнено(СтрокиНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокиНастроек[0];
	
КонецФункции

#КонецОбласти

Кеш = СоздатьКеш();
КешироватьНастройки = Ложь;

ОсновноеСобытиеЖурнала = ОсновноеСобытиеЖурнала();
НакопленныеСообщения = НакопленныеСообщения();
